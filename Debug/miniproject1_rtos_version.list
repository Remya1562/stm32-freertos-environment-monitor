
miniproject1_rtos_version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08007778  08007778  00008778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bfc  08007bfc  000091dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bfc  08007bfc  00008bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c04  08007c04  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c04  08007c04  00008c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c08  08007c08  00008c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007c0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae0  200001dc  08007de8  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cbc  08007de8  00009cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8d4  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b6  00000000  00000000  00016ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00019098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f2  00000000  00000000  00019c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017df9  00000000  00000000  0001a582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9c7  00000000  00000000  0003237b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909ee  00000000  00000000  00040d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f18  00000000  00000000  000d1774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000d568c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007760 	.word	0x08007760

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007760 	.word	0x08007760

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <adc1_init>:
#define GPIOAEN         (1U<<0)
#define CR2_ADON        (1U<<0)
#define CR2_SWSTART     (1U<<30)
#define SR_EOC          (1U<<1)

void adc1_init(void){
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= GPIOAEN;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <adc1_init+0x94>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <adc1_init+0x94>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= ADC1EN;
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <adc1_init+0x94>)
 8000bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c4c <adc1_init+0x94>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bd2:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER &= ~(3U << (0*2));
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <adc1_init+0x98>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c50 <adc1_init+0x98>)
 8000bda:	f023 0303 	bic.w	r3, r3, #3
 8000bde:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (3U << (0*2));
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <adc1_init+0x98>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c50 <adc1_init+0x98>)
 8000be6:	f043 0303 	orr.w	r3, r3, #3
 8000bea:	6013      	str	r3, [r2, #0]

    ADC1->CR1 = 0;
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <adc1_init+0x9c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = CR2_ADON;
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <adc1_init+0x9c>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	609a      	str	r2, [r3, #8]

    ADC1->SMPR2 &= ~(7U << (0*3));
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <adc1_init+0x9c>)
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	4a15      	ldr	r2, [pc, #84]	@ (8000c54 <adc1_init+0x9c>)
 8000bfe:	f023 0307 	bic.w	r3, r3, #7
 8000c02:	6113      	str	r3, [r2, #16]
    ADC1->SMPR2 |=  (7U << (0*3));
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <adc1_init+0x9c>)
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <adc1_init+0x9c>)
 8000c0a:	f043 0307 	orr.w	r3, r3, #7
 8000c0e:	6113      	str	r3, [r2, #16]

    ADC1->SQR3 = 0;
 8000c10:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <adc1_init+0x9c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	@ 0x34

    ADC1->CR2 |= CR2_SWSTART;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <adc1_init+0x9c>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c54 <adc1_init+0x9c>)
 8000c1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c20:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & SR_EOC));
 8000c22:	bf00      	nop
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <adc1_init+0x9c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f9      	beq.n	8000c24 <adc1_init+0x6c>
    (void)ADC1->DR;
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <adc1_init+0x9c>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    ADC1->SR &= ~SR_EOC;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <adc1_init+0x9c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <adc1_init+0x9c>)
 8000c3a:	f023 0302 	bic.w	r3, r3, #2
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40012000 	.word	0x40012000

08000c58 <adc1_read>:

uint32_t adc1_read(void){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
    ADC1->CR2 |= CR2_SWSTART;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <adc1_read+0x44>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <adc1_read+0x44>)
 8000c64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c68:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & SR_EOC));
 8000c6a:	bf00      	nop
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <adc1_read+0x44>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f9      	beq.n	8000c6c <adc1_read+0x14>
    uint32_t val = ADC1->DR & 0xFFF;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <adc1_read+0x44>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c80:	607b      	str	r3, [r7, #4]
    ADC1->SR &= ~SR_EOC;
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <adc1_read+0x44>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <adc1_read+0x44>)
 8000c88:	f023 0302 	bic.w	r3, r3, #2
 8000c8c:	6013      	str	r3, [r2, #0]
    return val;
 8000c8e:	687b      	ldr	r3, [r7, #4]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40012000 	.word	0x40012000

08000ca0 <bme280_read_calib>:
#define BME280_HUM_MSB   0xFD

static BME280_CalibData calib;
static int32_t t_fine;

void bme280_read_calib(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
    uint8_t buf[26], hum[7];

    i2c1_burstread(BME280_ADDR, 0x88, buf, 26);
 8000ca6:	f107 020c 	add.w	r2, r7, #12
 8000caa:	231a      	movs	r3, #26
 8000cac:	2188      	movs	r1, #136	@ 0x88
 8000cae:	2076      	movs	r0, #118	@ 0x76
 8000cb0:	f000 fb1a 	bl	80012e8 <i2c1_burstread>
    i2c1_burstread(BME280_ADDR, 0xE1, hum, 7);
 8000cb4:	1d3a      	adds	r2, r7, #4
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	21e1      	movs	r1, #225	@ 0xe1
 8000cba:	2076      	movs	r0, #118	@ 0x76
 8000cbc:	f000 fb14 	bl	80012e8 <i2c1_burstread>

    // Temperature calibration (big endian)
    calib.dig_T1 = (buf[1]<<8)|buf[0];
 8000cc0:	7b7b      	ldrb	r3, [r7, #13]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	7b3b      	ldrb	r3, [r7, #12]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000cd4:	801a      	strh	r2, [r3, #0]
    calib.dig_T2 = (int16_t)((buf[3]<<8)|buf[2]);
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000ce8:	805a      	strh	r2, [r3, #2]
    calib.dig_T3 = (int16_t)((buf[5]<<8)|buf[4]);
 8000cea:	7c7b      	ldrb	r3, [r7, #17]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	7c3b      	ldrb	r3, [r7, #16]
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000cfc:	809a      	strh	r2, [r3, #4]
    calib.dig_H1 = buf[25];
 8000cfe:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000d04:	719a      	strb	r2, [r3, #6]

    calib.dig_H2 = (int16_t)((hum[1]<<8)|hum[0]);
 8000d06:	797b      	ldrb	r3, [r7, #5]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	793b      	ldrb	r3, [r7, #4]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000d18:	811a      	strh	r2, [r3, #8]
    calib.dig_H3 = hum[2];
 8000d1a:	79ba      	ldrb	r2, [r7, #6]
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000d1e:	729a      	strb	r2, [r3, #10]
    calib.dig_H4 = (int16_t)((hum[3]<<4)|(hum[4]&0x0F));
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	7a3b      	ldrb	r3, [r7, #8]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000d38:	819a      	strh	r2, [r3, #12]
    calib.dig_H5 = (int16_t)((hum[5]<<4)|(hum[4]>>4));
 8000d3a:	7a7b      	ldrb	r3, [r7, #9]
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	7a3b      	ldrb	r3, [r7, #8]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000d50:	81da      	strh	r2, [r3, #14]
    calib.dig_H6 = (int8_t)hum[6];
 8000d52:	7abb      	ldrb	r3, [r7, #10]
 8000d54:	b25a      	sxtb	r2, r3
 8000d56:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <bme280_read_calib+0xc4>)
 8000d58:	741a      	strb	r2, [r3, #16]
}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	@ 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200001f8 	.word	0x200001f8

08000d68 <bme280_init>:

void bme280_init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
    uint8_t data;

    data = 0xB6;
 8000d6e:	23b6      	movs	r3, #182	@ 0xb6
 8000d70:	71fb      	strb	r3, [r7, #7]
    i2c1_write(BME280_ADDR, BME280_RESET, &data, 1);
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	2301      	movs	r3, #1
 8000d76:	21e0      	movs	r1, #224	@ 0xe0
 8000d78:	2076      	movs	r0, #118	@ 0x76
 8000d7a:	f000 fa07 	bl	800118c <i2c1_write>

    for(volatile int i=0; i<50000; i++);
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	e002      	b.n	8000d8a <bme280_init+0x22>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000d90:	4293      	cmp	r3, r2
 8000d92:	ddf7      	ble.n	8000d84 <bme280_init+0x1c>

    data = 0x01;
 8000d94:	2301      	movs	r3, #1
 8000d96:	71fb      	strb	r3, [r7, #7]
    i2c1_write(BME280_ADDR, BME280_CTRL_HUM, &data, 1);
 8000d98:	1dfa      	adds	r2, r7, #7
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	21f2      	movs	r1, #242	@ 0xf2
 8000d9e:	2076      	movs	r0, #118	@ 0x76
 8000da0:	f000 f9f4 	bl	800118c <i2c1_write>

    data = 0x27;
 8000da4:	2327      	movs	r3, #39	@ 0x27
 8000da6:	71fb      	strb	r3, [r7, #7]
    i2c1_write(BME280_ADDR, BME280_CTRL_MEAS, &data, 1);
 8000da8:	1dfa      	adds	r2, r7, #7
 8000daa:	2301      	movs	r3, #1
 8000dac:	21f4      	movs	r1, #244	@ 0xf4
 8000dae:	2076      	movs	r0, #118	@ 0x76
 8000db0:	f000 f9ec 	bl	800118c <i2c1_write>

    data = 0x00;
 8000db4:	2300      	movs	r3, #0
 8000db6:	71fb      	strb	r3, [r7, #7]
    i2c1_write(BME280_ADDR, BME280_CONFIG, &data, 1);
 8000db8:	1dfa      	adds	r2, r7, #7
 8000dba:	2301      	movs	r3, #1
 8000dbc:	21f5      	movs	r1, #245	@ 0xf5
 8000dbe:	2076      	movs	r0, #118	@ 0x76
 8000dc0:	f000 f9e4 	bl	800118c <i2c1_write>

    bme280_read_calib();
 8000dc4:	f7ff ff6c 	bl	8000ca0 <bme280_read_calib>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <compensate_temp>:

static uint32_t compensate_temp(int32_t adc_T){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    int32_t var1 = ((((adc_T>>3) - ((int32_t)calib.dig_T1 <<1))) * ((int32_t)calib.dig_T2)) >> 11;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	10da      	asrs	r2, r3, #3
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <compensate_temp+0x70>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <compensate_temp+0x70>)
 8000de6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000dea:	fb02 f303 	mul.w	r3, r2, r3
 8000dee:	12db      	asrs	r3, r3, #11
 8000df0:	60fb      	str	r3, [r7, #12]
    int32_t var2 = (((((adc_T>>4) - ((int32_t)calib.dig_T1))*((adc_T>>4) - ((int32_t)calib.dig_T1))) >>12) * ((int32_t)calib.dig_T3)) >> 14;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	111b      	asrs	r3, r3, #4
 8000df6:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <compensate_temp+0x70>)
 8000df8:	8812      	ldrh	r2, [r2, #0]
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	1112      	asrs	r2, r2, #4
 8000e00:	490f      	ldr	r1, [pc, #60]	@ (8000e40 <compensate_temp+0x70>)
 8000e02:	8809      	ldrh	r1, [r1, #0]
 8000e04:	1a52      	subs	r2, r2, r1
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	131b      	asrs	r3, r3, #12
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <compensate_temp+0x70>)
 8000e0e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e12:	fb02 f303 	mul.w	r3, r2, r3
 8000e16:	139b      	asrs	r3, r3, #14
 8000e18:	60bb      	str	r3, [r7, #8]
    t_fine = var1 + var2;
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a08      	ldr	r2, [pc, #32]	@ (8000e44 <compensate_temp+0x74>)
 8000e22:	6013      	str	r3, [r2, #0]
    return (t_fine*5 +128)>>8;
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <compensate_temp+0x74>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3380      	adds	r3, #128	@ 0x80
 8000e30:	121b      	asrs	r3, r3, #8
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200001f8 	.word	0x200001f8
 8000e44:	2000020c 	.word	0x2000020c

08000e48 <compensate_humidity>:

static uint32_t compensate_humidity(int32_t adc_H){
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    int32_t v_x1 = t_fine - 76800;
 8000e50:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <compensate_humidity+0xc0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8000e58:	60fb      	str	r3, [r7, #12]
    v_x1 = (((((adc_H <<14) - ((int32_t)calib.dig_H4<<20) - ((int32_t)calib.dig_H5*v_x1))+16384)>>15) *
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	039a      	lsls	r2, r3, #14
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <compensate_humidity+0xc4>)
 8000e60:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e64:	051b      	lsls	r3, r3, #20
 8000e66:	1ad2      	subs	r2, r2, r3
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <compensate_humidity+0xc4>)
 8000e6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000e7c:	13db      	asrs	r3, r3, #15
             (((((((v_x1*calib.dig_H6)>>10)*(((v_x1*calib.dig_H3)>>11)+32768))>>10)+2097152)*calib.dig_H2 +8192)>>14));
 8000e7e:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <compensate_humidity+0xc4>)
 8000e80:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8000e84:	4611      	mov	r1, r2
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	fb01 f202 	mul.w	r2, r1, r2
 8000e8c:	1292      	asrs	r2, r2, #10
 8000e8e:	491f      	ldr	r1, [pc, #124]	@ (8000f0c <compensate_humidity+0xc4>)
 8000e90:	7a89      	ldrb	r1, [r1, #10]
 8000e92:	4608      	mov	r0, r1
 8000e94:	68f9      	ldr	r1, [r7, #12]
 8000e96:	fb00 f101 	mul.w	r1, r0, r1
 8000e9a:	12c9      	asrs	r1, r1, #11
 8000e9c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8000ea0:	fb01 f202 	mul.w	r2, r1, r2
 8000ea4:	1292      	asrs	r2, r2, #10
 8000ea6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8000eaa:	4918      	ldr	r1, [pc, #96]	@ (8000f0c <compensate_humidity+0xc4>)
 8000eac:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8000eb0:	fb01 f202 	mul.w	r2, r1, r2
 8000eb4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8000eb8:	1392      	asrs	r2, r2, #14
    v_x1 = (((((adc_H <<14) - ((int32_t)calib.dig_H4<<20) - ((int32_t)calib.dig_H5*v_x1))+16384)>>15) *
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	60fb      	str	r3, [r7, #12]
    v_x1 = v_x1 - (((((v_x1>>15)*(v_x1>>15))>>7)*calib.dig_H1)>>4);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	13db      	asrs	r3, r3, #15
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	13d2      	asrs	r2, r2, #15
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	11db      	asrs	r3, r3, #7
 8000ece:	4a0f      	ldr	r2, [pc, #60]	@ (8000f0c <compensate_humidity+0xc4>)
 8000ed0:	7992      	ldrb	r2, [r2, #6]
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	111b      	asrs	r3, r3, #4
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	60fb      	str	r3, [r7, #12]
    if(v_x1 < 0) v_x1 = 0;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da01      	bge.n	8000ee8 <compensate_humidity+0xa0>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
    if(v_x1 > 419430400) v_x1 = 419430400;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8000eee:	dd02      	ble.n	8000ef6 <compensate_humidity+0xae>
 8000ef0:	f04f 53c8 	mov.w	r3, #419430400	@ 0x19000000
 8000ef4:	60fb      	str	r3, [r7, #12]
    return (v_x1>>12);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	131b      	asrs	r3, r3, #12
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2000020c 	.word	0x2000020c
 8000f0c:	200001f8 	.word	0x200001f8

08000f10 <bme280_read>:

SensorData bme280_read(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
    uint8_t raw[8];
    i2c1_burstread(BME280_ADDR, BME280_PRESS_MSB, raw, 8);
 8000f16:	f107 0210 	add.w	r2, r7, #16
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	21f7      	movs	r1, #247	@ 0xf7
 8000f1e:	2076      	movs	r0, #118	@ 0x76
 8000f20:	f000 f9e2 	bl	80012e8 <i2c1_burstread>

    int32_t adc_T = ((int32_t)raw[3]<<12)|((int32_t)raw[4]<<4)|((raw[5]>>4)&0x0F);
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	031a      	lsls	r2, r3, #12
 8000f28:	7d3b      	ldrb	r3, [r7, #20]
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	7d7b      	ldrb	r3, [r7, #21]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t adc_H = ((int32_t)raw[6]<<8)|raw[7];
 8000f3c:	7dbb      	ldrb	r3, [r7, #22]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	7dfa      	ldrb	r2, [r7, #23]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	623b      	str	r3, [r7, #32]

    SensorData data;
    data.temperature = (float)compensate_temp(adc_T)/100.0f;
 8000f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f48:	f7ff ff42 	bl	8000dd0 <compensate_temp>
 8000f4c:	ee07 0a90 	vmov	s15, r0
 8000f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f54:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000fa4 <bme280_read+0x94>
 8000f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5c:	edc7 7a02 	vstr	s15, [r7, #8]
    data.humidity    = (float)compensate_humidity(adc_H)/1024.0f;
 8000f60:	6a38      	ldr	r0, [r7, #32]
 8000f62:	f7ff ff71 	bl	8000e48 <compensate_humidity>
 8000f66:	ee07 0a90 	vmov	s15, r0
 8000f6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f6e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000fa8 <bme280_read+0x98>
 8000f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f76:	edc7 7a03 	vstr	s15, [r7, #12]

    return data;
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f86:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	ee07 2a10 	vmov	s14, r2
 8000f92:	ee07 3a90 	vmov	s15, r3
}
 8000f96:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9a:	eef0 0a67 	vmov.f32	s1, s15
 8000f9e:	3728      	adds	r7, #40	@ 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	42c80000 	.word	0x42c80000
 8000fa8:	44800000 	.word	0x44800000

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <button_exti_init>:

#define GPIOAEN			(1U<<0)
#define SYSCFGEN		(1U<<14)


void button_exti_init(void){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <button_exti_init+0x84>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800106c <button_exti_init+0x84>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &=~ (3U<<(1*2));
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <button_exti_init+0x88>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <button_exti_init+0x88>)
 8000ffe:	f023 030c 	bic.w	r3, r3, #12
 8001002:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0U<<(1*2));
 8001004:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <button_exti_init+0x88>)
 8001006:	4a1a      	ldr	r2, [pc, #104]	@ (8001070 <button_exti_init+0x88>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR &= ~(3U << (1*2));
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <button_exti_init+0x88>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <button_exti_init+0x88>)
 8001012:	f023 030c 	bic.w	r3, r3, #12
 8001016:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (2U << (1*2));
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <button_exti_init+0x88>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <button_exti_init+0x88>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	60d3      	str	r3, [r2, #12]


	RCC->APB2ENR |= SYSCFGEN;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <button_exti_init+0x84>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001028:	4a10      	ldr	r2, [pc, #64]	@ (800106c <button_exti_init+0x84>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102e:	6453      	str	r3, [r2, #68]	@ 0x44
	EXTI->PR |= (1U<<1);
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <button_exti_init+0x8c>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <button_exti_init+0x8c>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[0] &=~ (0xF<<(1*4));
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <button_exti_init+0x90>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <button_exti_init+0x90>)
 8001042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001046:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= (1U<<1);
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <button_exti_init+0x8c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <button_exti_init+0x8c>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= (1U<<1);
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <button_exti_init+0x8c>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <button_exti_init+0x8c>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(EXTI1_IRQn);
 8001060:	2007      	movs	r0, #7
 8001062:	f7ff ffa3 	bl	8000fac <__NVIC_EnableIRQ>


}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	40013c00 	.word	0x40013c00
 8001078:	40013800 	.word	0x40013800

0800107c <tim2_debounce_init>:

void tim2_debounce_init(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1U << 0);
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <tim2_debounce_init+0x5c>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <tim2_debounce_init+0x5c>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6413      	str	r3, [r2, #64]	@ 0x40

    TIM2->PSC = 16000 - 1;
 800108c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001090:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28

    TIM2->ARR = 20;
 8001096:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800109a:	2214      	movs	r2, #20
 800109c:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->EGR |= (1U<<0);
 800109e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6153      	str	r3, [r2, #20]
    TIM2->SR &= ~(1U<<0);
 80010ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6113      	str	r3, [r2, #16]

    TIM2->DIER |= (1U << 0);
 80010be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(TIM2_IRQn);
 80010ce:	201c      	movs	r0, #28
 80010d0:	f7ff ff6c 	bl	8000fac <__NVIC_EnableIRQ>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800

080010dc <i2c1_init>:
#define SR2_BUSY      (1U<<1)

#define I2C_100KHZ    80
#define TRISE_STD     17

void i2c1_init(void) {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= GPIOBEN;
 80010e0:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <i2c1_init+0xa4>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	4a26      	ldr	r2, [pc, #152]	@ (8001180 <i2c1_init+0xa4>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOB->MODER &= ~((3U<<16) | (3U<<18));
 80010ec:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <i2c1_init+0xa8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a24      	ldr	r2, [pc, #144]	@ (8001184 <i2c1_init+0xa8>)
 80010f2:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80010f6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((2U<<16) | (2U<<18));
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <i2c1_init+0xa8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <i2c1_init+0xa8>)
 80010fe:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8001102:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] &= ~((0xF<<0) | (0xF<<4));
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <i2c1_init+0xa8>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	4a1e      	ldr	r2, [pc, #120]	@ (8001184 <i2c1_init+0xa8>)
 800110a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800110e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= ((4<<0) | (4<<4));
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <i2c1_init+0xa8>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <i2c1_init+0xa8>)
 8001116:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800111a:	6253      	str	r3, [r2, #36]	@ 0x24

    GPIOB->OTYPER |= (1U<<8) | (1U<<9);
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <i2c1_init+0xa8>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <i2c1_init+0xa8>)
 8001122:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001126:	6053      	str	r3, [r2, #4]

    GPIOB->PUPDR &= ~((3U<<16) | (3U<<18));
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <i2c1_init+0xa8>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4a15      	ldr	r2, [pc, #84]	@ (8001184 <i2c1_init+0xa8>)
 800112e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001132:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= ((1U<<16) | (1U<<18));
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <i2c1_init+0xa8>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <i2c1_init+0xa8>)
 800113a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800113e:	60d3      	str	r3, [r2, #12]

    RCC->APB1ENR |= I2C1EN;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <i2c1_init+0xa4>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <i2c1_init+0xa4>)
 8001146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800114a:	6413      	str	r3, [r2, #64]	@ 0x40

    I2C1->CR1 &= ~CR1_PE;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <i2c1_init+0xac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <i2c1_init+0xac>)
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 16;
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <i2c1_init+0xac>)
 800115a:	2210      	movs	r2, #16
 800115c:	605a      	str	r2, [r3, #4]
    I2C1->CCR = I2C_100KHZ;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <i2c1_init+0xac>)
 8001160:	2250      	movs	r2, #80	@ 0x50
 8001162:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = TRISE_STD;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <i2c1_init+0xac>)
 8001166:	2211      	movs	r2, #17
 8001168:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= CR1_PE;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <i2c1_init+0xac>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <i2c1_init+0xac>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400
 8001188:	40005400 	.word	0x40005400

0800118c <i2c1_write>:

int i2c1_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint8_t len) {
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	603a      	str	r2, [r7, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	460b      	mov	r3, r1
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]
    volatile int temp;
    int timeout;

    timeout = 100000;
 80011a2:	4b4f      	ldr	r3, [pc, #316]	@ (80012e0 <i2c1_write+0x154>)
 80011a4:	617b      	str	r3, [r7, #20]
    while((I2C1->SR2 & SR2_BUSY) && timeout--) {}
 80011a6:	bf00      	nop
 80011a8:	4b4e      	ldr	r3, [pc, #312]	@ (80012e4 <i2c1_write+0x158>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <i2c1_write+0x32>
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	617a      	str	r2, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f4      	bne.n	80011a8 <i2c1_write+0x1c>
    if(timeout == 0) return -1;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <i2c1_write+0x3e>
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	e083      	b.n	80012d2 <i2c1_write+0x146>

    I2C1->CR1 |= CR1_START;
 80011ca:	4b46      	ldr	r3, [pc, #280]	@ (80012e4 <i2c1_write+0x158>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a45      	ldr	r2, [pc, #276]	@ (80012e4 <i2c1_write+0x158>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d4:	6013      	str	r3, [r2, #0]
    timeout = 10000;
 80011d6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011da:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_SB) && timeout--) {}
 80011dc:	bf00      	nop
 80011de:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <i2c1_write+0x158>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d104      	bne.n	80011f4 <i2c1_write+0x68>
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	617a      	str	r2, [r7, #20]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f4      	bne.n	80011de <i2c1_write+0x52>
    if(timeout == 0) return -1;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <i2c1_write+0x74>
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e068      	b.n	80012d2 <i2c1_write+0x146>

    I2C1->DR = dev_addr<<1;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4a38      	ldr	r2, [pc, #224]	@ (80012e4 <i2c1_write+0x158>)
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	6113      	str	r3, [r2, #16]
    timeout = 10000;
 8001208:	f242 7310 	movw	r3, #10000	@ 0x2710
 800120c:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_ADDR) && timeout--) {}
 800120e:	bf00      	nop
 8001210:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <i2c1_write+0x158>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d104      	bne.n	8001226 <i2c1_write+0x9a>
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	1e5a      	subs	r2, r3, #1
 8001220:	617a      	str	r2, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f4      	bne.n	8001210 <i2c1_write+0x84>
    temp = I2C1->SR2;
 8001226:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <i2c1_write+0x158>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	60fb      	str	r3, [r7, #12]

    I2C1->DR = reg_addr;
 800122c:	4a2d      	ldr	r2, [pc, #180]	@ (80012e4 <i2c1_write+0x158>)
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	6113      	str	r3, [r2, #16]
    timeout = 10000;
 8001232:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001236:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_TXE) && timeout--) {}
 8001238:	bf00      	nop
 800123a:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <i2c1_write+0x158>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001242:	2b00      	cmp	r3, #0
 8001244:	d104      	bne.n	8001250 <i2c1_write+0xc4>
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	617a      	str	r2, [r7, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f4      	bne.n	800123a <i2c1_write+0xae>
    if(timeout == 0) return -1;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <i2c1_write+0xd0>
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e03a      	b.n	80012d2 <i2c1_write+0x146>

    for(uint8_t i=0; i<len; i++){
 800125c:	2300      	movs	r3, #0
 800125e:	74fb      	strb	r3, [r7, #19]
 8001260:	e01d      	b.n	800129e <i2c1_write+0x112>
        I2C1->DR = data[i];
 8001262:	7cfb      	ldrb	r3, [r7, #19]
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	4413      	add	r3, r2
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <i2c1_write+0x158>)
 800126c:	611a      	str	r2, [r3, #16]
        timeout = 10000;
 800126e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001272:	617b      	str	r3, [r7, #20]
        while(!(I2C1->SR1 & SR1_TXE) && timeout--) {}
 8001274:	bf00      	nop
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <i2c1_write+0x158>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127e:	2b00      	cmp	r3, #0
 8001280:	d104      	bne.n	800128c <i2c1_write+0x100>
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	617a      	str	r2, [r7, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f4      	bne.n	8001276 <i2c1_write+0xea>
        if(timeout == 0) return -1;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <i2c1_write+0x10c>
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e01c      	b.n	80012d2 <i2c1_write+0x146>
    for(uint8_t i=0; i<len; i++){
 8001298:	7cfb      	ldrb	r3, [r7, #19]
 800129a:	3301      	adds	r3, #1
 800129c:	74fb      	strb	r3, [r7, #19]
 800129e:	7cfa      	ldrb	r2, [r7, #19]
 80012a0:	797b      	ldrb	r3, [r7, #5]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d3dd      	bcc.n	8001262 <i2c1_write+0xd6>
    }

    timeout = 10000;
 80012a6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012aa:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_BTF) && timeout--) {}
 80012ac:	bf00      	nop
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <i2c1_write+0x158>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d104      	bne.n	80012c4 <i2c1_write+0x138>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f4      	bne.n	80012ae <i2c1_write+0x122>
    I2C1->CR1 |= CR1_STOP;
 80012c4:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <i2c1_write+0x158>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <i2c1_write+0x158>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ce:	6013      	str	r3, [r2, #0]

    return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	000186a0 	.word	0x000186a0
 80012e4:	40005400 	.word	0x40005400

080012e8 <i2c1_burstread>:

int i2c1_burstread(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint8_t len) {
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	603a      	str	r2, [r7, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	460b      	mov	r3, r1
 80012f8:	71bb      	strb	r3, [r7, #6]
 80012fa:	4613      	mov	r3, r2
 80012fc:	717b      	strb	r3, [r7, #5]
    volatile int temp;
    int timeout;

    timeout = 100000;
 80012fe:	4b6a      	ldr	r3, [pc, #424]	@ (80014a8 <i2c1_burstread+0x1c0>)
 8001300:	617b      	str	r3, [r7, #20]
    while((I2C1->SR2 & SR2_BUSY) && timeout--) {}
 8001302:	bf00      	nop
 8001304:	4b69      	ldr	r3, [pc, #420]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <i2c1_burstread+0x32>
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	617a      	str	r2, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f4      	bne.n	8001304 <i2c1_burstread+0x1c>
    if(timeout == 0) return -1;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <i2c1_burstread+0x3e>
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	e0b9      	b.n	800149a <i2c1_burstread+0x1b2>

    I2C1->CR1 |= CR1_START;
 8001326:	4b61      	ldr	r3, [pc, #388]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a60      	ldr	r2, [pc, #384]	@ (80014ac <i2c1_burstread+0x1c4>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001330:	6013      	str	r3, [r2, #0]
    timeout = 10000;
 8001332:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001336:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_SB) && timeout--) {}
 8001338:	bf00      	nop
 800133a:	4b5c      	ldr	r3, [pc, #368]	@ (80014ac <i2c1_burstread+0x1c4>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d104      	bne.n	8001350 <i2c1_burstread+0x68>
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	617a      	str	r2, [r7, #20]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f4      	bne.n	800133a <i2c1_burstread+0x52>
    if(timeout == 0) return -1;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <i2c1_burstread+0x74>
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e09e      	b.n	800149a <i2c1_burstread+0x1b2>

    I2C1->DR = dev_addr<<1;
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a53      	ldr	r2, [pc, #332]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	6113      	str	r3, [r2, #16]
    timeout = 10000;
 8001364:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001368:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_ADDR) && timeout--) {}
 800136a:	bf00      	nop
 800136c:	4b4f      	ldr	r3, [pc, #316]	@ (80014ac <i2c1_burstread+0x1c4>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d104      	bne.n	8001382 <i2c1_burstread+0x9a>
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	1e5a      	subs	r2, r3, #1
 800137c:	617a      	str	r2, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f4      	bne.n	800136c <i2c1_burstread+0x84>
    temp = I2C1->SR2;
 8001382:	4b4a      	ldr	r3, [pc, #296]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	60fb      	str	r3, [r7, #12]

    I2C1->DR = reg_addr;
 8001388:	4a48      	ldr	r2, [pc, #288]	@ (80014ac <i2c1_burstread+0x1c4>)
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	6113      	str	r3, [r2, #16]
    timeout = 10000;
 800138e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001392:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_TXE) && timeout--) {}
 8001394:	bf00      	nop
 8001396:	4b45      	ldr	r3, [pc, #276]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d104      	bne.n	80013ac <i2c1_burstread+0xc4>
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	617a      	str	r2, [r7, #20]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f4      	bne.n	8001396 <i2c1_burstread+0xae>
    if(timeout == 0) return -1;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <i2c1_burstread+0xd0>
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e070      	b.n	800149a <i2c1_burstread+0x1b2>

    I2C1->CR1 |= CR1_START;
 80013b8:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <i2c1_burstread+0x1c4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a3b      	ldr	r2, [pc, #236]	@ (80014ac <i2c1_burstread+0x1c4>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c2:	6013      	str	r3, [r2, #0]
    timeout = 10000;
 80013c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80013c8:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_SB) && timeout--) {}
 80013ca:	bf00      	nop
 80013cc:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <i2c1_burstread+0x1c4>)
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d104      	bne.n	80013e2 <i2c1_burstread+0xfa>
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	617a      	str	r2, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f4      	bne.n	80013cc <i2c1_burstread+0xe4>
    if(timeout == 0) return -1;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <i2c1_burstread+0x106>
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	e055      	b.n	800149a <i2c1_burstread+0x1b2>

    I2C1->DR = (dev_addr<<1)|1;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <i2c1_burstread+0x1c4>)
 80013f8:	611a      	str	r2, [r3, #16]
    timeout = 10000;
 80013fa:	f242 7310 	movw	r3, #10000	@ 0x2710
 80013fe:	617b      	str	r3, [r7, #20]
    while(!(I2C1->SR1 & SR1_ADDR) && timeout--) {}
 8001400:	bf00      	nop
 8001402:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d104      	bne.n	8001418 <i2c1_burstread+0x130>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	1e5a      	subs	r2, r3, #1
 8001412:	617a      	str	r2, [r7, #20]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f4      	bne.n	8001402 <i2c1_burstread+0x11a>
    temp = I2C1->SR2;
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <i2c1_burstread+0x1c4>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	60fb      	str	r3, [r7, #12]

    for(uint8_t i=0; i<len; i++){
 800141e:	2300      	movs	r3, #0
 8001420:	74fb      	strb	r3, [r7, #19]
 8001422:	e02f      	b.n	8001484 <i2c1_burstread+0x19c>
        if(i == len-1){
 8001424:	7cfa      	ldrb	r2, [r7, #19]
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	3b01      	subs	r3, #1
 800142a:	429a      	cmp	r2, r3
 800142c:	d10b      	bne.n	8001446 <i2c1_burstread+0x15e>
            I2C1->CR1 &= ~CR1_ACK;
 800142e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a1e      	ldr	r2, [pc, #120]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001438:	6013      	str	r3, [r2, #0]
            I2C1->CR1 |= CR1_STOP;
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <i2c1_burstread+0x1c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1b      	ldr	r2, [pc, #108]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001444:	6013      	str	r3, [r2, #0]
        }
        timeout = 10000;
 8001446:	f242 7310 	movw	r3, #10000	@ 0x2710
 800144a:	617b      	str	r3, [r7, #20]
        while(!(I2C1->SR1 & SR1_RXNE) && timeout--) {}
 800144c:	bf00      	nop
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001456:	2b00      	cmp	r3, #0
 8001458:	d104      	bne.n	8001464 <i2c1_burstread+0x17c>
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	1e5a      	subs	r2, r3, #1
 800145e:	617a      	str	r2, [r7, #20]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f4      	bne.n	800144e <i2c1_burstread+0x166>
        if(timeout == 0) return -1;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <i2c1_burstread+0x188>
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e014      	b.n	800149a <i2c1_burstread+0x1b2>
        data[i] = I2C1->DR;
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001472:	6919      	ldr	r1, [r3, #16]
 8001474:	7cfb      	ldrb	r3, [r7, #19]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
    for(uint8_t i=0; i<len; i++){
 800147e:	7cfb      	ldrb	r3, [r7, #19]
 8001480:	3301      	adds	r3, #1
 8001482:	74fb      	strb	r3, [r7, #19]
 8001484:	7cfa      	ldrb	r2, [r7, #19]
 8001486:	797b      	ldrb	r3, [r7, #5]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3cb      	bcc.n	8001424 <i2c1_burstread+0x13c>
    }
    I2C1->CR1 |= CR1_ACK;
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <i2c1_burstread+0x1c4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <i2c1_burstread+0x1c4>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001496:	6013      	str	r3, [r2, #0]

    return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	000186a0 	.word	0x000186a0
 80014ac:	40005400 	.word	0x40005400

080014b0 <__NVIC_EnableIRQ>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	@ (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	@ (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	@ (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <update_rgb_color>:
void update_rgb_color(float temp, float threshold);

// --------------------------- Functions -------------------------------

// RGB LED update logic (common anode)
void update_rgb_color(float temp, float threshold) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	ed87 0a01 	vstr	s0, [r7, #4]
 800154a:	edc7 0a00 	vstr	s1, [r7]
    if (current_mode == live_streaming) {
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <update_rgb_color+0x74>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d128      	bne.n	80015aa <update_rgb_color+0x6a>
        if (temp < 18.0f)
 8001558:	edd7 7a01 	vldr	s15, [r7, #4]
 800155c:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8001560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	d507      	bpl.n	800157a <update_rgb_color+0x3a>
            set_rgb(1000, 1000, 0);   // Blue
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001570:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001574:	f000 fb9e 	bl	8001cb4 <set_rgb>
        else
            set_rgb(0, 1000, 1000);   // Red
    } else {
        // Freeze LED color during threshold adjustment
    }
}
 8001578:	e017      	b.n	80015aa <update_rgb_color+0x6a>
        else if (temp <= threshold)
 800157a:	ed97 7a01 	vldr	s14, [r7, #4]
 800157e:	edd7 7a00 	vldr	s15, [r7]
 8001582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	d807      	bhi.n	800159c <update_rgb_color+0x5c>
            set_rgb(1000, 0, 1000);   // Green
 800158c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001590:	2100      	movs	r1, #0
 8001592:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001596:	f000 fb8d 	bl	8001cb4 <set_rgb>
}
 800159a:	e006      	b.n	80015aa <update_rgb_color+0x6a>
            set_rgb(0, 1000, 1000);   // Red
 800159c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 fb85 	bl	8001cb4 <set_rgb>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000218 	.word	0x20000218

080015b8 <vTaskLiveStreaming>:

// --------------------------- RTOS Tasks -------------------------------

// Task: Read sensor data or adjust threshold
void vTaskLiveStreaming(void *pvParameters) {
 80015b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015bc:	b08c      	sub	sp, #48	@ 0x30
 80015be:	af04      	add	r7, sp, #16
 80015c0:	6078      	str	r0, [r7, #4]
    RGBData rgbData;

    while (1) {
        if (current_mode == live_streaming) {
 80015c2:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <vTaskLiveStreaming+0xe0>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d13a      	bne.n	8001642 <vTaskLiveStreaming+0x8a>
            SensorData d = bme280_read();
 80015cc:	f7ff fca0 	bl	8000f10 <bme280_read>
 80015d0:	eeb0 7a40 	vmov.f32	s14, s0
 80015d4:	eef0 7a60 	vmov.f32	s15, s1
 80015d8:	ed87 7a03 	vstr	s14, [r7, #12]
 80015dc:	edc7 7a04 	vstr	s15, [r7, #16]
            current_temp = d.temperature;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a2e      	ldr	r2, [pc, #184]	@ (800169c <vTaskLiveStreaming+0xe4>)
 80015e4:	6013      	str	r3, [r2, #0]

            rgbData.measuredTemp = d.temperature;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	617b      	str	r3, [r7, #20]
            rgbData.setThreshold = tempThreshold;
 80015ea:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <vTaskLiveStreaming+0xe8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	61bb      	str	r3, [r7, #24]

            // Send temperature + threshold info to RGB task
            xQueueSend(xRGBQueue, &rgbData, 0);
 80015f0:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <vTaskLiveStreaming+0xec>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f107 0114 	add.w	r1, r7, #20
 80015f8:	2300      	movs	r3, #0
 80015fa:	2200      	movs	r2, #0
 80015fc:	f000 fe6c 	bl	80022d8 <xQueueGenericSend>

            printf("Temp = %.2f C, Hum = %.2f %%, Threshold = %.2f°C\r\n",
                   d.temperature, d.humidity, tempThreshold);
 8001600:	68fb      	ldr	r3, [r7, #12]
            printf("Temp = %.2f C, Hum = %.2f %%, Threshold = %.2f°C\r\n",
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffa8 	bl	8000558 <__aeabi_f2d>
 8001608:	4680      	mov	r8, r0
 800160a:	4689      	mov	r9, r1
                   d.temperature, d.humidity, tempThreshold);
 800160c:	693b      	ldr	r3, [r7, #16]
            printf("Temp = %.2f C, Hum = %.2f %%, Threshold = %.2f°C\r\n",
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <vTaskLiveStreaming+0xe8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff9b 	bl	8000558 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800162a:	e9cd 4500 	strd	r4, r5, [sp]
 800162e:	4642      	mov	r2, r8
 8001630:	464b      	mov	r3, r9
 8001632:	481d      	ldr	r0, [pc, #116]	@ (80016a8 <vTaskLiveStreaming+0xf0>)
 8001634:	f004 f8b8 	bl	80057a8 <iprintf>

            vTaskDelay(pdMS_TO_TICKS(1000));
 8001638:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800163c:	f001 fd9a 	bl	8003174 <vTaskDelay>
 8001640:	e7bf      	b.n	80015c2 <vTaskLiveStreaming+0xa>
        }
        else if (current_mode == threshold_adjust) {
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <vTaskLiveStreaming+0xe0>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d1ba      	bne.n	80015c2 <vTaskLiveStreaming+0xa>
            uint32_t adc_val = adc1_read();
 800164c:	f7ff fb04 	bl	8000c58 <adc1_read>
 8001650:	61f8      	str	r0, [r7, #28]
            tempThreshold = 25.0f + ((float)adc_val / 4095.0f) * 20.0f;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80016ac <vTaskLiveStreaming+0xf4>
 8001660:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001664:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <vTaskLiveStreaming+0xe8>)
 8001676:	edc3 7a00 	vstr	s15, [r3]

            printf("Adjusting threshold: %.2f°C\r\n", tempThreshold);
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <vTaskLiveStreaming+0xe8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff6a 	bl	8000558 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <vTaskLiveStreaming+0xf8>)
 800168a:	f004 f88d 	bl	80057a8 <iprintf>

            vTaskDelay(pdMS_TO_TICKS(500));
 800168e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001692:	f001 fd6f 	bl	8003174 <vTaskDelay>
        if (current_mode == live_streaming) {
 8001696:	e794      	b.n	80015c2 <vTaskLiveStreaming+0xa>
 8001698:	20000218 	.word	0x20000218
 800169c:	20000004 	.word	0x20000004
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000214 	.word	0x20000214
 80016a8:	08007778 	.word	0x08007778
 80016ac:	457ff000 	.word	0x457ff000
 80016b0:	080077ac 	.word	0x080077ac

080016b4 <vTaskRGBLed>:
        }
    }
}

// Task: Update LED based on latest temperature data from queue
void vTaskRGBLed(void *pvParameters) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    RGBData rgbData;

    while (1) {
        if (xQueueReceive(xRGBQueue, &rgbData, portMAX_DELAY) == pdTRUE) {
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <vTaskRGBLed+0x38>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f107 0108 	add.w	r1, r7, #8
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 f835 	bl	8002738 <xQueueReceive>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1f3      	bne.n	80016bc <vTaskRGBLed+0x8>
            update_rgb_color(rgbData.measuredTemp, rgbData.setThreshold);
 80016d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80016dc:	eef0 0a47 	vmov.f32	s1, s14
 80016e0:	eeb0 0a67 	vmov.f32	s0, s15
 80016e4:	f7ff ff2c 	bl	8001540 <update_rgb_color>
        if (xQueueReceive(xRGBQueue, &rgbData, portMAX_DELAY) == pdTRUE) {
 80016e8:	e7e8      	b.n	80016bc <vTaskRGBLed+0x8>
 80016ea:	bf00      	nop
 80016ec:	20000214 	.word	0x20000214

080016f0 <vTaskModeManager>:
        }
    }
}

// Task: Handle mode switching via button press
void vTaskModeManager(void *pvParameters) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    while (1) {
        if (xSemaphoreTake(xButtonSemaphore, portMAX_DELAY) == pdTRUE) {
 80016f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <vTaskModeManager+0x44>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f8fb 	bl	80028fc <xQueueSemaphoreTake>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d1f5      	bne.n	80016f8 <vTaskModeManager+0x8>
            if (current_mode == live_streaming) {
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <vTaskModeManager+0x48>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <vTaskModeManager+0x34>
                current_mode = threshold_adjust;
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <vTaskModeManager+0x48>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
                printf("Mode switched: THRESHOLD_ADJUST\r\n");
 800171c:	4807      	ldr	r0, [pc, #28]	@ (800173c <vTaskModeManager+0x4c>)
 800171e:	f004 f8ab 	bl	8005878 <puts>
 8001722:	e7e9      	b.n	80016f8 <vTaskModeManager+0x8>
            } else {
                current_mode = live_streaming;
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <vTaskModeManager+0x48>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
                printf("Mode switched: LIVE_STREAMING\r\n");
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <vTaskModeManager+0x50>)
 800172c:	f004 f8a4 	bl	8005878 <puts>
        if (xSemaphoreTake(xButtonSemaphore, portMAX_DELAY) == pdTRUE) {
 8001730:	e7e2      	b.n	80016f8 <vTaskModeManager+0x8>
 8001732:	bf00      	nop
 8001734:	20000210 	.word	0x20000210
 8001738:	20000218 	.word	0x20000218
 800173c:	080077cc 	.word	0x080077cc
 8001740:	080077f0 	.word	0x080077f0

08001744 <main>:
    }
}

// --------------------------- Main Function ----------------------------

int main(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af02      	add	r7, sp, #8
    uart_tx_init();
 800174a:	f000 fadb 	bl	8001d04 <uart_tx_init>
    i2c1_init();
 800174e:	f7ff fcc5 	bl	80010dc <i2c1_init>
    bme280_init();
 8001752:	f7ff fb09 	bl	8000d68 <bme280_init>
    adc1_init();
 8001756:	f7ff fa2f 	bl	8000bb8 <adc1_init>
    button_exti_init();
 800175a:	f7ff fc45 	bl	8000fe8 <button_exti_init>
    tim2_debounce_init();
 800175e:	f7ff fc8d 	bl	800107c <tim2_debounce_init>
    timer_init();
 8001762:	f000 f9dd 	bl	8001b20 <timer_init>

    printf("System Initialized\r\n");
 8001766:	4829      	ldr	r0, [pc, #164]	@ (800180c <main+0xc8>)
 8001768:	f004 f886 	bl	8005878 <puts>

    // Create RTOS synchronization primitives
    xButtonSemaphore = xSemaphoreCreateBinary();
 800176c:	2203      	movs	r2, #3
 800176e:	2100      	movs	r1, #0
 8001770:	2001      	movs	r0, #1
 8001772:	f000 fd52 	bl	800221a <xQueueGenericCreate>
 8001776:	4603      	mov	r3, r0
 8001778:	4a25      	ldr	r2, [pc, #148]	@ (8001810 <main+0xcc>)
 800177a:	6013      	str	r3, [r2, #0]
    xRGBQueue = xQueueCreate(5, sizeof(RGBData));
 800177c:	2200      	movs	r2, #0
 800177e:	2108      	movs	r1, #8
 8001780:	2005      	movs	r0, #5
 8001782:	f000 fd4a 	bl	800221a <xQueueGenericCreate>
 8001786:	4603      	mov	r3, r0
 8001788:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <main+0xd0>)
 800178a:	6013      	str	r3, [r2, #0]

    if (xButtonSemaphore == NULL || xRGBQueue == NULL) {
 800178c:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <main+0xcc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <main+0x58>
 8001794:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <main+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d104      	bne.n	80017a6 <main+0x62>
        printf("Failed to create semaphore or queue!\r\n");
 800179c:	481e      	ldr	r0, [pc, #120]	@ (8001818 <main+0xd4>)
 800179e:	f004 f86b 	bl	8005878 <puts>
        while (1);
 80017a2:	bf00      	nop
 80017a4:	e7fd      	b.n	80017a2 <main+0x5e>
    }

    // Create RTOS tasks
    xTaskCreate(vTaskLiveStreaming, "LiveStream", 512, NULL, 2, NULL);
 80017a6:	2300      	movs	r3, #0
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	2302      	movs	r3, #2
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2300      	movs	r3, #0
 80017b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b4:	4919      	ldr	r1, [pc, #100]	@ (800181c <main+0xd8>)
 80017b6:	481a      	ldr	r0, [pc, #104]	@ (8001820 <main+0xdc>)
 80017b8:	f001 fb96 	bl	8002ee8 <xTaskCreate>
    xTaskCreate(vTaskRGBLed, "RGBControl", 256, NULL, 1, NULL);
 80017bc:	2300      	movs	r3, #0
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ca:	4916      	ldr	r1, [pc, #88]	@ (8001824 <main+0xe0>)
 80017cc:	4816      	ldr	r0, [pc, #88]	@ (8001828 <main+0xe4>)
 80017ce:	f001 fb8b 	bl	8002ee8 <xTaskCreate>
    xTaskCreate(vTaskModeManager, "ModeManager", 256, NULL, 3, NULL);
 80017d2:	2300      	movs	r3, #0
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	2303      	movs	r3, #3
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e0:	4912      	ldr	r1, [pc, #72]	@ (800182c <main+0xe8>)
 80017e2:	4813      	ldr	r0, [pc, #76]	@ (8001830 <main+0xec>)
 80017e4:	f001 fb80 	bl	8002ee8 <xTaskCreate>

    // Configure NVIC priorities for interrupts
    NVIC_SetPriority(EXTI1_IRQn, 5);
 80017e8:	2105      	movs	r1, #5
 80017ea:	2007      	movs	r0, #7
 80017ec:	f7ff fe7e 	bl	80014ec <__NVIC_SetPriority>
    NVIC_SetPriority(TIM2_IRQn, 5);
 80017f0:	2105      	movs	r1, #5
 80017f2:	201c      	movs	r0, #28
 80017f4:	f7ff fe7a 	bl	80014ec <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI1_IRQn);
 80017f8:	2007      	movs	r0, #7
 80017fa:	f7ff fe59 	bl	80014b0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(TIM2_IRQn);
 80017fe:	201c      	movs	r0, #28
 8001800:	f7ff fe56 	bl	80014b0 <__NVIC_EnableIRQ>

    // Start scheduler
    vTaskStartScheduler();
 8001804:	f001 fcec 	bl	80031e0 <vTaskStartScheduler>

    while (1);
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <main+0xc4>
 800180c:	08007810 	.word	0x08007810
 8001810:	20000210 	.word	0x20000210
 8001814:	20000214 	.word	0x20000214
 8001818:	08007824 	.word	0x08007824
 800181c:	0800784c 	.word	0x0800784c
 8001820:	080015b9 	.word	0x080015b9
 8001824:	08007858 	.word	0x08007858
 8001828:	080016b5 	.word	0x080016b5
 800182c:	08007864 	.word	0x08007864
 8001830:	080016f1 	.word	0x080016f1

08001834 <EXTI1_IRQHandler>:
}

// --------------------------- Interrupt Handlers ------------------------

void EXTI1_IRQHandler(void) {
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1U << 1)) {
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <EXTI1_IRQHandler+0x5c>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01f      	beq.n	8001884 <EXTI1_IRQHandler+0x50>
        EXTI->PR |= (1U << 1);
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <EXTI1_IRQHandler+0x5c>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <EXTI1_IRQHandler+0x5c>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	6153      	str	r3, [r2, #20]
        EXTI->IMR &= ~(1U << 1);
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <EXTI1_IRQHandler+0x5c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <EXTI1_IRQHandler+0x5c>)
 8001856:	f023 0302 	bic.w	r3, r3, #2
 800185a:	6013      	str	r3, [r2, #0]
        TIM2->SR &= ~(1U << 0);
 800185c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6113      	str	r3, [r2, #16]
        TIM2->CNT = 0;
 800186c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24
        TIM2->CR1 |= (1U << 0);
 8001874:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6013      	str	r3, [r2, #0]
    }
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40013c00 	.word	0x40013c00

08001894 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
    if (TIM2->SR & 1) {
 800189a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d02f      	beq.n	8001908 <TIM2_IRQHandler+0x74>
        TIM2->SR &= ~1;
 80018a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6113      	str	r3, [r2, #16]
        TIM2->CR1 &= ~(1U << 0);
 80018b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]

        if (GPIOA->IDR & (1U << 1)) {
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <TIM2_IRQHandler+0x7c>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <TIM2_IRQHandler+0x68>
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
            xSemaphoreGiveFromISR(xButtonSemaphore, &xHigherPriorityTaskWoken);
 80018d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <TIM2_IRQHandler+0x80>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1d3a      	adds	r2, r7, #4
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fe99 	bl	8002618 <xQueueGiveFromISR>
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <TIM2_IRQHandler+0x68>
 80018ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <TIM2_IRQHandler+0x84>)
 80018ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	f3bf 8f4f 	dsb	sy
 80018f8:	f3bf 8f6f 	isb	sy
        }

        EXTI->IMR |= (1U << 1);
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <TIM2_IRQHandler+0x88>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a06      	ldr	r2, [pc, #24]	@ (800191c <TIM2_IRQHandler+0x88>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	6013      	str	r3, [r2, #0]
    }
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40020000 	.word	0x40020000
 8001914:	20000210 	.word	0x20000210
 8001918:	e000ed04 	.word	0xe000ed04
 800191c:	40013c00 	.word	0x40013c00

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <NMI_Handler+0x4>

08001928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <MemManage_Handler+0x4>

08001938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <UsageFault_Handler+0x4>

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195a:	f000 fa7b 	bl	8001e54 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800195e:	f002 f88d 	bl	8003a7c <xTaskGetSchedulerState>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d001      	beq.n	800196c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001968:	f002 ff86 	bl	8004878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800198a:	f004 f8a7 	bl	8005adc <__errno>
 800198e:	4603      	mov	r3, r0
 8001990:	2216      	movs	r2, #22
 8001992:	601a      	str	r2, [r3, #0]
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_exit>:

void _exit (int status)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ffe7 	bl	8001980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019b2:	bf00      	nop
 80019b4:	e7fd      	b.n	80019b2 <_exit+0x12>

080019b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e00a      	b.n	80019de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c8:	f3af 8000 	nop.w
 80019cc:	4601      	mov	r1, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	60ba      	str	r2, [r7, #8]
 80019d4:	b2ca      	uxtb	r2, r1
 80019d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	dbf0      	blt.n	80019c8 <_read+0x12>
  }

  return len;
 80019e6:	687b      	ldr	r3, [r7, #4]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e009      	b.n	8001a16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	60ba      	str	r2, [r7, #8]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f96e 	bl	8001cec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dbf1      	blt.n	8001a02 <_write+0x12>
  }
  return len;
 8001a1e:	687b      	ldr	r3, [r7, #4]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_close>:

int _close(int file)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a50:	605a      	str	r2, [r3, #4]
  return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_isatty>:

int _isatty(int file)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	@ (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac0:	f004 f80c 	bl	8005adc <__errno>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e009      	b.n	8001ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <_sbrk+0x64>)
 8001ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20020000 	.word	0x20020000
 8001af0:	00000400 	.word	0x00000400
 8001af4:	2000021c 	.word	0x2000021c
 8001af8:	20004cc0 	.word	0x20004cc0

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <SystemInit+0x20>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b06:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <SystemInit+0x20>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <timer_init>:
#define TIM_CR1_EN					(1U<<0)
#define TIM2_CC2E  	 				(1U<<4)
#define TIM2_CC3E   				(1U<<8)
#define TIM3_CC1E  					(1U<<0)

void timer_init(void){
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOBEN;
 8001b24:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <timer_init+0x188>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca8 <timer_init+0x188>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER &=~ (3U<<6) | (3U<<8) | (3U<<20);
 8001b30:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <timer_init+0x18c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5d      	ldr	r2, [pc, #372]	@ (8001cac <timer_init+0x18c>)
 8001b36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001b3a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2U<<6) | (2U<<8) | (2U<<20);
 8001b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8001cac <timer_init+0x18c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5a      	ldr	r2, [pc, #360]	@ (8001cac <timer_init+0x18c>)
 8001b42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b46:	f443 7320 	orr.w	r3, r3, #640	@ 0x280
 8001b4a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &=~ (0xF<<12);
 8001b4c:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <timer_init+0x18c>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <timer_init+0x18c>)
 8001b52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001b56:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0x1<<12);
 8001b58:	4b54      	ldr	r3, [pc, #336]	@ (8001cac <timer_init+0x18c>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a53      	ldr	r2, [pc, #332]	@ (8001cac <timer_init+0x18c>)
 8001b5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b62:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &=~ (0xF<<16);
 8001b64:	4b51      	ldr	r3, [pc, #324]	@ (8001cac <timer_init+0x18c>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a50      	ldr	r2, [pc, #320]	@ (8001cac <timer_init+0x18c>)
 8001b6a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001b6e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=(0x2<<16);
 8001b70:	4b4e      	ldr	r3, [pc, #312]	@ (8001cac <timer_init+0x18c>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a4d      	ldr	r2, [pc, #308]	@ (8001cac <timer_init+0x18c>)
 8001b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b7a:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[1] &=~ (0xF<<8);
 8001b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001cac <timer_init+0x18c>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	4a4a      	ldr	r2, [pc, #296]	@ (8001cac <timer_init+0x18c>)
 8001b82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b86:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (0x1<<8);
 8001b88:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <timer_init+0x18c>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	4a47      	ldr	r2, [pc, #284]	@ (8001cac <timer_init+0x18c>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b92:	6253      	str	r3, [r2, #36]	@ 0x24

	RCC->APB1ENR |= TIM2EN;
 8001b94:	4b44      	ldr	r3, [pc, #272]	@ (8001ca8 <timer_init+0x188>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	4a43      	ldr	r2, [pc, #268]	@ (8001ca8 <timer_init+0x188>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= TIM3EN;
 8001ba0:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <timer_init+0x188>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	4a40      	ldr	r2, [pc, #256]	@ (8001ca8 <timer_init+0x188>)
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	6413      	str	r3, [r2, #64]	@ 0x40

	// TIM2 setup for CH2 (PB3), CH3 (PB10)
	TIM2->PSC = 84-1;
 8001bac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bb0:	2253      	movs	r2, #83	@ 0x53
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000-1;
 8001bb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	// CH2 PWM mode 1
	TIM2->CCMR1 |= (1U<<14);
 8001bbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bcc:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1U<<13);
 8001bce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bdc:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &=~ (1U<<12);
 8001bde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001be8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bec:	6193      	str	r3, [r2, #24]
	// CH3 PWM mode 1
	TIM2->CCMR2 |= (1U<<6);
 8001bee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bfc:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= (1U<<5);
 8001bfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c08:	f043 0320 	orr.w	r3, r3, #32
 8001c0c:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &=~ (1U<<4);
 8001c0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c18:	f023 0310 	bic.w	r3, r3, #16
 8001c1c:	61d3      	str	r3, [r2, #28]

	TIM2->CCER |= TIM2_CC2E | TIM2_CC3E;
 8001c1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c28:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 8001c2c:	6213      	str	r3, [r2, #32]
	TIM2->CCR2 = 0;
 8001c2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c32:	2200      	movs	r2, #0
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = 0;
 8001c36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CR1 |= TIM_CR1_EN;
 8001c3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6013      	str	r3, [r2, #0]

	// TIM3 setup for CH1 (PB4)
	TIM3->PSC = 84-1;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <timer_init+0x190>)
 8001c50:	2253      	movs	r2, #83	@ 0x53
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 1000-1;
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <timer_init+0x190>)
 8001c56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	// CH3 PWM mode 1
	TIM3->CCMR1 |= (1U<<6);
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <timer_init+0x190>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <timer_init+0x190>)
 8001c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c66:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (1U<<5);
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <timer_init+0x190>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a10      	ldr	r2, [pc, #64]	@ (8001cb0 <timer_init+0x190>)
 8001c6e:	f043 0320 	orr.w	r3, r3, #32
 8001c72:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 &=~ (1U<<4);
 8001c74:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <timer_init+0x190>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <timer_init+0x190>)
 8001c7a:	f023 0310 	bic.w	r3, r3, #16
 8001c7e:	6193      	str	r3, [r2, #24]

	TIM3->CCER |= TIM3_CC1E;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <timer_init+0x190>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <timer_init+0x190>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
	TIM3->CCR1 = 0;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <timer_init+0x190>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CR1 |= TIM_CR1_EN;
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <timer_init+0x190>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a06      	ldr	r2, [pc, #24]	@ (8001cb0 <timer_init+0x190>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6013      	str	r3, [r2, #0]

}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <set_rgb>:
void set_rgb(uint16_t red, uint16_t green, uint16_t blue){
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	80bb      	strh	r3, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	807b      	strh	r3, [r7, #2]
	TIM2->CCR2 = red;
 8001cc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3->CCR1 = green;
 8001cce:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <set_rgb+0x34>)
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2->CCR3 = blue;
 8001cd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	63d3      	str	r3, [r2, #60]	@ 0x3c

}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40000400 	.word	0x40000400

08001cec <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart_tx_init(void);
void uart2_write(int ch);

int __io_putchar(int ch){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f86b 	bl	8001dd0 <uart2_write>
	return ch;
 8001cfa:	687b      	ldr	r3, [r7, #4]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <uart_tx_init>:


void uart_tx_init(void){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	RCC->AHB1ENR  |=  GPIOAEN;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <uart_tx_init+0x70>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	4a19      	ldr	r2, [pc, #100]	@ (8001d74 <uart_tx_init+0x70>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER  &=~ (1U<<4);
 8001d14:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <uart_tx_init+0x74>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a17      	ldr	r2, [pc, #92]	@ (8001d78 <uart_tx_init+0x74>)
 8001d1a:	f023 0310 	bic.w	r3, r3, #16
 8001d1e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  (1U<<5);
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <uart_tx_init+0x74>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <uart_tx_init+0x74>)
 8001d26:	f043 0320 	orr.w	r3, r3, #32
 8001d2a:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &=~ (0xF<<8);
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <uart_tx_init+0x74>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <uart_tx_init+0x74>)
 8001d32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d36:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7<<8);
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <uart_tx_init+0x74>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d78 <uart_tx_init+0x74>)
 8001d3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d42:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR   |=  UART2EN;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <uart_tx_init+0x70>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <uart_tx_init+0x70>)
 8001d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4e:	6413      	str	r3, [r2, #64]	@ 0x40

	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8001d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d54:	4909      	ldr	r1, [pc, #36]	@ (8001d7c <uart_tx_init+0x78>)
 8001d56:	480a      	ldr	r0, [pc, #40]	@ (8001d80 <uart_tx_init+0x7c>)
 8001d58:	f000 f814 	bl	8001d84 <uart_set_baudrate>

	USART2->CR1  =  CR1_TE;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <uart_tx_init+0x7c>)
 8001d5e:	2208      	movs	r2, #8
 8001d60:	60da      	str	r2, [r3, #12]
	USART2->CR1 |=  CR1_UE;
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <uart_tx_init+0x7c>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4a06      	ldr	r2, [pc, #24]	@ (8001d80 <uart_tx_init+0x7c>)
 8001d68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d6c:	60d3      	str	r3, [r2, #12]

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	40004400 	.word	0x40004400

08001d84 <uart_set_baudrate>:



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,uint32_t BaudRate){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_bd(PeriphClk, BaudRate);
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	68b8      	ldr	r0, [r7, #8]
 8001d94:	f000 f808 	bl	8001da8 <compute_uart_bd>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	609a      	str	r2, [r3, #8]
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	085a      	lsrs	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	441a      	add	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	b29b      	uxth	r3, r3
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <uart2_write>:


void uart2_write(int ch){
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE)){}
 8001dd8:	bf00      	nop
 8001dda:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <uart2_write+0x2c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f9      	beq.n	8001dda <uart2_write+0xa>
	USART2->DR = (ch & 0xff);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a04      	ldr	r2, [pc, #16]	@ (8001dfc <uart2_write+0x2c>)
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	6053      	str	r3, [r2, #4]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40004400 	.word	0x40004400

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e04:	f7ff fe7a 	bl	8001afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e08:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e0a:	490d      	ldr	r1, [pc, #52]	@ (8001e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e20:	4c0a      	ldr	r4, [pc, #40]	@ (8001e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f003 fe5b 	bl	8005ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e32:	f7ff fc87 	bl	8001744 <main>
  bx  lr    
 8001e36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e44:	08007c0c 	.word	0x08007c0c
  ldr r2, =_sbss
 8001e48:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e4c:	20004cbc 	.word	0x20004cbc

08001e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC_IRQHandler>
	...

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	2000000c 	.word	0x2000000c
 8001e78:	20000220 	.word	0x20000220

08001e7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <vApplicationGetIdleTaskMemory+0x30>)
 8001e92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000224 	.word	0x20000224
 8001eac:	20000280 	.word	0x20000280

08001eb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <vApplicationGetTimerTaskMemory+0x2c>)
 8001ec0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4a06      	ldr	r2, [pc, #24]	@ (8001ee0 <vApplicationGetTimerTaskMemory+0x30>)
 8001ec6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20000480 	.word	0x20000480
 8001ee0:	200004dc 	.word	0x200004dc

08001ee4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f103 0208 	add.w	r2, r3, #8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f103 0208 	add.w	r2, r3, #8
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 0208 	add.w	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d103      	bne.n	8001fa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e00c      	b.n	8001fc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3308      	adds	r3, #8
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e002      	b.n	8001fb4 <vListInsert+0x2e>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d2f6      	bcs.n	8001fae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6892      	ldr	r2, [r2, #8]
 800200e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6852      	ldr	r2, [r2, #4]
 8002018:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	d103      	bne.n	800202c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002078:	f002 fb6e 	bl	8004758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	441a      	add	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a8:	3b01      	subs	r3, #1
 80020aa:	68f9      	ldr	r1, [r7, #12]
 80020ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	441a      	add	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	22ff      	movs	r2, #255	@ 0xff
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	22ff      	movs	r2, #255	@ 0xff
 80020c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d114      	bne.n	80020f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01a      	beq.n	800210c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3310      	adds	r3, #16
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 fb0e 	bl	80036fc <xTaskRemoveFromEventList>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020e6:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <xQueueGenericReset+0xd0>)
 80020e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	e009      	b.n	800210c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3310      	adds	r3, #16
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fef1 	bl	8001ee4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3324      	adds	r3, #36	@ 0x24
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff feec 	bl	8001ee4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800210c:	f002 fb56 	bl	80047bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000ed04 	.word	0xe000ed04

08002120 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	@ 0x38
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10b      	bne.n	800216a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	e7fd      	b.n	8002166 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <xQueueGenericCreateStatic+0x56>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <xQueueGenericCreateStatic+0x5a>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <xQueueGenericCreateStatic+0x5c>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10b      	bne.n	8002198 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	623b      	str	r3, [r7, #32]
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <xQueueGenericCreateStatic+0x84>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <xQueueGenericCreateStatic+0x88>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <xQueueGenericCreateStatic+0x8a>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10b      	bne.n	80021c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80021ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b2:	f383 8811 	msr	BASEPRI, r3
 80021b6:	f3bf 8f6f 	isb	sy
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	61fb      	str	r3, [r7, #28]
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	e7fd      	b.n	80021c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021c6:	2350      	movs	r3, #80	@ 0x50
 80021c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b50      	cmp	r3, #80	@ 0x50
 80021ce:	d00b      	beq.n	80021e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	61bb      	str	r3, [r7, #24]
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80021e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80021ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f840 	bl	8002290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002212:	4618      	mov	r0, r3
 8002214:	3730      	adds	r7, #48	@ 0x30
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800221a:	b580      	push	{r7, lr}
 800221c:	b08a      	sub	sp, #40	@ 0x28
 800221e:	af02      	add	r7, sp, #8
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	4613      	mov	r3, r2
 8002226:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10b      	bne.n	8002246 <xQueueGenericCreate+0x2c>
	__asm volatile
 800222e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	613b      	str	r3, [r7, #16]
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	e7fd      	b.n	8002242 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3350      	adds	r3, #80	@ 0x50
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fba1 	bl	800499c <pvPortMalloc>
 800225a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d011      	beq.n	8002286 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3350      	adds	r3, #80	@ 0x50
 800226a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002274:	79fa      	ldrb	r2, [r7, #7]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f805 	bl	8002290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002286:	69bb      	ldr	r3, [r7, #24]
	}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e002      	b.n	80022b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022be:	2101      	movs	r1, #1
 80022c0:	69b8      	ldr	r0, [r7, #24]
 80022c2:	f7ff fec3 	bl	800204c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08e      	sub	sp, #56	@ 0x38
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022e6:	2300      	movs	r3, #0
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80022ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <xQueueGenericSend+0x34>
	__asm volatile
 80022f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <xQueueGenericSend+0x42>
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <xQueueGenericSend+0x46>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <xQueueGenericSend+0x48>
 800231e:	2300      	movs	r3, #0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <xQueueGenericSend+0x64>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d103      	bne.n	800234a <xQueueGenericSend+0x72>
 8002342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <xQueueGenericSend+0x76>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <xQueueGenericSend+0x78>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <xQueueGenericSend+0x94>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	623b      	str	r3, [r7, #32]
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800236c:	f001 fb86 	bl	8003a7c <xTaskGetSchedulerState>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <xQueueGenericSend+0xa4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <xQueueGenericSend+0xa8>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <xQueueGenericSend+0xaa>
 8002380:	2300      	movs	r3, #0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <xQueueGenericSend+0xc6>
	__asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	61fb      	str	r3, [r7, #28]
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	e7fd      	b.n	800239a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800239e:	f002 f9db 	bl	8004758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <xQueueGenericSend+0xdc>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d129      	bne.n	8002408 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023ba:	f000 fbc7 	bl	8002b4c <prvCopyDataToQueue>
 80023be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d010      	beq.n	80023ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ca:	3324      	adds	r3, #36	@ 0x24
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 f995 	bl	80036fc <xTaskRemoveFromEventList>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80023d8:	4b3f      	ldr	r3, [pc, #252]	@ (80024d8 <xQueueGenericSend+0x200>)
 80023da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	e00a      	b.n	8002400 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80023f0:	4b39      	ldr	r3, [pc, #228]	@ (80024d8 <xQueueGenericSend+0x200>)
 80023f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002400:	f002 f9dc 	bl	80047bc <vPortExitCritical>
				return pdPASS;
 8002404:	2301      	movs	r3, #1
 8002406:	e063      	b.n	80024d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800240e:	f002 f9d5 	bl	80047bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002412:	2300      	movs	r3, #0
 8002414:	e05c      	b.n	80024d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4618      	mov	r0, r3
 8002422:	f001 f9cf 	bl	80037c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002426:	2301      	movs	r3, #1
 8002428:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800242a:	f002 f9c7 	bl	80047bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800242e:	f000 ff3f 	bl	80032b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002432:	f002 f991 	bl	8004758 <vPortEnterCritical>
 8002436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800243c:	b25b      	sxtb	r3, r3
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002442:	d103      	bne.n	800244c <xQueueGenericSend+0x174>
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800244c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002452:	b25b      	sxtb	r3, r3
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d103      	bne.n	8002462 <xQueueGenericSend+0x18a>
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002462:	f002 f9ab 	bl	80047bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002466:	1d3a      	adds	r2, r7, #4
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f001 f9be 	bl	80037f0 <xTaskCheckForTimeOut>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d124      	bne.n	80024c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800247a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800247c:	f000 fc5e 	bl	8002d3c <prvIsQueueFull>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d018      	beq.n	80024b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002488:	3310      	adds	r3, #16
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f8e2 	bl	8003658 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002496:	f000 fbe9 	bl	8002c6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800249a:	f000 ff17 	bl	80032cc <xTaskResumeAll>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f47f af7c 	bne.w	800239e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80024a6:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <xQueueGenericSend+0x200>)
 80024a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	e772      	b.n	800239e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80024b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024ba:	f000 fbd7 	bl	8002c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024be:	f000 ff05 	bl	80032cc <xTaskResumeAll>
 80024c2:	e76c      	b.n	800239e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80024c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024c6:	f000 fbd1 	bl	8002c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024ca:	f000 feff 	bl	80032cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80024ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3738      	adds	r7, #56	@ 0x38
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	e000ed04 	.word	0xe000ed04

080024dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b090      	sub	sp, #64	@ 0x40
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80024ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <xQueueGenericSendFromISR+0x3e>
 8002512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <xQueueGenericSendFromISR+0x42>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <xQueueGenericSendFromISR+0x44>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d103      	bne.n	800254a <xQueueGenericSendFromISR+0x6e>
 8002542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <xQueueGenericSendFromISR+0x72>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <xQueueGenericSendFromISR+0x74>
 800254e:	2300      	movs	r3, #0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10b      	bne.n	800256c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	623b      	str	r3, [r7, #32]
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800256c:	f002 f9d4 	bl	8004918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002570:	f3ef 8211 	mrs	r2, BASEPRI
 8002574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	61fa      	str	r2, [r7, #28]
 8002586:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002588:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800258c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	429a      	cmp	r2, r3
 8002596:	d302      	bcc.n	800259e <xQueueGenericSendFromISR+0xc2>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d12f      	bne.n	80025fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800259e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025b4:	f000 faca 	bl	8002b4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80025b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d112      	bne.n	80025e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025cc:	3324      	adds	r3, #36	@ 0x24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 f894 	bl	80036fc <xTaskRemoveFromEventList>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00e      	beq.n	80025f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e007      	b.n	80025f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025ec:	3301      	adds	r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	b25a      	sxtb	r2, r3
 80025f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80025f8:	2301      	movs	r3, #1
 80025fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80025fc:	e001      	b.n	8002602 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002604:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800260c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800260e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002610:	4618      	mov	r0, r3
 8002612:	3740      	adds	r7, #64	@ 0x40
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	@ 0x38
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	623b      	str	r3, [r7, #32]
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	61fb      	str	r3, [r7, #28]
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <xQueueGiveFromISR+0x5c>
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <xQueueGiveFromISR+0x60>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <xQueueGiveFromISR+0x62>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10b      	bne.n	8002696 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800267e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002682:	f383 8811 	msr	BASEPRI, r3
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	61bb      	str	r3, [r7, #24]
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	e7fd      	b.n	8002692 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002696:	f002 f93f 	bl	8004918 <vPortValidateInterruptPriority>
	__asm volatile
 800269a:	f3ef 8211 	mrs	r2, BASEPRI
 800269e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	617a      	str	r2, [r7, #20]
 80026b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80026b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d22b      	bcs.n	800271e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d112      	bne.n	8002708 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ec:	3324      	adds	r3, #36	@ 0x24
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f804 	bl	80036fc <xTaskRemoveFromEventList>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00e      	beq.n	8002718 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e007      	b.n	8002718 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800270c:	3301      	adds	r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	b25a      	sxtb	r2, r3
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002718:	2301      	movs	r3, #1
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
 800271c:	e001      	b.n	8002722 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800271e:	2300      	movs	r3, #0
 8002720:	637b      	str	r3, [r7, #52]	@ 0x34
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f383 8811 	msr	BASEPRI, r3
}
 800272c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800272e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002730:	4618      	mov	r0, r3
 8002732:	3738      	adds	r7, #56	@ 0x38
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08c      	sub	sp, #48	@ 0x30
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800274c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <xQueueReceive+0x32>
	__asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	623b      	str	r3, [r7, #32]
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d103      	bne.n	8002778 <xQueueReceive+0x40>
 8002770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <xQueueReceive+0x44>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <xQueueReceive+0x46>
 800277c:	2300      	movs	r3, #0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10b      	bne.n	800279a <xQueueReceive+0x62>
	__asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	61fb      	str	r3, [r7, #28]
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	e7fd      	b.n	8002796 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800279a:	f001 f96f 	bl	8003a7c <xTaskGetSchedulerState>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <xQueueReceive+0x72>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <xQueueReceive+0x76>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <xQueueReceive+0x78>
 80027ae:	2300      	movs	r3, #0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <xQueueReceive+0x94>
	__asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	61bb      	str	r3, [r7, #24]
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027cc:	f001 ffc4 	bl	8004758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01f      	beq.n	800281c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027e0:	f000 fa1e 	bl	8002c20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	1e5a      	subs	r2, r3, #1
 80027e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00f      	beq.n	8002814 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	3310      	adds	r3, #16
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 ff7f 	bl	80036fc <xTaskRemoveFromEventList>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002804:	4b3c      	ldr	r3, [pc, #240]	@ (80028f8 <xQueueReceive+0x1c0>)
 8002806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002814:	f001 ffd2 	bl	80047bc <vPortExitCritical>
				return pdPASS;
 8002818:	2301      	movs	r3, #1
 800281a:	e069      	b.n	80028f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002822:	f001 ffcb 	bl	80047bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002826:	2300      	movs	r3, #0
 8002828:	e062      	b.n	80028f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4618      	mov	r0, r3
 8002836:	f000 ffc5 	bl	80037c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800283a:	2301      	movs	r3, #1
 800283c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800283e:	f001 ffbd 	bl	80047bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002842:	f000 fd35 	bl	80032b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002846:	f001 ff87 	bl	8004758 <vPortEnterCritical>
 800284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002850:	b25b      	sxtb	r3, r3
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d103      	bne.n	8002860 <xQueueReceive+0x128>
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002866:	b25b      	sxtb	r3, r3
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d103      	bne.n	8002876 <xQueueReceive+0x13e>
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002876:	f001 ffa1 	bl	80047bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f000 ffb4 	bl	80037f0 <xTaskCheckForTimeOut>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d123      	bne.n	80028d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800288e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002890:	f000 fa3e 	bl	8002d10 <prvIsQueueEmpty>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d017      	beq.n	80028ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800289a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289c:	3324      	adds	r3, #36	@ 0x24
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fed8 	bl	8003658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028aa:	f000 f9df 	bl	8002c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028ae:	f000 fd0d 	bl	80032cc <xTaskResumeAll>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d189      	bne.n	80027cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <xQueueReceive+0x1c0>)
 80028ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	e780      	b.n	80027cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028cc:	f000 f9ce 	bl	8002c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028d0:	f000 fcfc 	bl	80032cc <xTaskResumeAll>
 80028d4:	e77a      	b.n	80027cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028d8:	f000 f9c8 	bl	8002c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028dc:	f000 fcf6 	bl	80032cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028e2:	f000 fa15 	bl	8002d10 <prvIsQueueEmpty>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f43f af6f 	beq.w	80027cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3730      	adds	r7, #48	@ 0x30
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	e000ed04 	.word	0xe000ed04

080028fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08e      	sub	sp, #56	@ 0x38
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800290e:	2300      	movs	r3, #0
 8002910:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	623b      	str	r3, [r7, #32]
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	61fb      	str	r3, [r7, #28]
}
 800294a:	bf00      	nop
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002950:	f001 f894 	bl	8003a7c <xTaskGetSchedulerState>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <xQueueSemaphoreTake+0x64>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <xQueueSemaphoreTake+0x68>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <xQueueSemaphoreTake+0x6a>
 8002964:	2300      	movs	r3, #0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800296a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	61bb      	str	r3, [r7, #24]
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	e7fd      	b.n	800297e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002982:	f001 fee9 	bl	8004758 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002998:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800299a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d104      	bne.n	80029ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80029a2:	f001 f9e5 	bl	8003d70 <pvTaskIncrementMutexHeldCount>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00f      	beq.n	80029d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b6:	3310      	adds	r3, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fe9f 	bl	80036fc <xTaskRemoveFromEventList>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029c4:	4b54      	ldr	r3, [pc, #336]	@ (8002b18 <xQueueSemaphoreTake+0x21c>)
 80029c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029d4:	f001 fef2 	bl	80047bc <vPortExitCritical>
				return pdPASS;
 80029d8:	2301      	movs	r3, #1
 80029da:	e098      	b.n	8002b0e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d112      	bne.n	8002a08 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	617b      	str	r3, [r7, #20]
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002a00:	f001 fedc 	bl	80047bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e082      	b.n	8002b0e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fed6 	bl	80037c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a1c:	f001 fece 	bl	80047bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a20:	f000 fc46 	bl	80032b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a24:	f001 fe98 	bl	8004758 <vPortEnterCritical>
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d103      	bne.n	8002a3e <xQueueSemaphoreTake+0x142>
 8002a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4a:	d103      	bne.n	8002a54 <xQueueSemaphoreTake+0x158>
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a54:	f001 feb2 	bl	80047bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a58:	463a      	mov	r2, r7
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fec5 	bl	80037f0 <xTaskCheckForTimeOut>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d132      	bne.n	8002ad2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a6e:	f000 f94f 	bl	8002d10 <prvIsQueueEmpty>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d026      	beq.n	8002ac6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002a80:	f001 fe6a 	bl	8004758 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 f815 	bl	8003ab8 <xTaskPriorityInherit>
 8002a8e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002a90:	f001 fe94 	bl	80047bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a96:	3324      	adds	r3, #36	@ 0x24
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fddb 	bl	8003658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002aa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002aa4:	f000 f8e2 	bl	8002c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002aa8:	f000 fc10 	bl	80032cc <xTaskResumeAll>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f47f af67 	bne.w	8002982 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002ab4:	4b18      	ldr	r3, [pc, #96]	@ (8002b18 <xQueueSemaphoreTake+0x21c>)
 8002ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	e75d      	b.n	8002982 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002ac6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ac8:	f000 f8d0 	bl	8002c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002acc:	f000 fbfe 	bl	80032cc <xTaskResumeAll>
 8002ad0:	e757      	b.n	8002982 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002ad2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ad4:	f000 f8ca 	bl	8002c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ad8:	f000 fbf8 	bl	80032cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002adc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ade:	f000 f917 	bl	8002d10 <prvIsQueueEmpty>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f43f af4c 	beq.w	8002982 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002af0:	f001 fe32 	bl	8004758 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002af4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002af6:	f000 f811 	bl	8002b1c <prvGetDisinheritPriorityAfterTimeout>
 8002afa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f8b0 	bl	8003c68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002b08:	f001 fe58 	bl	80047bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3738      	adds	r7, #56	@ 0x38
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e001      	b.n	8002b3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
	}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10d      	bne.n	8002b86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d14d      	bne.n	8002c0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 f806 	bl	8003b88 <xTaskPriorityDisinherit>
 8002b7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	e043      	b.n	8002c0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d119      	bne.n	8002bc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6858      	ldr	r0, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	461a      	mov	r2, r3
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	f002 ffcd 	bl	8005b36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	441a      	add	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d32b      	bcc.n	8002c0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e026      	b.n	8002c0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68d8      	ldr	r0, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	f002 ffb3 	bl	8005b36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	425b      	negs	r3, r3
 8002bda:	441a      	add	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	441a      	add	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d105      	bne.n	8002c0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002c16:	697b      	ldr	r3, [r7, #20]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d018      	beq.n	8002c64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	441a      	add	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d303      	bcc.n	8002c54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68d9      	ldr	r1, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6838      	ldr	r0, [r7, #0]
 8002c60:	f002 ff69 	bl	8005b36 <memcpy>
	}
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c74:	f001 fd70 	bl	8004758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c80:	e011      	b.n	8002ca6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d012      	beq.n	8002cb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3324      	adds	r3, #36	@ 0x24
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fd34 	bl	80036fc <xTaskRemoveFromEventList>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c9a:	f000 fe0d 	bl	80038b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	dce9      	bgt.n	8002c82 <prvUnlockQueue+0x16>
 8002cae:	e000      	b.n	8002cb2 <prvUnlockQueue+0x46>
					break;
 8002cb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	22ff      	movs	r2, #255	@ 0xff
 8002cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002cba:	f001 fd7f 	bl	80047bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cbe:	f001 fd4b 	bl	8004758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cca:	e011      	b.n	8002cf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3310      	adds	r3, #16
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fd0f 	bl	80036fc <xTaskRemoveFromEventList>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ce4:	f000 fde8 	bl	80038b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	dce9      	bgt.n	8002ccc <prvUnlockQueue+0x60>
 8002cf8:	e000      	b.n	8002cfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	22ff      	movs	r2, #255	@ 0xff
 8002d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002d04:	f001 fd5a 	bl	80047bc <vPortExitCritical>
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d18:	f001 fd1e 	bl	8004758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e001      	b.n	8002d2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d2e:	f001 fd45 	bl	80047bc <vPortExitCritical>

	return xReturn;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d44:	f001 fd08 	bl	8004758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d102      	bne.n	8002d5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d54:	2301      	movs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e001      	b.n	8002d5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d5e:	f001 fd2d 	bl	80047bc <vPortExitCritical>

	return xReturn;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e014      	b.n	8002da6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002dbc <vQueueAddToRegistry+0x50>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d88:	490c      	ldr	r1, [pc, #48]	@ (8002dbc <vQueueAddToRegistry+0x50>)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <vQueueAddToRegistry+0x50>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d9e:	e006      	b.n	8002dae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3301      	adds	r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b07      	cmp	r3, #7
 8002daa:	d9e7      	bls.n	8002d7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	200008dc 	.word	0x200008dc

08002dc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002dd0:	f001 fcc2 	bl	8004758 <vPortEnterCritical>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dda:	b25b      	sxtb	r3, r3
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d103      	bne.n	8002dea <vQueueWaitForMessageRestricted+0x2a>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002df0:	b25b      	sxtb	r3, r3
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d103      	bne.n	8002e00 <vQueueWaitForMessageRestricted+0x40>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e00:	f001 fcdc 	bl	80047bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3324      	adds	r3, #36	@ 0x24
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fc45 	bl	80036a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f7ff ff26 	bl	8002c6c <prvUnlockQueue>
	}
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	@ 0x38
 8002e2c:	af04      	add	r7, sp, #16
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	623b      	str	r3, [r7, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	61fb      	str	r3, [r7, #28]
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e72:	235c      	movs	r3, #92	@ 0x5c
 8002e74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b5c      	cmp	r3, #92	@ 0x5c
 8002e7a:	d00b      	beq.n	8002e94 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	61bb      	str	r3, [r7, #24]
}
 8002e8e:	bf00      	nop
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01e      	beq.n	8002eda <xTaskCreateStatic+0xb2>
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01b      	beq.n	8002eda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9303      	str	r3, [sp, #12]
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f850 	bl	8002f72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ed2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ed4:	f000 f8de 	bl	8003094 <prvAddNewTaskToReadyList>
 8002ed8:	e001      	b.n	8002ede <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ede:	697b      	ldr	r3, [r7, #20]
	}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3728      	adds	r7, #40	@ 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08c      	sub	sp, #48	@ 0x30
 8002eec:	af04      	add	r7, sp, #16
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f001 fd4d 	bl	800499c <pvPortMalloc>
 8002f02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f0a:	205c      	movs	r0, #92	@ 0x5c
 8002f0c:	f001 fd46 	bl	800499c <pvPortMalloc>
 8002f10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f1e:	e005      	b.n	8002f2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f20:	6978      	ldr	r0, [r7, #20]
 8002f22:	f001 fe09 	bl	8004b38 <vPortFree>
 8002f26:	e001      	b.n	8002f2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9303      	str	r3, [sp, #12]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f80e 	bl	8002f72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f56:	69f8      	ldr	r0, [r7, #28]
 8002f58:	f000 f89c 	bl	8003094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e002      	b.n	8002f68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
 8002f66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f68:	69bb      	ldr	r3, [r7, #24]
	}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b088      	sub	sp, #32
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	21a5      	movs	r1, #165	@ 0xa5
 8002f8c:	f002 fd54 	bl	8005a38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f023 0307 	bic.w	r3, r3, #7
 8002fa8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	617b      	str	r3, [r7, #20]
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01f      	beq.n	8003012 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	e012      	b.n	8002ffe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	7819      	ldrb	r1, [r3, #0]
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3334      	adds	r3, #52	@ 0x34
 8002fe8:	460a      	mov	r2, r1
 8002fea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	2b0f      	cmp	r3, #15
 8003002:	d9e9      	bls.n	8002fd8 <prvInitialiseNewTask+0x66>
 8003004:	e000      	b.n	8003008 <prvInitialiseNewTask+0x96>
			{
				break;
 8003006:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003010:	e003      	b.n	800301a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	2b37      	cmp	r3, #55	@ 0x37
 800301e:	d901      	bls.n	8003024 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003020:	2337      	movs	r3, #55	@ 0x37
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003028:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800302e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	2200      	movs	r2, #0
 8003034:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	3304      	adds	r3, #4
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe ff72 	bl	8001f24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003042:	3318      	adds	r3, #24
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe ff6d 	bl	8001f24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800304e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003062:	2200      	movs	r2, #0
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	69b8      	ldr	r0, [r7, #24]
 8003074:	f001 fa3e 	bl	80044f4 <pxPortInitialiseStack>
 8003078:	4602      	mov	r2, r0
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800307e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800308a:	bf00      	nop
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800309c:	f001 fb5c 	bl	8004758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <prvAddNewTaskToReadyList+0xc4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003158 <prvAddNewTaskToReadyList+0xc4>)
 80030a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030aa:	4b2c      	ldr	r3, [pc, #176]	@ (800315c <prvAddNewTaskToReadyList+0xc8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030b2:	4a2a      	ldr	r2, [pc, #168]	@ (800315c <prvAddNewTaskToReadyList+0xc8>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030b8:	4b27      	ldr	r3, [pc, #156]	@ (8003158 <prvAddNewTaskToReadyList+0xc4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d110      	bne.n	80030e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030c0:	f000 fc1e 	bl	8003900 <prvInitialiseTaskLists>
 80030c4:	e00d      	b.n	80030e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030c6:	4b26      	ldr	r3, [pc, #152]	@ (8003160 <prvAddNewTaskToReadyList+0xcc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ce:	4b23      	ldr	r3, [pc, #140]	@ (800315c <prvAddNewTaskToReadyList+0xc8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	429a      	cmp	r2, r3
 80030da:	d802      	bhi.n	80030e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030dc:	4a1f      	ldr	r2, [pc, #124]	@ (800315c <prvAddNewTaskToReadyList+0xc8>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030e2:	4b20      	ldr	r3, [pc, #128]	@ (8003164 <prvAddNewTaskToReadyList+0xd0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003164 <prvAddNewTaskToReadyList+0xd0>)
 80030ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <prvAddNewTaskToReadyList+0xd0>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <prvAddNewTaskToReadyList+0xd4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d903      	bls.n	8003108 <prvAddNewTaskToReadyList+0x74>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	4a18      	ldr	r2, [pc, #96]	@ (8003168 <prvAddNewTaskToReadyList+0xd4>)
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4a15      	ldr	r2, [pc, #84]	@ (800316c <prvAddNewTaskToReadyList+0xd8>)
 8003116:	441a      	add	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7fe ff0d 	bl	8001f3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003124:	f001 fb4a 	bl	80047bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003128:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <prvAddNewTaskToReadyList+0xcc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003130:	4b0a      	ldr	r3, [pc, #40]	@ (800315c <prvAddNewTaskToReadyList+0xc8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	429a      	cmp	r2, r3
 800313c:	d207      	bcs.n	800314e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800313e:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <prvAddNewTaskToReadyList+0xdc>)
 8003140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000df0 	.word	0x20000df0
 800315c:	2000091c 	.word	0x2000091c
 8003160:	20000dfc 	.word	0x20000dfc
 8003164:	20000e0c 	.word	0x20000e0c
 8003168:	20000df8 	.word	0x20000df8
 800316c:	20000920 	.word	0x20000920
 8003170:	e000ed04 	.word	0xe000ed04

08003174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d018      	beq.n	80031b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003186:	4b14      	ldr	r3, [pc, #80]	@ (80031d8 <vTaskDelay+0x64>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <vTaskDelay+0x32>
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	60bb      	str	r3, [r7, #8]
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	e7fd      	b.n	80031a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031a6:	f000 f883 	bl	80032b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031aa:	2100      	movs	r1, #0
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fdf3 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031b2:	f000 f88b 	bl	80032cc <xTaskResumeAll>
 80031b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <vTaskDelay+0x68>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000e18 	.word	0x20000e18
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	@ 0x28
 80031e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031ee:	463a      	mov	r2, r7
 80031f0:	1d39      	adds	r1, r7, #4
 80031f2:	f107 0308 	add.w	r3, r7, #8
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fe40 	bl	8001e7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	9202      	str	r2, [sp, #8]
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	2300      	movs	r3, #0
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2300      	movs	r3, #0
 800320c:	460a      	mov	r2, r1
 800320e:	4922      	ldr	r1, [pc, #136]	@ (8003298 <vTaskStartScheduler+0xb8>)
 8003210:	4822      	ldr	r0, [pc, #136]	@ (800329c <vTaskStartScheduler+0xbc>)
 8003212:	f7ff fe09 	bl	8002e28 <xTaskCreateStatic>
 8003216:	4603      	mov	r3, r0
 8003218:	4a21      	ldr	r2, [pc, #132]	@ (80032a0 <vTaskStartScheduler+0xc0>)
 800321a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800321c:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <vTaskStartScheduler+0xc0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003224:	2301      	movs	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e001      	b.n	800322e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d102      	bne.n	800323a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003234:	f000 fe04 	bl	8003e40 <xTimerCreateTimerTask>
 8003238:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d116      	bne.n	800326e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	613b      	str	r3, [r7, #16]
}
 8003252:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003254:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <vTaskStartScheduler+0xc4>)
 8003256:	f04f 32ff 	mov.w	r2, #4294967295
 800325a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800325c:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <vTaskStartScheduler+0xc8>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <vTaskStartScheduler+0xcc>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003268:	f001 f9d2 	bl	8004610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800326c:	e00f      	b.n	800328e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d10b      	bne.n	800328e <vTaskStartScheduler+0xae>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	60fb      	str	r3, [r7, #12]
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	e7fd      	b.n	800328a <vTaskStartScheduler+0xaa>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	08007870 	.word	0x08007870
 800329c:	080038d1 	.word	0x080038d1
 80032a0:	20000e14 	.word	0x20000e14
 80032a4:	20000e10 	.word	0x20000e10
 80032a8:	20000dfc 	.word	0x20000dfc
 80032ac:	20000df4 	.word	0x20000df4

080032b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032b4:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <vTaskSuspendAll+0x18>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	4a03      	ldr	r2, [pc, #12]	@ (80032c8 <vTaskSuspendAll+0x18>)
 80032bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	20000e18 	.word	0x20000e18

080032cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032da:	4b42      	ldr	r3, [pc, #264]	@ (80033e4 <xTaskResumeAll+0x118>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <xTaskResumeAll+0x2e>
	__asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	603b      	str	r3, [r7, #0]
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	e7fd      	b.n	80032f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032fa:	f001 fa2d 	bl	8004758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032fe:	4b39      	ldr	r3, [pc, #228]	@ (80033e4 <xTaskResumeAll+0x118>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3b01      	subs	r3, #1
 8003304:	4a37      	ldr	r2, [pc, #220]	@ (80033e4 <xTaskResumeAll+0x118>)
 8003306:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003308:	4b36      	ldr	r3, [pc, #216]	@ (80033e4 <xTaskResumeAll+0x118>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d162      	bne.n	80033d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003310:	4b35      	ldr	r3, [pc, #212]	@ (80033e8 <xTaskResumeAll+0x11c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d05e      	beq.n	80033d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003318:	e02f      	b.n	800337a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800331a:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <xTaskResumeAll+0x120>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3318      	adds	r3, #24
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe fe66 	bl	8001ff8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3304      	adds	r3, #4
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe fe61 	bl	8001ff8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333a:	4b2d      	ldr	r3, [pc, #180]	@ (80033f0 <xTaskResumeAll+0x124>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d903      	bls.n	800334a <xTaskResumeAll+0x7e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	4a2a      	ldr	r2, [pc, #168]	@ (80033f0 <xTaskResumeAll+0x124>)
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4a27      	ldr	r2, [pc, #156]	@ (80033f4 <xTaskResumeAll+0x128>)
 8003358:	441a      	add	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3304      	adds	r3, #4
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f7fe fdec 	bl	8001f3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336a:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <xTaskResumeAll+0x12c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	429a      	cmp	r2, r3
 8003372:	d302      	bcc.n	800337a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003374:	4b21      	ldr	r3, [pc, #132]	@ (80033fc <xTaskResumeAll+0x130>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337a:	4b1c      	ldr	r3, [pc, #112]	@ (80033ec <xTaskResumeAll+0x120>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1cb      	bne.n	800331a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003388:	f000 fb58 	bl	8003a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800338c:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <xTaskResumeAll+0x134>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003398:	f000 f846 	bl	8003428 <xTaskIncrementTick>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80033a2:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <xTaskResumeAll+0x130>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f1      	bne.n	8003398 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80033b4:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <xTaskResumeAll+0x134>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033ba:	4b10      	ldr	r3, [pc, #64]	@ (80033fc <xTaskResumeAll+0x130>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033c2:	2301      	movs	r3, #1
 80033c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <xTaskResumeAll+0x138>)
 80033c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033d6:	f001 f9f1 	bl	80047bc <vPortExitCritical>

	return xAlreadyYielded;
 80033da:	68bb      	ldr	r3, [r7, #8]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000e18 	.word	0x20000e18
 80033e8:	20000df0 	.word	0x20000df0
 80033ec:	20000db0 	.word	0x20000db0
 80033f0:	20000df8 	.word	0x20000df8
 80033f4:	20000920 	.word	0x20000920
 80033f8:	2000091c 	.word	0x2000091c
 80033fc:	20000e04 	.word	0x20000e04
 8003400:	20000e00 	.word	0x20000e00
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <xTaskGetTickCount+0x1c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003414:	687b      	ldr	r3, [r7, #4]
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000df4 	.word	0x20000df4

08003428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003432:	4b4f      	ldr	r3, [pc, #316]	@ (8003570 <xTaskIncrementTick+0x148>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 8090 	bne.w	800355c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800343c:	4b4d      	ldr	r3, [pc, #308]	@ (8003574 <xTaskIncrementTick+0x14c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003444:	4a4b      	ldr	r2, [pc, #300]	@ (8003574 <xTaskIncrementTick+0x14c>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d121      	bne.n	8003494 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003450:	4b49      	ldr	r3, [pc, #292]	@ (8003578 <xTaskIncrementTick+0x150>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <xTaskIncrementTick+0x4a>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	603b      	str	r3, [r7, #0]
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <xTaskIncrementTick+0x46>
 8003472:	4b41      	ldr	r3, [pc, #260]	@ (8003578 <xTaskIncrementTick+0x150>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	4b40      	ldr	r3, [pc, #256]	@ (800357c <xTaskIncrementTick+0x154>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3e      	ldr	r2, [pc, #248]	@ (8003578 <xTaskIncrementTick+0x150>)
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4a3e      	ldr	r2, [pc, #248]	@ (800357c <xTaskIncrementTick+0x154>)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b3e      	ldr	r3, [pc, #248]	@ (8003580 <xTaskIncrementTick+0x158>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a3c      	ldr	r2, [pc, #240]	@ (8003580 <xTaskIncrementTick+0x158>)
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	f000 fad4 	bl	8003a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003494:	4b3b      	ldr	r3, [pc, #236]	@ (8003584 <xTaskIncrementTick+0x15c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	429a      	cmp	r2, r3
 800349c:	d349      	bcc.n	8003532 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349e:	4b36      	ldr	r3, [pc, #216]	@ (8003578 <xTaskIncrementTick+0x150>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a8:	4b36      	ldr	r3, [pc, #216]	@ (8003584 <xTaskIncrementTick+0x15c>)
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295
 80034ae:	601a      	str	r2, [r3, #0]
					break;
 80034b0:	e03f      	b.n	8003532 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b2:	4b31      	ldr	r3, [pc, #196]	@ (8003578 <xTaskIncrementTick+0x150>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d203      	bcs.n	80034d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003584 <xTaskIncrementTick+0x15c>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034d0:	e02f      	b.n	8003532 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fd8e 	bl	8001ff8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3318      	adds	r3, #24
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fd85 	bl	8001ff8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f2:	4b25      	ldr	r3, [pc, #148]	@ (8003588 <xTaskIncrementTick+0x160>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d903      	bls.n	8003502 <xTaskIncrementTick+0xda>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	4a22      	ldr	r2, [pc, #136]	@ (8003588 <xTaskIncrementTick+0x160>)
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4a1f      	ldr	r2, [pc, #124]	@ (800358c <xTaskIncrementTick+0x164>)
 8003510:	441a      	add	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3304      	adds	r3, #4
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f7fe fd10 	bl	8001f3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003522:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <xTaskIncrementTick+0x168>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	429a      	cmp	r2, r3
 800352a:	d3b8      	bcc.n	800349e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800352c:	2301      	movs	r3, #1
 800352e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003530:	e7b5      	b.n	800349e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003532:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <xTaskIncrementTick+0x168>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003538:	4914      	ldr	r1, [pc, #80]	@ (800358c <xTaskIncrementTick+0x164>)
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d901      	bls.n	800354e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800354a:	2301      	movs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800354e:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <xTaskIncrementTick+0x16c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003556:	2301      	movs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e004      	b.n	8003566 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800355c:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <xTaskIncrementTick+0x170>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a0d      	ldr	r2, [pc, #52]	@ (8003598 <xTaskIncrementTick+0x170>)
 8003564:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003566:	697b      	ldr	r3, [r7, #20]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000e18 	.word	0x20000e18
 8003574:	20000df4 	.word	0x20000df4
 8003578:	20000da8 	.word	0x20000da8
 800357c:	20000dac 	.word	0x20000dac
 8003580:	20000e08 	.word	0x20000e08
 8003584:	20000e10 	.word	0x20000e10
 8003588:	20000df8 	.word	0x20000df8
 800358c:	20000920 	.word	0x20000920
 8003590:	2000091c 	.word	0x2000091c
 8003594:	20000e04 	.word	0x20000e04
 8003598:	20000e00 	.word	0x20000e00

0800359c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035a2:	4b28      	ldr	r3, [pc, #160]	@ (8003644 <vTaskSwitchContext+0xa8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035aa:	4b27      	ldr	r3, [pc, #156]	@ (8003648 <vTaskSwitchContext+0xac>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035b0:	e042      	b.n	8003638 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80035b2:	4b25      	ldr	r3, [pc, #148]	@ (8003648 <vTaskSwitchContext+0xac>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b8:	4b24      	ldr	r3, [pc, #144]	@ (800364c <vTaskSwitchContext+0xb0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e011      	b.n	80035e4 <vTaskSwitchContext+0x48>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <vTaskSwitchContext+0x42>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	607b      	str	r3, [r7, #4]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <vTaskSwitchContext+0x3e>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	491a      	ldr	r1, [pc, #104]	@ (8003650 <vTaskSwitchContext+0xb4>)
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0e3      	beq.n	80035c0 <vTaskSwitchContext+0x24>
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a13      	ldr	r2, [pc, #76]	@ (8003650 <vTaskSwitchContext+0xb4>)
 8003604:	4413      	add	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3308      	adds	r3, #8
 800361a:	429a      	cmp	r2, r3
 800361c:	d104      	bne.n	8003628 <vTaskSwitchContext+0x8c>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	4a09      	ldr	r2, [pc, #36]	@ (8003654 <vTaskSwitchContext+0xb8>)
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4a06      	ldr	r2, [pc, #24]	@ (800364c <vTaskSwitchContext+0xb0>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20000e18 	.word	0x20000e18
 8003648:	20000e04 	.word	0x20000e04
 800364c:	20000df8 	.word	0x20000df8
 8003650:	20000920 	.word	0x20000920
 8003654:	2000091c 	.word	0x2000091c

08003658 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	60fb      	str	r3, [r7, #12]
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003680:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <vTaskPlaceOnEventList+0x48>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3318      	adds	r3, #24
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fe fc7c 	bl	8001f86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800368e:	2101      	movs	r1, #1
 8003690:	6838      	ldr	r0, [r7, #0]
 8003692:	f000 fb81 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	2000091c 	.word	0x2000091c

080036a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	617b      	str	r3, [r7, #20]
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	e7fd      	b.n	80036ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036ce:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3318      	adds	r3, #24
 80036d4:	4619      	mov	r1, r3
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7fe fc31 	bl	8001f3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	68b8      	ldr	r0, [r7, #8]
 80036ec:	f000 fb54 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
	}
 80036f0:	bf00      	nop
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	2000091c 	.word	0x2000091c

080036fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	60fb      	str	r3, [r7, #12]
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	e7fd      	b.n	8003726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	3318      	adds	r3, #24
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fc62 	bl	8001ff8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003734:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <xTaskRemoveFromEventList+0xb0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d11d      	bne.n	8003778 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	3304      	adds	r3, #4
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fc59 	bl	8001ff8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374a:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <xTaskRemoveFromEventList+0xb4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d903      	bls.n	800375a <xTaskRemoveFromEventList+0x5e>
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003756:	4a16      	ldr	r2, [pc, #88]	@ (80037b0 <xTaskRemoveFromEventList+0xb4>)
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <xTaskRemoveFromEventList+0xb8>)
 8003768:	441a      	add	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3304      	adds	r3, #4
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7fe fbe4 	bl	8001f3e <vListInsertEnd>
 8003776:	e005      	b.n	8003784 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	3318      	adds	r3, #24
 800377c:	4619      	mov	r1, r3
 800377e:	480e      	ldr	r0, [pc, #56]	@ (80037b8 <xTaskRemoveFromEventList+0xbc>)
 8003780:	f7fe fbdd 	bl	8001f3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <xTaskRemoveFromEventList+0xc0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	429a      	cmp	r2, r3
 8003790:	d905      	bls.n	800379e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003792:	2301      	movs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003796:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <xTaskRemoveFromEventList+0xc4>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e001      	b.n	80037a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037a2:	697b      	ldr	r3, [r7, #20]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000e18 	.word	0x20000e18
 80037b0:	20000df8 	.word	0x20000df8
 80037b4:	20000920 	.word	0x20000920
 80037b8:	20000db0 	.word	0x20000db0
 80037bc:	2000091c 	.word	0x2000091c
 80037c0:	20000e04 	.word	0x20000e04

080037c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <vTaskInternalSetTimeOutState+0x24>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <vTaskInternalSetTimeOutState+0x28>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	605a      	str	r2, [r3, #4]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	20000e08 	.word	0x20000e08
 80037ec:	20000df4 	.word	0x20000df4

080037f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10b      	bne.n	8003818 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	613b      	str	r3, [r7, #16]
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	60fb      	str	r3, [r7, #12]
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	e7fd      	b.n	8003832 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003836:	f000 ff8f 	bl	8004758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <xTaskCheckForTimeOut+0xc0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d102      	bne.n	800385a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e023      	b.n	80038a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <xTaskCheckForTimeOut+0xc4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d007      	beq.n	8003876 <xTaskCheckForTimeOut+0x86>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e015      	b.n	80038a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	429a      	cmp	r2, r3
 800387e:	d20b      	bcs.n	8003898 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1ad2      	subs	r2, r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff99 	bl	80037c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	e004      	b.n	80038a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038a2:	f000 ff8b 	bl	80047bc <vPortExitCritical>

	return xReturn;
 80038a6:	69fb      	ldr	r3, [r7, #28]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000df4 	.word	0x20000df4
 80038b4:	20000e08 	.word	0x20000e08

080038b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038bc:	4b03      	ldr	r3, [pc, #12]	@ (80038cc <vTaskMissedYield+0x14>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	20000e04 	.word	0x20000e04

080038d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038d8:	f000 f852 	bl	8003980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038dc:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <prvIdleTask+0x28>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d9f9      	bls.n	80038d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <prvIdleTask+0x2c>)
 80038e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038f4:	e7f0      	b.n	80038d8 <prvIdleTask+0x8>
 80038f6:	bf00      	nop
 80038f8:	20000920 	.word	0x20000920
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	e00c      	b.n	8003926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4a12      	ldr	r2, [pc, #72]	@ (8003960 <prvInitialiseTaskLists+0x60>)
 8003918:	4413      	add	r3, r2
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fae2 	bl	8001ee4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3301      	adds	r3, #1
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b37      	cmp	r3, #55	@ 0x37
 800392a:	d9ef      	bls.n	800390c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800392c:	480d      	ldr	r0, [pc, #52]	@ (8003964 <prvInitialiseTaskLists+0x64>)
 800392e:	f7fe fad9 	bl	8001ee4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003932:	480d      	ldr	r0, [pc, #52]	@ (8003968 <prvInitialiseTaskLists+0x68>)
 8003934:	f7fe fad6 	bl	8001ee4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003938:	480c      	ldr	r0, [pc, #48]	@ (800396c <prvInitialiseTaskLists+0x6c>)
 800393a:	f7fe fad3 	bl	8001ee4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800393e:	480c      	ldr	r0, [pc, #48]	@ (8003970 <prvInitialiseTaskLists+0x70>)
 8003940:	f7fe fad0 	bl	8001ee4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003944:	480b      	ldr	r0, [pc, #44]	@ (8003974 <prvInitialiseTaskLists+0x74>)
 8003946:	f7fe facd 	bl	8001ee4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800394a:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <prvInitialiseTaskLists+0x78>)
 800394c:	4a05      	ldr	r2, [pc, #20]	@ (8003964 <prvInitialiseTaskLists+0x64>)
 800394e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003950:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <prvInitialiseTaskLists+0x7c>)
 8003952:	4a05      	ldr	r2, [pc, #20]	@ (8003968 <prvInitialiseTaskLists+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000920 	.word	0x20000920
 8003964:	20000d80 	.word	0x20000d80
 8003968:	20000d94 	.word	0x20000d94
 800396c:	20000db0 	.word	0x20000db0
 8003970:	20000dc4 	.word	0x20000dc4
 8003974:	20000ddc 	.word	0x20000ddc
 8003978:	20000da8 	.word	0x20000da8
 800397c:	20000dac 	.word	0x20000dac

08003980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003986:	e019      	b.n	80039bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003988:	f000 fee6 	bl	8004758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800398c:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <prvCheckTasksWaitingTermination+0x50>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fb2d 	bl	8001ff8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <prvCheckTasksWaitingTermination+0x54>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	4a0b      	ldr	r2, [pc, #44]	@ (80039d4 <prvCheckTasksWaitingTermination+0x54>)
 80039a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <prvCheckTasksWaitingTermination+0x58>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <prvCheckTasksWaitingTermination+0x58>)
 80039b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039b2:	f000 ff03 	bl	80047bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f810 	bl	80039dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039bc:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <prvCheckTasksWaitingTermination+0x58>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e1      	bne.n	8003988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000dc4 	.word	0x20000dc4
 80039d4:	20000df0 	.word	0x20000df0
 80039d8:	20000dd8 	.word	0x20000dd8

080039dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 f8a0 	bl	8004b38 <vPortFree>
				vPortFree( pxTCB );
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f001 f89d 	bl	8004b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039fe:	e019      	b.n	8003a34 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d103      	bne.n	8003a12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f001 f894 	bl	8004b38 <vPortFree>
	}
 8003a10:	e010      	b.n	8003a34 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d00b      	beq.n	8003a34 <prvDeleteTCB+0x58>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	60fb      	str	r3, [r7, #12]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <prvDeleteTCB+0x54>
	}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a42:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <prvResetNextTaskUnblockTime+0x38>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <prvResetNextTaskUnblockTime+0x3c>)
 8003a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a54:	e008      	b.n	8003a68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a56:	4b07      	ldr	r3, [pc, #28]	@ (8003a74 <prvResetNextTaskUnblockTime+0x38>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <prvResetNextTaskUnblockTime+0x3c>)
 8003a66:	6013      	str	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	20000da8 	.word	0x20000da8
 8003a78:	20000e10 	.word	0x20000e10

08003a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a82:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <xTaskGetSchedulerState+0x34>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	e008      	b.n	8003aa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a90:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <xTaskGetSchedulerState+0x38>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	e001      	b.n	8003aa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003aa2:	687b      	ldr	r3, [r7, #4]
	}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	20000dfc 	.word	0x20000dfc
 8003ab4:	20000e18 	.word	0x20000e18

08003ab8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d051      	beq.n	8003b72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b7c <xTaskPriorityInherit+0xc4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d241      	bcs.n	8003b60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db06      	blt.n	8003af2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae4:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <xTaskPriorityInherit+0xc4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6959      	ldr	r1, [r3, #20]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <xTaskPriorityInherit+0xc8>)
 8003b04:	4413      	add	r3, r2
 8003b06:	4299      	cmp	r1, r3
 8003b08:	d122      	bne.n	8003b50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fa72 	bl	8001ff8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b14:	4b19      	ldr	r3, [pc, #100]	@ (8003b7c <xTaskPriorityInherit+0xc4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b22:	4b18      	ldr	r3, [pc, #96]	@ (8003b84 <xTaskPriorityInherit+0xcc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d903      	bls.n	8003b32 <xTaskPriorityInherit+0x7a>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <xTaskPriorityInherit+0xcc>)
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4a10      	ldr	r2, [pc, #64]	@ (8003b80 <xTaskPriorityInherit+0xc8>)
 8003b40:	441a      	add	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fe f9f8 	bl	8001f3e <vListInsertEnd>
 8003b4e:	e004      	b.n	8003b5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b50:	4b0a      	ldr	r3, [pc, #40]	@ (8003b7c <xTaskPriorityInherit+0xc4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e008      	b.n	8003b72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b64:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <xTaskPriorityInherit+0xc4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d201      	bcs.n	8003b72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b72:	68fb      	ldr	r3, [r7, #12]
	}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2000091c 	.word	0x2000091c
 8003b80:	20000920 	.word	0x20000920
 8003b84:	20000df8 	.word	0x20000df8

08003b88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d058      	beq.n	8003c50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c5c <xTaskPriorityDisinherit+0xd4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d00b      	beq.n	8003bc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	60fb      	str	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	60bb      	str	r3, [r7, #8]
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be4:	1e5a      	subs	r2, r3, #1
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d02c      	beq.n	8003c50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d128      	bne.n	8003c50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe f9f8 	bl	8001ff8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c20:	4b0f      	ldr	r3, [pc, #60]	@ (8003c60 <xTaskPriorityDisinherit+0xd8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d903      	bls.n	8003c30 <xTaskPriorityDisinherit+0xa8>
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003c60 <xTaskPriorityDisinherit+0xd8>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4a09      	ldr	r2, [pc, #36]	@ (8003c64 <xTaskPriorityDisinherit+0xdc>)
 8003c3e:	441a      	add	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f7fe f979 	bl	8001f3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c50:	697b      	ldr	r3, [r7, #20]
	}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000091c 	.word	0x2000091c
 8003c60:	20000df8 	.word	0x20000df8
 8003c64:	20000920 	.word	0x20000920

08003c68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d06c      	beq.n	8003d5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10b      	bne.n	8003ca0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	60fb      	str	r3, [r7, #12]
}
 8003c9a:	bf00      	nop
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d902      	bls.n	8003cb0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	e002      	b.n	8003cb6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d04c      	beq.n	8003d5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d147      	bne.n	8003d5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003cca:	4b26      	ldr	r3, [pc, #152]	@ (8003d64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d10b      	bne.n	8003cec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	60bb      	str	r3, [r7, #8]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db04      	blt.n	8003d0a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	6959      	ldr	r1, [r3, #20]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4299      	cmp	r1, r3
 8003d1e:	d11c      	bne.n	8003d5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe f967 	bl	8001ff8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d903      	bls.n	8003d3e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4a07      	ldr	r2, [pc, #28]	@ (8003d68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003d4c:	441a      	add	r2, r3
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7fe f8f2 	bl	8001f3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d5a:	bf00      	nop
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2000091c 	.word	0x2000091c
 8003d68:	20000920 	.word	0x20000920
 8003d6c:	20000df8 	.word	0x20000df8

08003d70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003d74:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d82:	3201      	adds	r2, #1
 8003d84:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8003d86:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
	}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	2000091c 	.word	0x2000091c

08003d98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003da2:	4b21      	ldr	r3, [pc, #132]	@ (8003e28 <prvAddCurrentTaskToDelayedList+0x90>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da8:	4b20      	ldr	r3, [pc, #128]	@ (8003e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe f922 	bl	8001ff8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d10a      	bne.n	8003dd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4819      	ldr	r0, [pc, #100]	@ (8003e30 <prvAddCurrentTaskToDelayedList+0x98>)
 8003dcc:	f7fe f8b7 	bl	8001f3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003dd0:	e026      	b.n	8003e20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dda:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d209      	bcs.n	8003dfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dea:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fe f8c5 	bl	8001f86 <vListInsert>
}
 8003dfc:	e010      	b.n	8003e20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8003e38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7fe f8bb 	bl	8001f86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e10:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d202      	bcs.n	8003e20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e1a:	4a08      	ldr	r2, [pc, #32]	@ (8003e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000df4 	.word	0x20000df4
 8003e2c:	2000091c 	.word	0x2000091c
 8003e30:	20000ddc 	.word	0x20000ddc
 8003e34:	20000dac 	.word	0x20000dac
 8003e38:	20000da8 	.word	0x20000da8
 8003e3c:	20000e10 	.word	0x20000e10

08003e40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	@ 0x28
 8003e44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e4a:	f000 fb13 	bl	8004474 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <xTimerCreateTimerTask+0x84>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d021      	beq.n	8003e9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e5e:	1d3a      	adds	r2, r7, #4
 8003e60:	f107 0108 	add.w	r1, r7, #8
 8003e64:	f107 030c 	add.w	r3, r7, #12
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe f821 	bl	8001eb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	9202      	str	r2, [sp, #8]
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	2302      	movs	r3, #2
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	460a      	mov	r2, r1
 8003e80:	4911      	ldr	r1, [pc, #68]	@ (8003ec8 <xTimerCreateTimerTask+0x88>)
 8003e82:	4812      	ldr	r0, [pc, #72]	@ (8003ecc <xTimerCreateTimerTask+0x8c>)
 8003e84:	f7fe ffd0 	bl	8002e28 <xTaskCreateStatic>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4a11      	ldr	r2, [pc, #68]	@ (8003ed0 <xTimerCreateTimerTask+0x90>)
 8003e8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <xTimerCreateTimerTask+0x90>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	613b      	str	r3, [r7, #16]
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003eb8:	697b      	ldr	r3, [r7, #20]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000e4c 	.word	0x20000e4c
 8003ec8:	08007878 	.word	0x08007878
 8003ecc:	0800400d 	.word	0x0800400d
 8003ed0:	20000e50 	.word	0x20000e50

08003ed4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	@ 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <xTimerGenericCommand+0x30>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	623b      	str	r3, [r7, #32]
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f04:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <xTimerGenericCommand+0x98>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02a      	beq.n	8003f62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	dc18      	bgt.n	8003f50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f1e:	f7ff fdad 	bl	8003a7c <xTaskGetSchedulerState>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d109      	bne.n	8003f3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f28:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <xTimerGenericCommand+0x98>)
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	f107 0110 	add.w	r1, r7, #16
 8003f30:	2300      	movs	r3, #0
 8003f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f34:	f7fe f9d0 	bl	80022d8 <xQueueGenericSend>
 8003f38:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f3a:	e012      	b.n	8003f62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <xTimerGenericCommand+0x98>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	f107 0110 	add.w	r1, r7, #16
 8003f44:	2300      	movs	r3, #0
 8003f46:	2200      	movs	r2, #0
 8003f48:	f7fe f9c6 	bl	80022d8 <xQueueGenericSend>
 8003f4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f4e:	e008      	b.n	8003f62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f50:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <xTimerGenericCommand+0x98>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	f107 0110 	add.w	r1, r7, #16
 8003f58:	2300      	movs	r3, #0
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	f7fe fabe 	bl	80024dc <xQueueGenericSendFromISR>
 8003f60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3728      	adds	r7, #40	@ 0x28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000e4c 	.word	0x20000e4c

08003f70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7a:	4b23      	ldr	r3, [pc, #140]	@ (8004008 <prvProcessExpiredTimer+0x98>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe f835 	bl	8001ff8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d023      	beq.n	8003fe4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	18d1      	adds	r1, r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f000 f8d5 	bl	8004158 <prvInsertTimerInActiveList>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d020      	beq.n	8003ff6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f7ff ff88 	bl	8003ed4 <xTimerGenericCommand>
 8003fc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d114      	bne.n	8003ff6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60fb      	str	r3, [r7, #12]
}
 8003fde:	bf00      	nop
 8003fe0:	bf00      	nop
 8003fe2:	e7fd      	b.n	8003fe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	4798      	blx	r3
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000e44 	.word	0x20000e44

0800400c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004014:	f107 0308 	add.w	r3, r7, #8
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f859 	bl	80040d0 <prvGetNextExpireTime>
 800401e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4619      	mov	r1, r3
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f805 	bl	8004034 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800402a:	f000 f8d7 	bl	80041dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800402e:	bf00      	nop
 8004030:	e7f0      	b.n	8004014 <prvTimerTask+0x8>
	...

08004034 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800403e:	f7ff f937 	bl	80032b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f866 	bl	8004118 <prvSampleTimeNow>
 800404c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d130      	bne.n	80040b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <prvProcessTimerOrBlockTask+0x3c>
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	429a      	cmp	r2, r3
 8004060:	d806      	bhi.n	8004070 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004062:	f7ff f933 	bl	80032cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff81 	bl	8003f70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800406e:	e024      	b.n	80040ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <prvProcessTimerOrBlockTask+0x90>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <prvProcessTimerOrBlockTask+0x50>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <prvProcessTimerOrBlockTask+0x52>
 8004084:	2300      	movs	r3, #0
 8004086:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004088:	4b0f      	ldr	r3, [pc, #60]	@ (80040c8 <prvProcessTimerOrBlockTask+0x94>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	f7fe fe93 	bl	8002dc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800409a:	f7ff f917 	bl	80032cc <xTaskResumeAll>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80040a4:	4b09      	ldr	r3, [pc, #36]	@ (80040cc <prvProcessTimerOrBlockTask+0x98>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
}
 80040b4:	e001      	b.n	80040ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80040b6:	f7ff f909 	bl	80032cc <xTaskResumeAll>
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000e48 	.word	0x20000e48
 80040c8:	20000e4c 	.word	0x20000e4c
 80040cc:	e000ed04 	.word	0xe000ed04

080040d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004114 <prvGetNextExpireTime+0x44>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <prvGetNextExpireTime+0x16>
 80040e2:	2201      	movs	r2, #1
 80040e4:	e000      	b.n	80040e8 <prvGetNextExpireTime+0x18>
 80040e6:	2200      	movs	r2, #0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040f4:	4b07      	ldr	r3, [pc, #28]	@ (8004114 <prvGetNextExpireTime+0x44>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e001      	b.n	8004104 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000e44 	.word	0x20000e44

08004118 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004120:	f7ff f972 	bl	8003408 <xTaskGetTickCount>
 8004124:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <prvSampleTimeNow+0x3c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	429a      	cmp	r2, r3
 800412e:	d205      	bcs.n	800413c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004130:	f000 f93a 	bl	80043a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e002      	b.n	8004142 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004142:	4a04      	ldr	r2, [pc, #16]	@ (8004154 <prvSampleTimeNow+0x3c>)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004148:	68fb      	ldr	r3, [r7, #12]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000e54 	.word	0x20000e54

08004158 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	429a      	cmp	r2, r3
 800417c:	d812      	bhi.n	80041a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	1ad2      	subs	r2, r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800418c:	2301      	movs	r3, #1
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e01b      	b.n	80041ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004192:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <prvInsertTimerInActiveList+0x7c>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f7fd fef2 	bl	8001f86 <vListInsert>
 80041a2:	e012      	b.n	80041ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d206      	bcs.n	80041ba <prvInsertTimerInActiveList+0x62>
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d302      	bcc.n	80041ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e007      	b.n	80041ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041ba:	4b07      	ldr	r3, [pc, #28]	@ (80041d8 <prvInsertTimerInActiveList+0x80>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7fd fede 	bl	8001f86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80041ca:	697b      	ldr	r3, [r7, #20]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000e48 	.word	0x20000e48
 80041d8:	20000e44 	.word	0x20000e44

080041dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08e      	sub	sp, #56	@ 0x38
 80041e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041e2:	e0ce      	b.n	8004382 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da19      	bge.n	800421e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	3304      	adds	r3, #4
 80041ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	61fb      	str	r3, [r7, #28]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800420e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004214:	6850      	ldr	r0, [r2, #4]
 8004216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004218:	6892      	ldr	r2, [r2, #8]
 800421a:	4611      	mov	r1, r2
 800421c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f2c0 80ae 	blt.w	8004382 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd fede 	bl	8001ff8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800423c:	463b      	mov	r3, r7
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ff6a 	bl	8004118 <prvSampleTimeNow>
 8004244:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b09      	cmp	r3, #9
 800424a:	f200 8097 	bhi.w	800437c <prvProcessReceivedCommands+0x1a0>
 800424e:	a201      	add	r2, pc, #4	@ (adr r2, 8004254 <prvProcessReceivedCommands+0x78>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	0800427d 	.word	0x0800427d
 8004258:	0800427d 	.word	0x0800427d
 800425c:	0800427d 	.word	0x0800427d
 8004260:	080042f3 	.word	0x080042f3
 8004264:	08004307 	.word	0x08004307
 8004268:	08004353 	.word	0x08004353
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800427d 	.word	0x0800427d
 8004274:	080042f3 	.word	0x080042f3
 8004278:	08004307 	.word	0x08004307
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	18d1      	adds	r1, r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800429c:	f7ff ff5c 	bl	8004158 <prvInsertTimerInActiveList>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d06c      	beq.n	8004380 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d061      	beq.n	8004380 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	441a      	add	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2300      	movs	r3, #0
 80042ca:	2100      	movs	r1, #0
 80042cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042ce:	f7ff fe01 	bl	8003ed4 <xTimerGenericCommand>
 80042d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d152      	bne.n	8004380 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	61bb      	str	r3, [r7, #24]
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	e7fd      	b.n	80042ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004304:	e03d      	b.n	8004382 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	617b      	str	r3, [r7, #20]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	18d1      	adds	r1, r2, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800434c:	f7ff ff04 	bl	8004158 <prvInsertTimerInActiveList>
					break;
 8004350:	e017      	b.n	8004382 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004362:	f000 fbe9 	bl	8004b38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004366:	e00c      	b.n	8004382 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800437a:	e002      	b.n	8004382 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <prvProcessReceivedCommands+0x1a6>
					break;
 8004380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004382:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <prvProcessReceivedCommands+0x1c8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1d39      	adds	r1, r7, #4
 8004388:	2200      	movs	r2, #0
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe f9d4 	bl	8002738 <xQueueReceive>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	f47f af26 	bne.w	80041e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	3730      	adds	r7, #48	@ 0x30
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000e4c 	.word	0x20000e4c

080043a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ae:	e049      	b.n	8004444 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043b0:	4b2e      	ldr	r3, [pc, #184]	@ (800446c <prvSwitchTimerLists+0xc4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ba:	4b2c      	ldr	r3, [pc, #176]	@ (800446c <prvSwitchTimerLists+0xc4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fd fe15 	bl	8001ff8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02f      	beq.n	8004444 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d90e      	bls.n	8004414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <prvSwitchTimerLists+0xc4>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3304      	adds	r3, #4
 800440a:	4619      	mov	r1, r3
 800440c:	4610      	mov	r0, r2
 800440e:	f7fd fdba 	bl	8001f86 <vListInsert>
 8004412:	e017      	b.n	8004444 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	2100      	movs	r1, #0
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff fd58 	bl	8003ed4 <xTimerGenericCommand>
 8004424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	603b      	str	r3, [r7, #0]
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004444:	4b09      	ldr	r3, [pc, #36]	@ (800446c <prvSwitchTimerLists+0xc4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1b0      	bne.n	80043b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800444e:	4b07      	ldr	r3, [pc, #28]	@ (800446c <prvSwitchTimerLists+0xc4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004454:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <prvSwitchTimerLists+0xc8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a04      	ldr	r2, [pc, #16]	@ (800446c <prvSwitchTimerLists+0xc4>)
 800445a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800445c:	4a04      	ldr	r2, [pc, #16]	@ (8004470 <prvSwitchTimerLists+0xc8>)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6013      	str	r3, [r2, #0]
}
 8004462:	bf00      	nop
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000e44 	.word	0x20000e44
 8004470:	20000e48 	.word	0x20000e48

08004474 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800447a:	f000 f96d 	bl	8004758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800447e:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <prvCheckForValidListAndQueue+0x60>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d120      	bne.n	80044c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004486:	4814      	ldr	r0, [pc, #80]	@ (80044d8 <prvCheckForValidListAndQueue+0x64>)
 8004488:	f7fd fd2c 	bl	8001ee4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800448c:	4813      	ldr	r0, [pc, #76]	@ (80044dc <prvCheckForValidListAndQueue+0x68>)
 800448e:	f7fd fd29 	bl	8001ee4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004492:	4b13      	ldr	r3, [pc, #76]	@ (80044e0 <prvCheckForValidListAndQueue+0x6c>)
 8004494:	4a10      	ldr	r2, [pc, #64]	@ (80044d8 <prvCheckForValidListAndQueue+0x64>)
 8004496:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004498:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <prvCheckForValidListAndQueue+0x70>)
 800449a:	4a10      	ldr	r2, [pc, #64]	@ (80044dc <prvCheckForValidListAndQueue+0x68>)
 800449c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800449e:	2300      	movs	r3, #0
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <prvCheckForValidListAndQueue+0x74>)
 80044a4:	4a11      	ldr	r2, [pc, #68]	@ (80044ec <prvCheckForValidListAndQueue+0x78>)
 80044a6:	2110      	movs	r1, #16
 80044a8:	200a      	movs	r0, #10
 80044aa:	f7fd fe39 	bl	8002120 <xQueueGenericCreateStatic>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4a08      	ldr	r2, [pc, #32]	@ (80044d4 <prvCheckForValidListAndQueue+0x60>)
 80044b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80044b4:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <prvCheckForValidListAndQueue+0x60>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <prvCheckForValidListAndQueue+0x60>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	490b      	ldr	r1, [pc, #44]	@ (80044f0 <prvCheckForValidListAndQueue+0x7c>)
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fc52 	bl	8002d6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044c8:	f000 f978 	bl	80047bc <vPortExitCritical>
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000e4c 	.word	0x20000e4c
 80044d8:	20000e1c 	.word	0x20000e1c
 80044dc:	20000e30 	.word	0x20000e30
 80044e0:	20000e44 	.word	0x20000e44
 80044e4:	20000e48 	.word	0x20000e48
 80044e8:	20000ef8 	.word	0x20000ef8
 80044ec:	20000e58 	.word	0x20000e58
 80044f0:	08007880 	.word	0x08007880

080044f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b04      	subs	r3, #4
 8004504:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800450c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b04      	subs	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 0201 	bic.w	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b04      	subs	r3, #4
 8004522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004524:	4a0c      	ldr	r2, [pc, #48]	@ (8004558 <pxPortInitialiseStack+0x64>)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3b14      	subs	r3, #20
 800452e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3b04      	subs	r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f06f 0202 	mvn.w	r2, #2
 8004542:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3b20      	subs	r3, #32
 8004548:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800454a:	68fb      	ldr	r3, [r7, #12]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	0800455d 	.word	0x0800455d

0800455c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004566:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <prvTaskExitError+0x58>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d00b      	beq.n	8004588 <prvTaskExitError+0x2c>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60fb      	str	r3, [r7, #12]
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <prvTaskExitError+0x28>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	60bb      	str	r3, [r7, #8]
}
 800459a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800459c:	bf00      	nop
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0fc      	beq.n	800459e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000010 	.word	0x20000010
	...

080045c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045c0:	4b07      	ldr	r3, [pc, #28]	@ (80045e0 <pxCurrentTCBConst2>)
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ca:	f380 8809 	msr	PSP, r0
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8811 	msr	BASEPRI, r0
 80045da:	4770      	bx	lr
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst2>:
 80045e0:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045e8:	4808      	ldr	r0, [pc, #32]	@ (800460c <prvPortStartFirstTask+0x24>)
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	6800      	ldr	r0, [r0, #0]
 80045ee:	f380 8808 	msr	MSP, r0
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8814 	msr	CONTROL, r0
 80045fa:	b662      	cpsie	i
 80045fc:	b661      	cpsie	f
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	df00      	svc	0
 8004608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800460a:	bf00      	nop
 800460c:	e000ed08 	.word	0xe000ed08

08004610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004616:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <xPortStartScheduler+0x124>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a47      	ldr	r2, [pc, #284]	@ (8004738 <xPortStartScheduler+0x128>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10b      	bne.n	8004638 <xPortStartScheduler+0x28>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004638:	4b3e      	ldr	r3, [pc, #248]	@ (8004734 <xPortStartScheduler+0x124>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a3f      	ldr	r2, [pc, #252]	@ (800473c <xPortStartScheduler+0x12c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10b      	bne.n	800465a <xPortStartScheduler+0x4a>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	613b      	str	r3, [r7, #16]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800465a:	4b39      	ldr	r3, [pc, #228]	@ (8004740 <xPortStartScheduler+0x130>)
 800465c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	22ff      	movs	r2, #255	@ 0xff
 800466a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b31      	ldr	r3, [pc, #196]	@ (8004744 <xPortStartScheduler+0x134>)
 8004680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004682:	4b31      	ldr	r3, [pc, #196]	@ (8004748 <xPortStartScheduler+0x138>)
 8004684:	2207      	movs	r2, #7
 8004686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004688:	e009      	b.n	800469e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800468a:	4b2f      	ldr	r3, [pc, #188]	@ (8004748 <xPortStartScheduler+0x138>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3b01      	subs	r3, #1
 8004690:	4a2d      	ldr	r2, [pc, #180]	@ (8004748 <xPortStartScheduler+0x138>)
 8004692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a6:	2b80      	cmp	r3, #128	@ 0x80
 80046a8:	d0ef      	beq.n	800468a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046aa:	4b27      	ldr	r3, [pc, #156]	@ (8004748 <xPortStartScheduler+0x138>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d00b      	beq.n	80046ce <xPortStartScheduler+0xbe>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60bb      	str	r3, [r7, #8]
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	e7fd      	b.n	80046ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004748 <xPortStartScheduler+0x138>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004748 <xPortStartScheduler+0x138>)
 80046d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004748 <xPortStartScheduler+0x138>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046e0:	4a19      	ldr	r2, [pc, #100]	@ (8004748 <xPortStartScheduler+0x138>)
 80046e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046ec:	4b17      	ldr	r3, [pc, #92]	@ (800474c <xPortStartScheduler+0x13c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a16      	ldr	r2, [pc, #88]	@ (800474c <xPortStartScheduler+0x13c>)
 80046f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046f8:	4b14      	ldr	r3, [pc, #80]	@ (800474c <xPortStartScheduler+0x13c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a13      	ldr	r2, [pc, #76]	@ (800474c <xPortStartScheduler+0x13c>)
 80046fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004704:	f000 f8da 	bl	80048bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004708:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <xPortStartScheduler+0x140>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800470e:	f000 f8f9 	bl	8004904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <xPortStartScheduler+0x144>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a0f      	ldr	r2, [pc, #60]	@ (8004754 <xPortStartScheduler+0x144>)
 8004718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800471c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800471e:	f7ff ff63 	bl	80045e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004722:	f7fe ff3b 	bl	800359c <vTaskSwitchContext>
	prvTaskExitError();
 8004726:	f7ff ff19 	bl	800455c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	e000ed00 	.word	0xe000ed00
 8004738:	410fc271 	.word	0x410fc271
 800473c:	410fc270 	.word	0x410fc270
 8004740:	e000e400 	.word	0xe000e400
 8004744:	20000f48 	.word	0x20000f48
 8004748:	20000f4c 	.word	0x20000f4c
 800474c:	e000ed20 	.word	0xe000ed20
 8004750:	20000010 	.word	0x20000010
 8004754:	e000ef34 	.word	0xe000ef34

08004758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <vPortEnterCritical+0x5c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	4a0e      	ldr	r2, [pc, #56]	@ (80047b4 <vPortEnterCritical+0x5c>)
 800477a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800477c:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <vPortEnterCritical+0x5c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d110      	bne.n	80047a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004784:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <vPortEnterCritical+0x60>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	603b      	str	r3, [r7, #0]
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	e7fd      	b.n	80047a2 <vPortEnterCritical+0x4a>
	}
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000010 	.word	0x20000010
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047c2:	4b12      	ldr	r3, [pc, #72]	@ (800480c <vPortExitCritical+0x50>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <vPortExitCritical+0x26>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	607b      	str	r3, [r7, #4]
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	e7fd      	b.n	80047de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047e2:	4b0a      	ldr	r3, [pc, #40]	@ (800480c <vPortExitCritical+0x50>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	4a08      	ldr	r2, [pc, #32]	@ (800480c <vPortExitCritical+0x50>)
 80047ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <vPortExitCritical+0x50>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <vPortExitCritical+0x44>
 80047f4:	2300      	movs	r3, #0
 80047f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f383 8811 	msr	BASEPRI, r3
}
 80047fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	20000010 	.word	0x20000010

08004810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004810:	f3ef 8009 	mrs	r0, PSP
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	4b15      	ldr	r3, [pc, #84]	@ (8004870 <pxCurrentTCBConst>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	f01e 0f10 	tst.w	lr, #16
 8004820:	bf08      	it	eq
 8004822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	6010      	str	r0, [r2, #0]
 800482c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004834:	f380 8811 	msr	BASEPRI, r0
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f7fe feac 	bl	800359c <vTaskSwitchContext>
 8004844:	f04f 0000 	mov.w	r0, #0
 8004848:	f380 8811 	msr	BASEPRI, r0
 800484c:	bc09      	pop	{r0, r3}
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	6808      	ldr	r0, [r1, #0]
 8004852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004856:	f01e 0f10 	tst.w	lr, #16
 800485a:	bf08      	it	eq
 800485c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004860:	f380 8809 	msr	PSP, r0
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	f3af 8000 	nop.w

08004870 <pxCurrentTCBConst>:
 8004870:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	607b      	str	r3, [r7, #4]
}
 8004890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004892:	f7fe fdc9 	bl	8003428 <xTaskIncrementTick>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800489c:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <xPortSysTickHandler+0x40>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	2300      	movs	r3, #0
 80048a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f383 8811 	msr	BASEPRI, r3
}
 80048ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <vPortSetupTimerInterrupt+0x34>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <vPortSetupTimerInterrupt+0x38>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <vPortSetupTimerInterrupt+0x3c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0a      	ldr	r2, [pc, #40]	@ (80048fc <vPortSetupTimerInterrupt+0x40>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	4a09      	ldr	r2, [pc, #36]	@ (8004900 <vPortSetupTimerInterrupt+0x44>)
 80048da:	3b01      	subs	r3, #1
 80048dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048de:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <vPortSetupTimerInterrupt+0x34>)
 80048e0:	2207      	movs	r2, #7
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000e010 	.word	0xe000e010
 80048f4:	e000e018 	.word	0xe000e018
 80048f8:	20000008 	.word	0x20000008
 80048fc:	10624dd3 	.word	0x10624dd3
 8004900:	e000e014 	.word	0xe000e014

08004904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004914 <vPortEnableVFP+0x10>
 8004908:	6801      	ldr	r1, [r0, #0]
 800490a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800490e:	6001      	str	r1, [r0, #0]
 8004910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004912:	bf00      	nop
 8004914:	e000ed88 	.word	0xe000ed88

08004918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800491e:	f3ef 8305 	mrs	r3, IPSR
 8004922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b0f      	cmp	r3, #15
 8004928:	d915      	bls.n	8004956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800492a:	4a18      	ldr	r2, [pc, #96]	@ (800498c <vPortValidateInterruptPriority+0x74>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004934:	4b16      	ldr	r3, [pc, #88]	@ (8004990 <vPortValidateInterruptPriority+0x78>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	7afa      	ldrb	r2, [r7, #11]
 800493a:	429a      	cmp	r2, r3
 800493c:	d20b      	bcs.n	8004956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	607b      	str	r3, [r7, #4]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004956:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <vPortValidateInterruptPriority+0x7c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800495e:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <vPortValidateInterruptPriority+0x80>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d90b      	bls.n	800497e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	603b      	str	r3, [r7, #0]
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	e7fd      	b.n	800497a <vPortValidateInterruptPriority+0x62>
	}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	e000e3f0 	.word	0xe000e3f0
 8004990:	20000f48 	.word	0x20000f48
 8004994:	e000ed0c 	.word	0xe000ed0c
 8004998:	20000f4c 	.word	0x20000f4c

0800499c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	@ 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049a8:	f7fe fc82 	bl	80032b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004b20 <pvPortMalloc+0x184>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049b4:	f000 f924 	bl	8004c00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b24 <pvPortMalloc+0x188>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4013      	ands	r3, r2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 8095 	bne.w	8004af0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01e      	beq.n	8004a0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80049cc:	2208      	movs	r2, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d015      	beq.n	8004a0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f023 0307 	bic.w	r3, r3, #7
 80049e4:	3308      	adds	r3, #8
 80049e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <pvPortMalloc+0x6e>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	617b      	str	r3, [r7, #20]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d06f      	beq.n	8004af0 <pvPortMalloc+0x154>
 8004a10:	4b45      	ldr	r3, [pc, #276]	@ (8004b28 <pvPortMalloc+0x18c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d86a      	bhi.n	8004af0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a1a:	4b44      	ldr	r3, [pc, #272]	@ (8004b2c <pvPortMalloc+0x190>)
 8004a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a1e:	4b43      	ldr	r3, [pc, #268]	@ (8004b2c <pvPortMalloc+0x190>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a24:	e004      	b.n	8004a30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d903      	bls.n	8004a42 <pvPortMalloc+0xa6>
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f1      	bne.n	8004a26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a42:	4b37      	ldr	r3, [pc, #220]	@ (8004b20 <pvPortMalloc+0x184>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d051      	beq.n	8004af0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2208      	movs	r2, #8
 8004a52:	4413      	add	r3, r2
 8004a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	2308      	movs	r3, #8
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d920      	bls.n	8004ab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4413      	add	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <pvPortMalloc+0xfc>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	613b      	str	r3, [r7, #16]
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004aaa:	69b8      	ldr	r0, [r7, #24]
 8004aac:	f000 f90a 	bl	8004cc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <pvPortMalloc+0x18c>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	4a1b      	ldr	r2, [pc, #108]	@ (8004b28 <pvPortMalloc+0x18c>)
 8004abc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004abe:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <pvPortMalloc+0x18c>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b30 <pvPortMalloc+0x194>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d203      	bcs.n	8004ad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aca:	4b17      	ldr	r3, [pc, #92]	@ (8004b28 <pvPortMalloc+0x18c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a18      	ldr	r2, [pc, #96]	@ (8004b30 <pvPortMalloc+0x194>)
 8004ad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <pvPortMalloc+0x188>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <pvPortMalloc+0x198>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	4a11      	ldr	r2, [pc, #68]	@ (8004b34 <pvPortMalloc+0x198>)
 8004aee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004af0:	f7fe fbec 	bl	80032cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <pvPortMalloc+0x17a>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	60fb      	str	r3, [r7, #12]
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	e7fd      	b.n	8004b12 <pvPortMalloc+0x176>
	return pvReturn;
 8004b16:	69fb      	ldr	r3, [r7, #28]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3728      	adds	r7, #40	@ 0x28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20004b58 	.word	0x20004b58
 8004b24:	20004b6c 	.word	0x20004b6c
 8004b28:	20004b5c 	.word	0x20004b5c
 8004b2c:	20004b50 	.word	0x20004b50
 8004b30:	20004b60 	.word	0x20004b60
 8004b34:	20004b64 	.word	0x20004b64

08004b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d04f      	beq.n	8004bea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	425b      	negs	r3, r3
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4413      	add	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	4b25      	ldr	r3, [pc, #148]	@ (8004bf4 <vPortFree+0xbc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <vPortFree+0x46>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60fb      	str	r3, [r7, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	e7fd      	b.n	8004b7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <vPortFree+0x66>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60bb      	str	r3, [r7, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4b14      	ldr	r3, [pc, #80]	@ (8004bf4 <vPortFree+0xbc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01e      	beq.n	8004bea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d11a      	bne.n	8004bea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <vPortFree+0xbc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	401a      	ands	r2, r3
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bc4:	f7fe fb74 	bl	80032b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <vPortFree+0xc0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	4a09      	ldr	r2, [pc, #36]	@ (8004bf8 <vPortFree+0xc0>)
 8004bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bd6:	6938      	ldr	r0, [r7, #16]
 8004bd8:	f000 f874 	bl	8004cc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004bdc:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <vPortFree+0xc4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	4a06      	ldr	r2, [pc, #24]	@ (8004bfc <vPortFree+0xc4>)
 8004be4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004be6:	f7fe fb71 	bl	80032cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bea:	bf00      	nop
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20004b6c 	.word	0x20004b6c
 8004bf8:	20004b5c 	.word	0x20004b5c
 8004bfc:	20004b68 	.word	0x20004b68

08004c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004c0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c0c:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <prvHeapInit+0xac>)
 8004c0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00c      	beq.n	8004c34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3307      	adds	r3, #7
 8004c1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0307 	bic.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cac <prvHeapInit+0xac>)
 8004c30:	4413      	add	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c38:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <prvHeapInit+0xb0>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb0 <prvHeapInit+0xb0>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0307 	bic.w	r3, r3, #7
 8004c5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a15      	ldr	r2, [pc, #84]	@ (8004cb4 <prvHeapInit+0xb4>)
 8004c60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c62:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <prvHeapInit+0xb4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c6a:	4b12      	ldr	r3, [pc, #72]	@ (8004cb4 <prvHeapInit+0xb4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c80:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <prvHeapInit+0xb4>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb8 <prvHeapInit+0xb8>)
 8004c8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4a09      	ldr	r2, [pc, #36]	@ (8004cbc <prvHeapInit+0xbc>)
 8004c96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <prvHeapInit+0xc0>)
 8004c9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000f50 	.word	0x20000f50
 8004cb0:	20004b50 	.word	0x20004b50
 8004cb4:	20004b58 	.word	0x20004b58
 8004cb8:	20004b60 	.word	0x20004b60
 8004cbc:	20004b5c 	.word	0x20004b5c
 8004cc0:	20004b6c 	.word	0x20004b6c

08004cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ccc:	4b28      	ldr	r3, [pc, #160]	@ (8004d70 <prvInsertBlockIntoFreeList+0xac>)
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e002      	b.n	8004cd8 <prvInsertBlockIntoFreeList+0x14>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d8f7      	bhi.n	8004cd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d108      	bne.n	8004d06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	441a      	add	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	441a      	add	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d118      	bne.n	8004d4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <prvInsertBlockIntoFreeList+0xb0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d00d      	beq.n	8004d42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	441a      	add	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e008      	b.n	8004d54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d42:	4b0c      	ldr	r3, [pc, #48]	@ (8004d74 <prvInsertBlockIntoFreeList+0xb0>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e003      	b.n	8004d54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d002      	beq.n	8004d62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20004b50 	.word	0x20004b50
 8004d74:	20004b58 	.word	0x20004b58

08004d78 <__cvt>:
 8004d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7c:	ec57 6b10 	vmov	r6, r7, d0
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	460c      	mov	r4, r1
 8004d84:	4619      	mov	r1, r3
 8004d86:	463b      	mov	r3, r7
 8004d88:	bfbb      	ittet	lt
 8004d8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d8e:	461f      	movlt	r7, r3
 8004d90:	2300      	movge	r3, #0
 8004d92:	232d      	movlt	r3, #45	@ 0x2d
 8004d94:	700b      	strb	r3, [r1, #0]
 8004d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d9c:	4691      	mov	r9, r2
 8004d9e:	f023 0820 	bic.w	r8, r3, #32
 8004da2:	bfbc      	itt	lt
 8004da4:	4632      	movlt	r2, r6
 8004da6:	4616      	movlt	r6, r2
 8004da8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dac:	d005      	beq.n	8004dba <__cvt+0x42>
 8004dae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004db2:	d100      	bne.n	8004db6 <__cvt+0x3e>
 8004db4:	3401      	adds	r4, #1
 8004db6:	2102      	movs	r1, #2
 8004db8:	e000      	b.n	8004dbc <__cvt+0x44>
 8004dba:	2103      	movs	r1, #3
 8004dbc:	ab03      	add	r3, sp, #12
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	ab02      	add	r3, sp, #8
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	ec47 6b10 	vmov	d0, r6, r7
 8004dc8:	4653      	mov	r3, sl
 8004dca:	4622      	mov	r2, r4
 8004dcc:	f000 ff4c 	bl	8005c68 <_dtoa_r>
 8004dd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	d119      	bne.n	8004e0c <__cvt+0x94>
 8004dd8:	f019 0f01 	tst.w	r9, #1
 8004ddc:	d00e      	beq.n	8004dfc <__cvt+0x84>
 8004dde:	eb00 0904 	add.w	r9, r0, r4
 8004de2:	2200      	movs	r2, #0
 8004de4:	2300      	movs	r3, #0
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb fe75 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dee:	b108      	cbz	r0, 8004df4 <__cvt+0x7c>
 8004df0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004df4:	2230      	movs	r2, #48	@ 0x30
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	454b      	cmp	r3, r9
 8004dfa:	d31e      	bcc.n	8004e3a <__cvt+0xc2>
 8004dfc:	9b03      	ldr	r3, [sp, #12]
 8004dfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e00:	1b5b      	subs	r3, r3, r5
 8004e02:	4628      	mov	r0, r5
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	b004      	add	sp, #16
 8004e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e10:	eb00 0904 	add.w	r9, r0, r4
 8004e14:	d1e5      	bne.n	8004de2 <__cvt+0x6a>
 8004e16:	7803      	ldrb	r3, [r0, #0]
 8004e18:	2b30      	cmp	r3, #48	@ 0x30
 8004e1a:	d10a      	bne.n	8004e32 <__cvt+0xba>
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2300      	movs	r3, #0
 8004e20:	4630      	mov	r0, r6
 8004e22:	4639      	mov	r1, r7
 8004e24:	f7fb fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e28:	b918      	cbnz	r0, 8004e32 <__cvt+0xba>
 8004e2a:	f1c4 0401 	rsb	r4, r4, #1
 8004e2e:	f8ca 4000 	str.w	r4, [sl]
 8004e32:	f8da 3000 	ldr.w	r3, [sl]
 8004e36:	4499      	add	r9, r3
 8004e38:	e7d3      	b.n	8004de2 <__cvt+0x6a>
 8004e3a:	1c59      	adds	r1, r3, #1
 8004e3c:	9103      	str	r1, [sp, #12]
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e7d9      	b.n	8004df6 <__cvt+0x7e>

08004e42 <__exponent>:
 8004e42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e44:	2900      	cmp	r1, #0
 8004e46:	bfba      	itte	lt
 8004e48:	4249      	neglt	r1, r1
 8004e4a:	232d      	movlt	r3, #45	@ 0x2d
 8004e4c:	232b      	movge	r3, #43	@ 0x2b
 8004e4e:	2909      	cmp	r1, #9
 8004e50:	7002      	strb	r2, [r0, #0]
 8004e52:	7043      	strb	r3, [r0, #1]
 8004e54:	dd29      	ble.n	8004eaa <__exponent+0x68>
 8004e56:	f10d 0307 	add.w	r3, sp, #7
 8004e5a:	461d      	mov	r5, r3
 8004e5c:	270a      	movs	r7, #10
 8004e5e:	461a      	mov	r2, r3
 8004e60:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e64:	fb07 1416 	mls	r4, r7, r6, r1
 8004e68:	3430      	adds	r4, #48	@ 0x30
 8004e6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e6e:	460c      	mov	r4, r1
 8004e70:	2c63      	cmp	r4, #99	@ 0x63
 8004e72:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e76:	4631      	mov	r1, r6
 8004e78:	dcf1      	bgt.n	8004e5e <__exponent+0x1c>
 8004e7a:	3130      	adds	r1, #48	@ 0x30
 8004e7c:	1e94      	subs	r4, r2, #2
 8004e7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e82:	1c41      	adds	r1, r0, #1
 8004e84:	4623      	mov	r3, r4
 8004e86:	42ab      	cmp	r3, r5
 8004e88:	d30a      	bcc.n	8004ea0 <__exponent+0x5e>
 8004e8a:	f10d 0309 	add.w	r3, sp, #9
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	42ac      	cmp	r4, r5
 8004e92:	bf88      	it	hi
 8004e94:	2300      	movhi	r3, #0
 8004e96:	3302      	adds	r3, #2
 8004e98:	4403      	add	r3, r0
 8004e9a:	1a18      	subs	r0, r3, r0
 8004e9c:	b003      	add	sp, #12
 8004e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ea4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ea8:	e7ed      	b.n	8004e86 <__exponent+0x44>
 8004eaa:	2330      	movs	r3, #48	@ 0x30
 8004eac:	3130      	adds	r1, #48	@ 0x30
 8004eae:	7083      	strb	r3, [r0, #2]
 8004eb0:	70c1      	strb	r1, [r0, #3]
 8004eb2:	1d03      	adds	r3, r0, #4
 8004eb4:	e7f1      	b.n	8004e9a <__exponent+0x58>
	...

08004eb8 <_printf_float>:
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	b08d      	sub	sp, #52	@ 0x34
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	4605      	mov	r5, r0
 8004eca:	f000 fdbd 	bl	8005a48 <_localeconv_r>
 8004ece:	6803      	ldr	r3, [r0, #0]
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fb f9d4 	bl	8000280 <strlen>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	930a      	str	r3, [sp, #40]	@ 0x28
 8004edc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee0:	9005      	str	r0, [sp, #20]
 8004ee2:	3307      	adds	r3, #7
 8004ee4:	f023 0307 	bic.w	r3, r3, #7
 8004ee8:	f103 0208 	add.w	r2, r3, #8
 8004eec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ef0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ef4:	f8c8 2000 	str.w	r2, [r8]
 8004ef8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004efc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f00:	9307      	str	r3, [sp, #28]
 8004f02:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f0e:	4b9c      	ldr	r3, [pc, #624]	@ (8005180 <_printf_float+0x2c8>)
 8004f10:	f04f 32ff 	mov.w	r2, #4294967295
 8004f14:	f7fb fe12 	bl	8000b3c <__aeabi_dcmpun>
 8004f18:	bb70      	cbnz	r0, 8004f78 <_printf_float+0xc0>
 8004f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f1e:	4b98      	ldr	r3, [pc, #608]	@ (8005180 <_printf_float+0x2c8>)
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295
 8004f24:	f7fb fdec 	bl	8000b00 <__aeabi_dcmple>
 8004f28:	bb30      	cbnz	r0, 8004f78 <_printf_float+0xc0>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4640      	mov	r0, r8
 8004f30:	4649      	mov	r1, r9
 8004f32:	f7fb fddb 	bl	8000aec <__aeabi_dcmplt>
 8004f36:	b110      	cbz	r0, 8004f3e <_printf_float+0x86>
 8004f38:	232d      	movs	r3, #45	@ 0x2d
 8004f3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f3e:	4a91      	ldr	r2, [pc, #580]	@ (8005184 <_printf_float+0x2cc>)
 8004f40:	4b91      	ldr	r3, [pc, #580]	@ (8005188 <_printf_float+0x2d0>)
 8004f42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f46:	bf8c      	ite	hi
 8004f48:	4690      	movhi	r8, r2
 8004f4a:	4698      	movls	r8, r3
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	6123      	str	r3, [r4, #16]
 8004f50:	f02b 0304 	bic.w	r3, fp, #4
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	f04f 0900 	mov.w	r9, #0
 8004f5a:	9700      	str	r7, [sp, #0]
 8004f5c:	4633      	mov	r3, r6
 8004f5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f60:	4621      	mov	r1, r4
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 f9d2 	bl	800530c <_printf_common>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f040 808d 	bne.w	8005088 <_printf_float+0x1d0>
 8004f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f72:	b00d      	add	sp, #52	@ 0x34
 8004f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	4649      	mov	r1, r9
 8004f80:	f7fb fddc 	bl	8000b3c <__aeabi_dcmpun>
 8004f84:	b140      	cbz	r0, 8004f98 <_printf_float+0xe0>
 8004f86:	464b      	mov	r3, r9
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfbc      	itt	lt
 8004f8c:	232d      	movlt	r3, #45	@ 0x2d
 8004f8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f92:	4a7e      	ldr	r2, [pc, #504]	@ (800518c <_printf_float+0x2d4>)
 8004f94:	4b7e      	ldr	r3, [pc, #504]	@ (8005190 <_printf_float+0x2d8>)
 8004f96:	e7d4      	b.n	8004f42 <_printf_float+0x8a>
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f9e:	9206      	str	r2, [sp, #24]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	d13b      	bne.n	800501c <_printf_float+0x164>
 8004fa4:	2306      	movs	r3, #6
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004fac:	2300      	movs	r3, #0
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	9303      	str	r3, [sp, #12]
 8004fb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8004fb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004fb8:	ab09      	add	r3, sp, #36	@ 0x24
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	6861      	ldr	r1, [r4, #4]
 8004fbe:	ec49 8b10 	vmov	d0, r8, r9
 8004fc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f7ff fed6 	bl	8004d78 <__cvt>
 8004fcc:	9b06      	ldr	r3, [sp, #24]
 8004fce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fd0:	2b47      	cmp	r3, #71	@ 0x47
 8004fd2:	4680      	mov	r8, r0
 8004fd4:	d129      	bne.n	800502a <_printf_float+0x172>
 8004fd6:	1cc8      	adds	r0, r1, #3
 8004fd8:	db02      	blt.n	8004fe0 <_printf_float+0x128>
 8004fda:	6863      	ldr	r3, [r4, #4]
 8004fdc:	4299      	cmp	r1, r3
 8004fde:	dd41      	ble.n	8005064 <_printf_float+0x1ac>
 8004fe0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fe4:	fa5f fa8a 	uxtb.w	sl, sl
 8004fe8:	3901      	subs	r1, #1
 8004fea:	4652      	mov	r2, sl
 8004fec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ff0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ff2:	f7ff ff26 	bl	8004e42 <__exponent>
 8004ff6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ff8:	1813      	adds	r3, r2, r0
 8004ffa:	2a01      	cmp	r2, #1
 8004ffc:	4681      	mov	r9, r0
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	dc02      	bgt.n	8005008 <_printf_float+0x150>
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	07d2      	lsls	r2, r2, #31
 8005006:	d501      	bpl.n	800500c <_printf_float+0x154>
 8005008:	3301      	adds	r3, #1
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0a2      	beq.n	8004f5a <_printf_float+0xa2>
 8005014:	232d      	movs	r3, #45	@ 0x2d
 8005016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501a:	e79e      	b.n	8004f5a <_printf_float+0xa2>
 800501c:	9a06      	ldr	r2, [sp, #24]
 800501e:	2a47      	cmp	r2, #71	@ 0x47
 8005020:	d1c2      	bne.n	8004fa8 <_printf_float+0xf0>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1c0      	bne.n	8004fa8 <_printf_float+0xf0>
 8005026:	2301      	movs	r3, #1
 8005028:	e7bd      	b.n	8004fa6 <_printf_float+0xee>
 800502a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800502e:	d9db      	bls.n	8004fe8 <_printf_float+0x130>
 8005030:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005034:	d118      	bne.n	8005068 <_printf_float+0x1b0>
 8005036:	2900      	cmp	r1, #0
 8005038:	6863      	ldr	r3, [r4, #4]
 800503a:	dd0b      	ble.n	8005054 <_printf_float+0x19c>
 800503c:	6121      	str	r1, [r4, #16]
 800503e:	b913      	cbnz	r3, 8005046 <_printf_float+0x18e>
 8005040:	6822      	ldr	r2, [r4, #0]
 8005042:	07d0      	lsls	r0, r2, #31
 8005044:	d502      	bpl.n	800504c <_printf_float+0x194>
 8005046:	3301      	adds	r3, #1
 8005048:	440b      	add	r3, r1
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800504e:	f04f 0900 	mov.w	r9, #0
 8005052:	e7db      	b.n	800500c <_printf_float+0x154>
 8005054:	b913      	cbnz	r3, 800505c <_printf_float+0x1a4>
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	07d2      	lsls	r2, r2, #31
 800505a:	d501      	bpl.n	8005060 <_printf_float+0x1a8>
 800505c:	3302      	adds	r3, #2
 800505e:	e7f4      	b.n	800504a <_printf_float+0x192>
 8005060:	2301      	movs	r3, #1
 8005062:	e7f2      	b.n	800504a <_printf_float+0x192>
 8005064:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800506a:	4299      	cmp	r1, r3
 800506c:	db05      	blt.n	800507a <_printf_float+0x1c2>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	6121      	str	r1, [r4, #16]
 8005072:	07d8      	lsls	r0, r3, #31
 8005074:	d5ea      	bpl.n	800504c <_printf_float+0x194>
 8005076:	1c4b      	adds	r3, r1, #1
 8005078:	e7e7      	b.n	800504a <_printf_float+0x192>
 800507a:	2900      	cmp	r1, #0
 800507c:	bfd4      	ite	le
 800507e:	f1c1 0202 	rsble	r2, r1, #2
 8005082:	2201      	movgt	r2, #1
 8005084:	4413      	add	r3, r2
 8005086:	e7e0      	b.n	800504a <_printf_float+0x192>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	055a      	lsls	r2, r3, #21
 800508c:	d407      	bmi.n	800509e <_printf_float+0x1e6>
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	4642      	mov	r2, r8
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	d12b      	bne.n	80050f4 <_printf_float+0x23c>
 800509c:	e767      	b.n	8004f6e <_printf_float+0xb6>
 800509e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050a2:	f240 80dd 	bls.w	8005260 <_printf_float+0x3a8>
 80050a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050aa:	2200      	movs	r2, #0
 80050ac:	2300      	movs	r3, #0
 80050ae:	f7fb fd13 	bl	8000ad8 <__aeabi_dcmpeq>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d033      	beq.n	800511e <_printf_float+0x266>
 80050b6:	4a37      	ldr	r2, [pc, #220]	@ (8005194 <_printf_float+0x2dc>)
 80050b8:	2301      	movs	r3, #1
 80050ba:	4631      	mov	r1, r6
 80050bc:	4628      	mov	r0, r5
 80050be:	47b8      	blx	r7
 80050c0:	3001      	adds	r0, #1
 80050c2:	f43f af54 	beq.w	8004f6e <_printf_float+0xb6>
 80050c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80050ca:	4543      	cmp	r3, r8
 80050cc:	db02      	blt.n	80050d4 <_printf_float+0x21c>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	07d8      	lsls	r0, r3, #31
 80050d2:	d50f      	bpl.n	80050f4 <_printf_float+0x23c>
 80050d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050d8:	4631      	mov	r1, r6
 80050da:	4628      	mov	r0, r5
 80050dc:	47b8      	blx	r7
 80050de:	3001      	adds	r0, #1
 80050e0:	f43f af45 	beq.w	8004f6e <_printf_float+0xb6>
 80050e4:	f04f 0900 	mov.w	r9, #0
 80050e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80050ec:	f104 0a1a 	add.w	sl, r4, #26
 80050f0:	45c8      	cmp	r8, r9
 80050f2:	dc09      	bgt.n	8005108 <_printf_float+0x250>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	079b      	lsls	r3, r3, #30
 80050f8:	f100 8103 	bmi.w	8005302 <_printf_float+0x44a>
 80050fc:	68e0      	ldr	r0, [r4, #12]
 80050fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005100:	4298      	cmp	r0, r3
 8005102:	bfb8      	it	lt
 8005104:	4618      	movlt	r0, r3
 8005106:	e734      	b.n	8004f72 <_printf_float+0xba>
 8005108:	2301      	movs	r3, #1
 800510a:	4652      	mov	r2, sl
 800510c:	4631      	mov	r1, r6
 800510e:	4628      	mov	r0, r5
 8005110:	47b8      	blx	r7
 8005112:	3001      	adds	r0, #1
 8005114:	f43f af2b 	beq.w	8004f6e <_printf_float+0xb6>
 8005118:	f109 0901 	add.w	r9, r9, #1
 800511c:	e7e8      	b.n	80050f0 <_printf_float+0x238>
 800511e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	dc39      	bgt.n	8005198 <_printf_float+0x2e0>
 8005124:	4a1b      	ldr	r2, [pc, #108]	@ (8005194 <_printf_float+0x2dc>)
 8005126:	2301      	movs	r3, #1
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	f43f af1d 	beq.w	8004f6e <_printf_float+0xb6>
 8005134:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005138:	ea59 0303 	orrs.w	r3, r9, r3
 800513c:	d102      	bne.n	8005144 <_printf_float+0x28c>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	07d9      	lsls	r1, r3, #31
 8005142:	d5d7      	bpl.n	80050f4 <_printf_float+0x23c>
 8005144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	f43f af0d 	beq.w	8004f6e <_printf_float+0xb6>
 8005154:	f04f 0a00 	mov.w	sl, #0
 8005158:	f104 0b1a 	add.w	fp, r4, #26
 800515c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800515e:	425b      	negs	r3, r3
 8005160:	4553      	cmp	r3, sl
 8005162:	dc01      	bgt.n	8005168 <_printf_float+0x2b0>
 8005164:	464b      	mov	r3, r9
 8005166:	e793      	b.n	8005090 <_printf_float+0x1d8>
 8005168:	2301      	movs	r3, #1
 800516a:	465a      	mov	r2, fp
 800516c:	4631      	mov	r1, r6
 800516e:	4628      	mov	r0, r5
 8005170:	47b8      	blx	r7
 8005172:	3001      	adds	r0, #1
 8005174:	f43f aefb 	beq.w	8004f6e <_printf_float+0xb6>
 8005178:	f10a 0a01 	add.w	sl, sl, #1
 800517c:	e7ee      	b.n	800515c <_printf_float+0x2a4>
 800517e:	bf00      	nop
 8005180:	7fefffff 	.word	0x7fefffff
 8005184:	08007889 	.word	0x08007889
 8005188:	08007885 	.word	0x08007885
 800518c:	08007891 	.word	0x08007891
 8005190:	0800788d 	.word	0x0800788d
 8005194:	08007895 	.word	0x08007895
 8005198:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800519a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800519e:	4553      	cmp	r3, sl
 80051a0:	bfa8      	it	ge
 80051a2:	4653      	movge	r3, sl
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	4699      	mov	r9, r3
 80051a8:	dc36      	bgt.n	8005218 <_printf_float+0x360>
 80051aa:	f04f 0b00 	mov.w	fp, #0
 80051ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051b2:	f104 021a 	add.w	r2, r4, #26
 80051b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051b8:	9306      	str	r3, [sp, #24]
 80051ba:	eba3 0309 	sub.w	r3, r3, r9
 80051be:	455b      	cmp	r3, fp
 80051c0:	dc31      	bgt.n	8005226 <_printf_float+0x36e>
 80051c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c4:	459a      	cmp	sl, r3
 80051c6:	dc3a      	bgt.n	800523e <_printf_float+0x386>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	07da      	lsls	r2, r3, #31
 80051cc:	d437      	bmi.n	800523e <_printf_float+0x386>
 80051ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d0:	ebaa 0903 	sub.w	r9, sl, r3
 80051d4:	9b06      	ldr	r3, [sp, #24]
 80051d6:	ebaa 0303 	sub.w	r3, sl, r3
 80051da:	4599      	cmp	r9, r3
 80051dc:	bfa8      	it	ge
 80051de:	4699      	movge	r9, r3
 80051e0:	f1b9 0f00 	cmp.w	r9, #0
 80051e4:	dc33      	bgt.n	800524e <_printf_float+0x396>
 80051e6:	f04f 0800 	mov.w	r8, #0
 80051ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ee:	f104 0b1a 	add.w	fp, r4, #26
 80051f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f4:	ebaa 0303 	sub.w	r3, sl, r3
 80051f8:	eba3 0309 	sub.w	r3, r3, r9
 80051fc:	4543      	cmp	r3, r8
 80051fe:	f77f af79 	ble.w	80050f4 <_printf_float+0x23c>
 8005202:	2301      	movs	r3, #1
 8005204:	465a      	mov	r2, fp
 8005206:	4631      	mov	r1, r6
 8005208:	4628      	mov	r0, r5
 800520a:	47b8      	blx	r7
 800520c:	3001      	adds	r0, #1
 800520e:	f43f aeae 	beq.w	8004f6e <_printf_float+0xb6>
 8005212:	f108 0801 	add.w	r8, r8, #1
 8005216:	e7ec      	b.n	80051f2 <_printf_float+0x33a>
 8005218:	4642      	mov	r2, r8
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	d1c2      	bne.n	80051aa <_printf_float+0x2f2>
 8005224:	e6a3      	b.n	8004f6e <_printf_float+0xb6>
 8005226:	2301      	movs	r3, #1
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	9206      	str	r2, [sp, #24]
 800522e:	47b8      	blx	r7
 8005230:	3001      	adds	r0, #1
 8005232:	f43f ae9c 	beq.w	8004f6e <_printf_float+0xb6>
 8005236:	9a06      	ldr	r2, [sp, #24]
 8005238:	f10b 0b01 	add.w	fp, fp, #1
 800523c:	e7bb      	b.n	80051b6 <_printf_float+0x2fe>
 800523e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	d1c0      	bne.n	80051ce <_printf_float+0x316>
 800524c:	e68f      	b.n	8004f6e <_printf_float+0xb6>
 800524e:	9a06      	ldr	r2, [sp, #24]
 8005250:	464b      	mov	r3, r9
 8005252:	4442      	add	r2, r8
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	d1c3      	bne.n	80051e6 <_printf_float+0x32e>
 800525e:	e686      	b.n	8004f6e <_printf_float+0xb6>
 8005260:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005264:	f1ba 0f01 	cmp.w	sl, #1
 8005268:	dc01      	bgt.n	800526e <_printf_float+0x3b6>
 800526a:	07db      	lsls	r3, r3, #31
 800526c:	d536      	bpl.n	80052dc <_printf_float+0x424>
 800526e:	2301      	movs	r3, #1
 8005270:	4642      	mov	r2, r8
 8005272:	4631      	mov	r1, r6
 8005274:	4628      	mov	r0, r5
 8005276:	47b8      	blx	r7
 8005278:	3001      	adds	r0, #1
 800527a:	f43f ae78 	beq.w	8004f6e <_printf_float+0xb6>
 800527e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f ae70 	beq.w	8004f6e <_printf_float+0xb6>
 800528e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005292:	2200      	movs	r2, #0
 8005294:	2300      	movs	r3, #0
 8005296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800529a:	f7fb fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800529e:	b9c0      	cbnz	r0, 80052d2 <_printf_float+0x41a>
 80052a0:	4653      	mov	r3, sl
 80052a2:	f108 0201 	add.w	r2, r8, #1
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	d10c      	bne.n	80052ca <_printf_float+0x412>
 80052b0:	e65d      	b.n	8004f6e <_printf_float+0xb6>
 80052b2:	2301      	movs	r3, #1
 80052b4:	465a      	mov	r2, fp
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	f43f ae56 	beq.w	8004f6e <_printf_float+0xb6>
 80052c2:	f108 0801 	add.w	r8, r8, #1
 80052c6:	45d0      	cmp	r8, sl
 80052c8:	dbf3      	blt.n	80052b2 <_printf_float+0x3fa>
 80052ca:	464b      	mov	r3, r9
 80052cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052d0:	e6df      	b.n	8005092 <_printf_float+0x1da>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	f104 0b1a 	add.w	fp, r4, #26
 80052da:	e7f4      	b.n	80052c6 <_printf_float+0x40e>
 80052dc:	2301      	movs	r3, #1
 80052de:	4642      	mov	r2, r8
 80052e0:	e7e1      	b.n	80052a6 <_printf_float+0x3ee>
 80052e2:	2301      	movs	r3, #1
 80052e4:	464a      	mov	r2, r9
 80052e6:	4631      	mov	r1, r6
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b8      	blx	r7
 80052ec:	3001      	adds	r0, #1
 80052ee:	f43f ae3e 	beq.w	8004f6e <_printf_float+0xb6>
 80052f2:	f108 0801 	add.w	r8, r8, #1
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052fa:	1a5b      	subs	r3, r3, r1
 80052fc:	4543      	cmp	r3, r8
 80052fe:	dcf0      	bgt.n	80052e2 <_printf_float+0x42a>
 8005300:	e6fc      	b.n	80050fc <_printf_float+0x244>
 8005302:	f04f 0800 	mov.w	r8, #0
 8005306:	f104 0919 	add.w	r9, r4, #25
 800530a:	e7f4      	b.n	80052f6 <_printf_float+0x43e>

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4698      	mov	r8, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800531c:	4293      	cmp	r3, r2
 800531e:	bfb8      	it	lt
 8005320:	4613      	movlt	r3, r2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005328:	4607      	mov	r7, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc26      	bgt.n	80053a2 <_printf_common+0x96>
 8005354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005358:	6822      	ldr	r2, [r4, #0]
 800535a:	3b00      	subs	r3, #0
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42b      	bmi.n	80053bc <_printf_common+0xb0>
 8005364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005368:	4641      	mov	r1, r8
 800536a:	4638      	mov	r0, r7
 800536c:	47c8      	blx	r9
 800536e:	3001      	adds	r0, #1
 8005370:	d01e      	beq.n	80053b0 <_printf_common+0xa4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf02      	ittt	eq
 800537e:	68e5      	ldreq	r5, [r4, #12]
 8005380:	6833      	ldreq	r3, [r6, #0]
 8005382:	1aed      	subeq	r5, r5, r3
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	2600      	movs	r6, #0
 8005398:	341a      	adds	r4, #26
 800539a:	42b5      	cmp	r5, r6
 800539c:	d11a      	bne.n	80053d4 <_printf_common+0xc8>
 800539e:	2000      	movs	r0, #0
 80053a0:	e008      	b.n	80053b4 <_printf_common+0xa8>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4641      	mov	r1, r8
 80053a8:	4638      	mov	r0, r7
 80053aa:	47c8      	blx	r9
 80053ac:	3001      	adds	r0, #1
 80053ae:	d103      	bne.n	80053b8 <_printf_common+0xac>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7c6      	b.n	800534a <_printf_common+0x3e>
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	2030      	movs	r0, #48	@ 0x30
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053c6:	4422      	add	r2, r4
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053d0:	3302      	adds	r3, #2
 80053d2:	e7c7      	b.n	8005364 <_printf_common+0x58>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4622      	mov	r2, r4
 80053d8:	4641      	mov	r1, r8
 80053da:	4638      	mov	r0, r7
 80053dc:	47c8      	blx	r9
 80053de:	3001      	adds	r0, #1
 80053e0:	d0e6      	beq.n	80053b0 <_printf_common+0xa4>
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7d9      	b.n	800539a <_printf_common+0x8e>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053f0:	2f78      	cmp	r7, #120	@ 0x78
 80053f2:	4691      	mov	r9, r2
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	469a      	mov	sl, r3
 80053fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	@ 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d1 	beq.w	80055ac <_printf_i+0x1c4>
 800540a:	2f58      	cmp	r7, #88	@ 0x58
 800540c:	f000 80b8 	beq.w	8005580 <_printf_i+0x198>
 8005410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	@ (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	08005593 	.word	0x08005593
 8005458:	080054bf 	.word	0x080054bf
 800545c:	0800554d 	.word	0x0800554d
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055b5 	.word	0x080055b5
 800546c:	08005411 	.word	0x08005411
 8005470:	080054bf 	.word	0x080054bf
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	08005555 	.word	0x08005555
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e09c      	b.n	80055ce <_printf_i+0x1e6>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	0606      	lsls	r6, r0, #24
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0xbc>
 80054a0:	681d      	ldr	r5, [r3, #0]
 80054a2:	e003      	b.n	80054ac <_printf_i+0xc4>
 80054a4:	0645      	lsls	r5, r0, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0xb8>
 80054a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	da03      	bge.n	80054b8 <_printf_i+0xd0>
 80054b0:	232d      	movs	r3, #45	@ 0x2d
 80054b2:	426d      	negs	r5, r5
 80054b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b8:	4858      	ldr	r0, [pc, #352]	@ (800561c <_printf_i+0x234>)
 80054ba:	230a      	movs	r3, #10
 80054bc:	e011      	b.n	80054e2 <_printf_i+0xfa>
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	0608      	lsls	r0, r1, #24
 80054c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c8:	d402      	bmi.n	80054d0 <_printf_i+0xe8>
 80054ca:	0649      	lsls	r1, r1, #25
 80054cc:	bf48      	it	mi
 80054ce:	b2ad      	uxthmi	r5, r5
 80054d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054d2:	4852      	ldr	r0, [pc, #328]	@ (800561c <_printf_i+0x234>)
 80054d4:	6033      	str	r3, [r6, #0]
 80054d6:	bf14      	ite	ne
 80054d8:	230a      	movne	r3, #10
 80054da:	2308      	moveq	r3, #8
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054e2:	6866      	ldr	r6, [r4, #4]
 80054e4:	60a6      	str	r6, [r4, #8]
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	db05      	blt.n	80054f6 <_printf_i+0x10e>
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	432e      	orrs	r6, r5
 80054ee:	f021 0104 	bic.w	r1, r1, #4
 80054f2:	6021      	str	r1, [r4, #0]
 80054f4:	d04b      	beq.n	800558e <_printf_i+0x1a6>
 80054f6:	4616      	mov	r6, r2
 80054f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005500:	5dc7      	ldrb	r7, [r0, r7]
 8005502:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005506:	462f      	mov	r7, r5
 8005508:	42bb      	cmp	r3, r7
 800550a:	460d      	mov	r5, r1
 800550c:	d9f4      	bls.n	80054f8 <_printf_i+0x110>
 800550e:	2b08      	cmp	r3, #8
 8005510:	d10b      	bne.n	800552a <_printf_i+0x142>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	07df      	lsls	r7, r3, #31
 8005516:	d508      	bpl.n	800552a <_printf_i+0x142>
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	6861      	ldr	r1, [r4, #4]
 800551c:	4299      	cmp	r1, r3
 800551e:	bfde      	ittt	le
 8005520:	2330      	movle	r3, #48	@ 0x30
 8005522:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005526:	f106 36ff 	addle.w	r6, r6, #4294967295
 800552a:	1b92      	subs	r2, r2, r6
 800552c:	6122      	str	r2, [r4, #16]
 800552e:	f8cd a000 	str.w	sl, [sp]
 8005532:	464b      	mov	r3, r9
 8005534:	aa03      	add	r2, sp, #12
 8005536:	4621      	mov	r1, r4
 8005538:	4640      	mov	r0, r8
 800553a:	f7ff fee7 	bl	800530c <_printf_common>
 800553e:	3001      	adds	r0, #1
 8005540:	d14a      	bne.n	80055d8 <_printf_i+0x1f0>
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	b004      	add	sp, #16
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	f043 0320 	orr.w	r3, r3, #32
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	4832      	ldr	r0, [pc, #200]	@ (8005620 <_printf_i+0x238>)
 8005556:	2778      	movs	r7, #120	@ 0x78
 8005558:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	6831      	ldr	r1, [r6, #0]
 8005560:	061f      	lsls	r7, r3, #24
 8005562:	f851 5b04 	ldr.w	r5, [r1], #4
 8005566:	d402      	bmi.n	800556e <_printf_i+0x186>
 8005568:	065f      	lsls	r7, r3, #25
 800556a:	bf48      	it	mi
 800556c:	b2ad      	uxthmi	r5, r5
 800556e:	6031      	str	r1, [r6, #0]
 8005570:	07d9      	lsls	r1, r3, #31
 8005572:	bf44      	itt	mi
 8005574:	f043 0320 	orrmi.w	r3, r3, #32
 8005578:	6023      	strmi	r3, [r4, #0]
 800557a:	b11d      	cbz	r5, 8005584 <_printf_i+0x19c>
 800557c:	2310      	movs	r3, #16
 800557e:	e7ad      	b.n	80054dc <_printf_i+0xf4>
 8005580:	4826      	ldr	r0, [pc, #152]	@ (800561c <_printf_i+0x234>)
 8005582:	e7e9      	b.n	8005558 <_printf_i+0x170>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	e7f6      	b.n	800557c <_printf_i+0x194>
 800558e:	4616      	mov	r6, r2
 8005590:	e7bd      	b.n	800550e <_printf_i+0x126>
 8005592:	6833      	ldr	r3, [r6, #0]
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	6961      	ldr	r1, [r4, #20]
 8005598:	1d18      	adds	r0, r3, #4
 800559a:	6030      	str	r0, [r6, #0]
 800559c:	062e      	lsls	r6, r5, #24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0x1be>
 80055a2:	6019      	str	r1, [r3, #0]
 80055a4:	e002      	b.n	80055ac <_printf_i+0x1c4>
 80055a6:	0668      	lsls	r0, r5, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0x1ba>
 80055aa:	8019      	strh	r1, [r3, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	4616      	mov	r6, r2
 80055b2:	e7bc      	b.n	800552e <_printf_i+0x146>
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	6032      	str	r2, [r6, #0]
 80055ba:	681e      	ldr	r6, [r3, #0]
 80055bc:	6862      	ldr	r2, [r4, #4]
 80055be:	2100      	movs	r1, #0
 80055c0:	4630      	mov	r0, r6
 80055c2:	f7fa fe0d 	bl	80001e0 <memchr>
 80055c6:	b108      	cbz	r0, 80055cc <_printf_i+0x1e4>
 80055c8:	1b80      	subs	r0, r0, r6
 80055ca:	6060      	str	r0, [r4, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	2300      	movs	r3, #0
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d6:	e7aa      	b.n	800552e <_printf_i+0x146>
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	4632      	mov	r2, r6
 80055dc:	4649      	mov	r1, r9
 80055de:	4640      	mov	r0, r8
 80055e0:	47d0      	blx	sl
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0ad      	beq.n	8005542 <_printf_i+0x15a>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d413      	bmi.n	8005614 <_printf_i+0x22c>
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	4298      	cmp	r0, r3
 80055f2:	bfb8      	it	lt
 80055f4:	4618      	movlt	r0, r3
 80055f6:	e7a6      	b.n	8005546 <_printf_i+0x15e>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4632      	mov	r2, r6
 80055fc:	4649      	mov	r1, r9
 80055fe:	4640      	mov	r0, r8
 8005600:	47d0      	blx	sl
 8005602:	3001      	adds	r0, #1
 8005604:	d09d      	beq.n	8005542 <_printf_i+0x15a>
 8005606:	3501      	adds	r5, #1
 8005608:	68e3      	ldr	r3, [r4, #12]
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	42ab      	cmp	r3, r5
 8005610:	dcf2      	bgt.n	80055f8 <_printf_i+0x210>
 8005612:	e7eb      	b.n	80055ec <_printf_i+0x204>
 8005614:	2500      	movs	r5, #0
 8005616:	f104 0619 	add.w	r6, r4, #25
 800561a:	e7f5      	b.n	8005608 <_printf_i+0x220>
 800561c:	08007897 	.word	0x08007897
 8005620:	080078a8 	.word	0x080078a8

08005624 <std>:
 8005624:	2300      	movs	r3, #0
 8005626:	b510      	push	{r4, lr}
 8005628:	4604      	mov	r4, r0
 800562a:	e9c0 3300 	strd	r3, r3, [r0]
 800562e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005632:	6083      	str	r3, [r0, #8]
 8005634:	8181      	strh	r1, [r0, #12]
 8005636:	6643      	str	r3, [r0, #100]	@ 0x64
 8005638:	81c2      	strh	r2, [r0, #14]
 800563a:	6183      	str	r3, [r0, #24]
 800563c:	4619      	mov	r1, r3
 800563e:	2208      	movs	r2, #8
 8005640:	305c      	adds	r0, #92	@ 0x5c
 8005642:	f000 f9f9 	bl	8005a38 <memset>
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <std+0x58>)
 8005648:	6263      	str	r3, [r4, #36]	@ 0x24
 800564a:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <std+0x5c>)
 800564c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <std+0x60>)
 8005650:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005652:	4b0d      	ldr	r3, [pc, #52]	@ (8005688 <std+0x64>)
 8005654:	6323      	str	r3, [r4, #48]	@ 0x30
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <std+0x68>)
 8005658:	6224      	str	r4, [r4, #32]
 800565a:	429c      	cmp	r4, r3
 800565c:	d006      	beq.n	800566c <std+0x48>
 800565e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005662:	4294      	cmp	r4, r2
 8005664:	d002      	beq.n	800566c <std+0x48>
 8005666:	33d0      	adds	r3, #208	@ 0xd0
 8005668:	429c      	cmp	r4, r3
 800566a:	d105      	bne.n	8005678 <std+0x54>
 800566c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005674:	f000 ba5c 	b.w	8005b30 <__retarget_lock_init_recursive>
 8005678:	bd10      	pop	{r4, pc}
 800567a:	bf00      	nop
 800567c:	08005889 	.word	0x08005889
 8005680:	080058ab 	.word	0x080058ab
 8005684:	080058e3 	.word	0x080058e3
 8005688:	08005907 	.word	0x08005907
 800568c:	20004b70 	.word	0x20004b70

08005690 <stdio_exit_handler>:
 8005690:	4a02      	ldr	r2, [pc, #8]	@ (800569c <stdio_exit_handler+0xc>)
 8005692:	4903      	ldr	r1, [pc, #12]	@ (80056a0 <stdio_exit_handler+0x10>)
 8005694:	4803      	ldr	r0, [pc, #12]	@ (80056a4 <stdio_exit_handler+0x14>)
 8005696:	f000 b869 	b.w	800576c <_fwalk_sglue>
 800569a:	bf00      	nop
 800569c:	20000014 	.word	0x20000014
 80056a0:	08007489 	.word	0x08007489
 80056a4:	20000024 	.word	0x20000024

080056a8 <cleanup_stdio>:
 80056a8:	6841      	ldr	r1, [r0, #4]
 80056aa:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <cleanup_stdio+0x34>)
 80056ac:	4299      	cmp	r1, r3
 80056ae:	b510      	push	{r4, lr}
 80056b0:	4604      	mov	r4, r0
 80056b2:	d001      	beq.n	80056b8 <cleanup_stdio+0x10>
 80056b4:	f001 fee8 	bl	8007488 <_fflush_r>
 80056b8:	68a1      	ldr	r1, [r4, #8]
 80056ba:	4b09      	ldr	r3, [pc, #36]	@ (80056e0 <cleanup_stdio+0x38>)
 80056bc:	4299      	cmp	r1, r3
 80056be:	d002      	beq.n	80056c6 <cleanup_stdio+0x1e>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f001 fee1 	bl	8007488 <_fflush_r>
 80056c6:	68e1      	ldr	r1, [r4, #12]
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <cleanup_stdio+0x3c>)
 80056ca:	4299      	cmp	r1, r3
 80056cc:	d004      	beq.n	80056d8 <cleanup_stdio+0x30>
 80056ce:	4620      	mov	r0, r4
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f001 bed8 	b.w	8007488 <_fflush_r>
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	20004b70 	.word	0x20004b70
 80056e0:	20004bd8 	.word	0x20004bd8
 80056e4:	20004c40 	.word	0x20004c40

080056e8 <global_stdio_init.part.0>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <global_stdio_init.part.0+0x30>)
 80056ec:	4c0b      	ldr	r4, [pc, #44]	@ (800571c <global_stdio_init.part.0+0x34>)
 80056ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <global_stdio_init.part.0+0x38>)
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	2200      	movs	r2, #0
 80056f6:	2104      	movs	r1, #4
 80056f8:	f7ff ff94 	bl	8005624 <std>
 80056fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005700:	2201      	movs	r2, #1
 8005702:	2109      	movs	r1, #9
 8005704:	f7ff ff8e 	bl	8005624 <std>
 8005708:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800570c:	2202      	movs	r2, #2
 800570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005712:	2112      	movs	r1, #18
 8005714:	f7ff bf86 	b.w	8005624 <std>
 8005718:	20004ca8 	.word	0x20004ca8
 800571c:	20004b70 	.word	0x20004b70
 8005720:	08005691 	.word	0x08005691

08005724 <__sfp_lock_acquire>:
 8005724:	4801      	ldr	r0, [pc, #4]	@ (800572c <__sfp_lock_acquire+0x8>)
 8005726:	f000 ba04 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	20004cb1 	.word	0x20004cb1

08005730 <__sfp_lock_release>:
 8005730:	4801      	ldr	r0, [pc, #4]	@ (8005738 <__sfp_lock_release+0x8>)
 8005732:	f000 b9ff 	b.w	8005b34 <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	20004cb1 	.word	0x20004cb1

0800573c <__sinit>:
 800573c:	b510      	push	{r4, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	f7ff fff0 	bl	8005724 <__sfp_lock_acquire>
 8005744:	6a23      	ldr	r3, [r4, #32]
 8005746:	b11b      	cbz	r3, 8005750 <__sinit+0x14>
 8005748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574c:	f7ff bff0 	b.w	8005730 <__sfp_lock_release>
 8005750:	4b04      	ldr	r3, [pc, #16]	@ (8005764 <__sinit+0x28>)
 8005752:	6223      	str	r3, [r4, #32]
 8005754:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <__sinit+0x2c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f5      	bne.n	8005748 <__sinit+0xc>
 800575c:	f7ff ffc4 	bl	80056e8 <global_stdio_init.part.0>
 8005760:	e7f2      	b.n	8005748 <__sinit+0xc>
 8005762:	bf00      	nop
 8005764:	080056a9 	.word	0x080056a9
 8005768:	20004ca8 	.word	0x20004ca8

0800576c <_fwalk_sglue>:
 800576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005770:	4607      	mov	r7, r0
 8005772:	4688      	mov	r8, r1
 8005774:	4614      	mov	r4, r2
 8005776:	2600      	movs	r6, #0
 8005778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800577c:	f1b9 0901 	subs.w	r9, r9, #1
 8005780:	d505      	bpl.n	800578e <_fwalk_sglue+0x22>
 8005782:	6824      	ldr	r4, [r4, #0]
 8005784:	2c00      	cmp	r4, #0
 8005786:	d1f7      	bne.n	8005778 <_fwalk_sglue+0xc>
 8005788:	4630      	mov	r0, r6
 800578a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d907      	bls.n	80057a4 <_fwalk_sglue+0x38>
 8005794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005798:	3301      	adds	r3, #1
 800579a:	d003      	beq.n	80057a4 <_fwalk_sglue+0x38>
 800579c:	4629      	mov	r1, r5
 800579e:	4638      	mov	r0, r7
 80057a0:	47c0      	blx	r8
 80057a2:	4306      	orrs	r6, r0
 80057a4:	3568      	adds	r5, #104	@ 0x68
 80057a6:	e7e9      	b.n	800577c <_fwalk_sglue+0x10>

080057a8 <iprintf>:
 80057a8:	b40f      	push	{r0, r1, r2, r3}
 80057aa:	b507      	push	{r0, r1, r2, lr}
 80057ac:	4906      	ldr	r1, [pc, #24]	@ (80057c8 <iprintf+0x20>)
 80057ae:	ab04      	add	r3, sp, #16
 80057b0:	6808      	ldr	r0, [r1, #0]
 80057b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b6:	6881      	ldr	r1, [r0, #8]
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	f001 fcc9 	bl	8007150 <_vfiprintf_r>
 80057be:	b003      	add	sp, #12
 80057c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c4:	b004      	add	sp, #16
 80057c6:	4770      	bx	lr
 80057c8:	20000020 	.word	0x20000020

080057cc <_puts_r>:
 80057cc:	6a03      	ldr	r3, [r0, #32]
 80057ce:	b570      	push	{r4, r5, r6, lr}
 80057d0:	6884      	ldr	r4, [r0, #8]
 80057d2:	4605      	mov	r5, r0
 80057d4:	460e      	mov	r6, r1
 80057d6:	b90b      	cbnz	r3, 80057dc <_puts_r+0x10>
 80057d8:	f7ff ffb0 	bl	800573c <__sinit>
 80057dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057de:	07db      	lsls	r3, r3, #31
 80057e0:	d405      	bmi.n	80057ee <_puts_r+0x22>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	0598      	lsls	r0, r3, #22
 80057e6:	d402      	bmi.n	80057ee <_puts_r+0x22>
 80057e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057ea:	f000 f9a2 	bl	8005b32 <__retarget_lock_acquire_recursive>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	0719      	lsls	r1, r3, #28
 80057f2:	d502      	bpl.n	80057fa <_puts_r+0x2e>
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d135      	bne.n	8005866 <_puts_r+0x9a>
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f000 f8c5 	bl	800598c <__swsetup_r>
 8005802:	b380      	cbz	r0, 8005866 <_puts_r+0x9a>
 8005804:	f04f 35ff 	mov.w	r5, #4294967295
 8005808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800580a:	07da      	lsls	r2, r3, #31
 800580c:	d405      	bmi.n	800581a <_puts_r+0x4e>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	059b      	lsls	r3, r3, #22
 8005812:	d402      	bmi.n	800581a <_puts_r+0x4e>
 8005814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005816:	f000 f98d 	bl	8005b34 <__retarget_lock_release_recursive>
 800581a:	4628      	mov	r0, r5
 800581c:	bd70      	pop	{r4, r5, r6, pc}
 800581e:	2b00      	cmp	r3, #0
 8005820:	da04      	bge.n	800582c <_puts_r+0x60>
 8005822:	69a2      	ldr	r2, [r4, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	dc17      	bgt.n	8005858 <_puts_r+0x8c>
 8005828:	290a      	cmp	r1, #10
 800582a:	d015      	beq.n	8005858 <_puts_r+0x8c>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	6022      	str	r2, [r4, #0]
 8005832:	7019      	strb	r1, [r3, #0]
 8005834:	68a3      	ldr	r3, [r4, #8]
 8005836:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800583a:	3b01      	subs	r3, #1
 800583c:	60a3      	str	r3, [r4, #8]
 800583e:	2900      	cmp	r1, #0
 8005840:	d1ed      	bne.n	800581e <_puts_r+0x52>
 8005842:	2b00      	cmp	r3, #0
 8005844:	da11      	bge.n	800586a <_puts_r+0x9e>
 8005846:	4622      	mov	r2, r4
 8005848:	210a      	movs	r1, #10
 800584a:	4628      	mov	r0, r5
 800584c:	f000 f85f 	bl	800590e <__swbuf_r>
 8005850:	3001      	adds	r0, #1
 8005852:	d0d7      	beq.n	8005804 <_puts_r+0x38>
 8005854:	250a      	movs	r5, #10
 8005856:	e7d7      	b.n	8005808 <_puts_r+0x3c>
 8005858:	4622      	mov	r2, r4
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f857 	bl	800590e <__swbuf_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d1e7      	bne.n	8005834 <_puts_r+0x68>
 8005864:	e7ce      	b.n	8005804 <_puts_r+0x38>
 8005866:	3e01      	subs	r6, #1
 8005868:	e7e4      	b.n	8005834 <_puts_r+0x68>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	6022      	str	r2, [r4, #0]
 8005870:	220a      	movs	r2, #10
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	e7ee      	b.n	8005854 <_puts_r+0x88>
	...

08005878 <puts>:
 8005878:	4b02      	ldr	r3, [pc, #8]	@ (8005884 <puts+0xc>)
 800587a:	4601      	mov	r1, r0
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	f7ff bfa5 	b.w	80057cc <_puts_r>
 8005882:	bf00      	nop
 8005884:	20000020 	.word	0x20000020

08005888 <__sread>:
 8005888:	b510      	push	{r4, lr}
 800588a:	460c      	mov	r4, r1
 800588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005890:	f000 f900 	bl	8005a94 <_read_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	bfab      	itete	ge
 8005898:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800589a:	89a3      	ldrhlt	r3, [r4, #12]
 800589c:	181b      	addge	r3, r3, r0
 800589e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058a2:	bfac      	ite	ge
 80058a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058a6:	81a3      	strhlt	r3, [r4, #12]
 80058a8:	bd10      	pop	{r4, pc}

080058aa <__swrite>:
 80058aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ae:	461f      	mov	r7, r3
 80058b0:	898b      	ldrh	r3, [r1, #12]
 80058b2:	05db      	lsls	r3, r3, #23
 80058b4:	4605      	mov	r5, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	4616      	mov	r6, r2
 80058ba:	d505      	bpl.n	80058c8 <__swrite+0x1e>
 80058bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c0:	2302      	movs	r3, #2
 80058c2:	2200      	movs	r2, #0
 80058c4:	f000 f8d4 	bl	8005a70 <_lseek_r>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	4632      	mov	r2, r6
 80058d6:	463b      	mov	r3, r7
 80058d8:	4628      	mov	r0, r5
 80058da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	f000 b8eb 	b.w	8005ab8 <_write_r>

080058e2 <__sseek>:
 80058e2:	b510      	push	{r4, lr}
 80058e4:	460c      	mov	r4, r1
 80058e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ea:	f000 f8c1 	bl	8005a70 <_lseek_r>
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	bf15      	itete	ne
 80058f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058fe:	81a3      	strheq	r3, [r4, #12]
 8005900:	bf18      	it	ne
 8005902:	81a3      	strhne	r3, [r4, #12]
 8005904:	bd10      	pop	{r4, pc}

08005906 <__sclose>:
 8005906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590a:	f000 b8a1 	b.w	8005a50 <_close_r>

0800590e <__swbuf_r>:
 800590e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005910:	460e      	mov	r6, r1
 8005912:	4614      	mov	r4, r2
 8005914:	4605      	mov	r5, r0
 8005916:	b118      	cbz	r0, 8005920 <__swbuf_r+0x12>
 8005918:	6a03      	ldr	r3, [r0, #32]
 800591a:	b90b      	cbnz	r3, 8005920 <__swbuf_r+0x12>
 800591c:	f7ff ff0e 	bl	800573c <__sinit>
 8005920:	69a3      	ldr	r3, [r4, #24]
 8005922:	60a3      	str	r3, [r4, #8]
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	071a      	lsls	r2, r3, #28
 8005928:	d501      	bpl.n	800592e <__swbuf_r+0x20>
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	b943      	cbnz	r3, 8005940 <__swbuf_r+0x32>
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f000 f82b 	bl	800598c <__swsetup_r>
 8005936:	b118      	cbz	r0, 8005940 <__swbuf_r+0x32>
 8005938:	f04f 37ff 	mov.w	r7, #4294967295
 800593c:	4638      	mov	r0, r7
 800593e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	6922      	ldr	r2, [r4, #16]
 8005944:	1a98      	subs	r0, r3, r2
 8005946:	6963      	ldr	r3, [r4, #20]
 8005948:	b2f6      	uxtb	r6, r6
 800594a:	4283      	cmp	r3, r0
 800594c:	4637      	mov	r7, r6
 800594e:	dc05      	bgt.n	800595c <__swbuf_r+0x4e>
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f001 fd98 	bl	8007488 <_fflush_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	d1ed      	bne.n	8005938 <__swbuf_r+0x2a>
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	3b01      	subs	r3, #1
 8005960:	60a3      	str	r3, [r4, #8]
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	6022      	str	r2, [r4, #0]
 8005968:	701e      	strb	r6, [r3, #0]
 800596a:	6962      	ldr	r2, [r4, #20]
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	429a      	cmp	r2, r3
 8005970:	d004      	beq.n	800597c <__swbuf_r+0x6e>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	07db      	lsls	r3, r3, #31
 8005976:	d5e1      	bpl.n	800593c <__swbuf_r+0x2e>
 8005978:	2e0a      	cmp	r6, #10
 800597a:	d1df      	bne.n	800593c <__swbuf_r+0x2e>
 800597c:	4621      	mov	r1, r4
 800597e:	4628      	mov	r0, r5
 8005980:	f001 fd82 	bl	8007488 <_fflush_r>
 8005984:	2800      	cmp	r0, #0
 8005986:	d0d9      	beq.n	800593c <__swbuf_r+0x2e>
 8005988:	e7d6      	b.n	8005938 <__swbuf_r+0x2a>
	...

0800598c <__swsetup_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4b29      	ldr	r3, [pc, #164]	@ (8005a34 <__swsetup_r+0xa8>)
 8005990:	4605      	mov	r5, r0
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	460c      	mov	r4, r1
 8005996:	b118      	cbz	r0, 80059a0 <__swsetup_r+0x14>
 8005998:	6a03      	ldr	r3, [r0, #32]
 800599a:	b90b      	cbnz	r3, 80059a0 <__swsetup_r+0x14>
 800599c:	f7ff fece 	bl	800573c <__sinit>
 80059a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a4:	0719      	lsls	r1, r3, #28
 80059a6:	d422      	bmi.n	80059ee <__swsetup_r+0x62>
 80059a8:	06da      	lsls	r2, r3, #27
 80059aa:	d407      	bmi.n	80059bc <__swsetup_r+0x30>
 80059ac:	2209      	movs	r2, #9
 80059ae:	602a      	str	r2, [r5, #0]
 80059b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059b4:	81a3      	strh	r3, [r4, #12]
 80059b6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ba:	e033      	b.n	8005a24 <__swsetup_r+0x98>
 80059bc:	0758      	lsls	r0, r3, #29
 80059be:	d512      	bpl.n	80059e6 <__swsetup_r+0x5a>
 80059c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059c2:	b141      	cbz	r1, 80059d6 <__swsetup_r+0x4a>
 80059c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059c8:	4299      	cmp	r1, r3
 80059ca:	d002      	beq.n	80059d2 <__swsetup_r+0x46>
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 ff1b 	bl	8006808 <_free_r>
 80059d2:	2300      	movs	r3, #0
 80059d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059dc:	81a3      	strh	r3, [r4, #12]
 80059de:	2300      	movs	r3, #0
 80059e0:	6063      	str	r3, [r4, #4]
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	f043 0308 	orr.w	r3, r3, #8
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	6923      	ldr	r3, [r4, #16]
 80059f0:	b94b      	cbnz	r3, 8005a06 <__swsetup_r+0x7a>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059fc:	d003      	beq.n	8005a06 <__swsetup_r+0x7a>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f001 fd8f 	bl	8007524 <__smakebuf_r>
 8005a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0a:	f013 0201 	ands.w	r2, r3, #1
 8005a0e:	d00a      	beq.n	8005a26 <__swsetup_r+0x9a>
 8005a10:	2200      	movs	r2, #0
 8005a12:	60a2      	str	r2, [r4, #8]
 8005a14:	6962      	ldr	r2, [r4, #20]
 8005a16:	4252      	negs	r2, r2
 8005a18:	61a2      	str	r2, [r4, #24]
 8005a1a:	6922      	ldr	r2, [r4, #16]
 8005a1c:	b942      	cbnz	r2, 8005a30 <__swsetup_r+0xa4>
 8005a1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a22:	d1c5      	bne.n	80059b0 <__swsetup_r+0x24>
 8005a24:	bd38      	pop	{r3, r4, r5, pc}
 8005a26:	0799      	lsls	r1, r3, #30
 8005a28:	bf58      	it	pl
 8005a2a:	6962      	ldrpl	r2, [r4, #20]
 8005a2c:	60a2      	str	r2, [r4, #8]
 8005a2e:	e7f4      	b.n	8005a1a <__swsetup_r+0x8e>
 8005a30:	2000      	movs	r0, #0
 8005a32:	e7f7      	b.n	8005a24 <__swsetup_r+0x98>
 8005a34:	20000020 	.word	0x20000020

08005a38 <memset>:
 8005a38:	4402      	add	r2, r0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d100      	bne.n	8005a42 <memset+0xa>
 8005a40:	4770      	bx	lr
 8005a42:	f803 1b01 	strb.w	r1, [r3], #1
 8005a46:	e7f9      	b.n	8005a3c <memset+0x4>

08005a48 <_localeconv_r>:
 8005a48:	4800      	ldr	r0, [pc, #0]	@ (8005a4c <_localeconv_r+0x4>)
 8005a4a:	4770      	bx	lr
 8005a4c:	20000160 	.word	0x20000160

08005a50 <_close_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	@ (8005a6c <_close_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb ffe4 	bl	8001a28 <_close>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_close_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_close_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	20004cac 	.word	0x20004cac

08005a70 <_lseek_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d07      	ldr	r5, [pc, #28]	@ (8005a90 <_lseek_r+0x20>)
 8005a74:	4604      	mov	r4, r0
 8005a76:	4608      	mov	r0, r1
 8005a78:	4611      	mov	r1, r2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	602a      	str	r2, [r5, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f7fb fff9 	bl	8001a76 <_lseek>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_lseek_r+0x1e>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_lseek_r+0x1e>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	20004cac 	.word	0x20004cac

08005a94 <_read_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d07      	ldr	r5, [pc, #28]	@ (8005ab4 <_read_r+0x20>)
 8005a98:	4604      	mov	r4, r0
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f7fb ff87 	bl	80019b6 <_read>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_read_r+0x1e>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_read_r+0x1e>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20004cac 	.word	0x20004cac

08005ab8 <_write_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	@ (8005ad8 <_write_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fb ff92 	bl	80019f0 <_write>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_write_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_write_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20004cac 	.word	0x20004cac

08005adc <__errno>:
 8005adc:	4b01      	ldr	r3, [pc, #4]	@ (8005ae4 <__errno+0x8>)
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000020 	.word	0x20000020

08005ae8 <__libc_init_array>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	4d0d      	ldr	r5, [pc, #52]	@ (8005b20 <__libc_init_array+0x38>)
 8005aec:	4c0d      	ldr	r4, [pc, #52]	@ (8005b24 <__libc_init_array+0x3c>)
 8005aee:	1b64      	subs	r4, r4, r5
 8005af0:	10a4      	asrs	r4, r4, #2
 8005af2:	2600      	movs	r6, #0
 8005af4:	42a6      	cmp	r6, r4
 8005af6:	d109      	bne.n	8005b0c <__libc_init_array+0x24>
 8005af8:	4d0b      	ldr	r5, [pc, #44]	@ (8005b28 <__libc_init_array+0x40>)
 8005afa:	4c0c      	ldr	r4, [pc, #48]	@ (8005b2c <__libc_init_array+0x44>)
 8005afc:	f001 fe30 	bl	8007760 <_init>
 8005b00:	1b64      	subs	r4, r4, r5
 8005b02:	10a4      	asrs	r4, r4, #2
 8005b04:	2600      	movs	r6, #0
 8005b06:	42a6      	cmp	r6, r4
 8005b08:	d105      	bne.n	8005b16 <__libc_init_array+0x2e>
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b10:	4798      	blx	r3
 8005b12:	3601      	adds	r6, #1
 8005b14:	e7ee      	b.n	8005af4 <__libc_init_array+0xc>
 8005b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1a:	4798      	blx	r3
 8005b1c:	3601      	adds	r6, #1
 8005b1e:	e7f2      	b.n	8005b06 <__libc_init_array+0x1e>
 8005b20:	08007c04 	.word	0x08007c04
 8005b24:	08007c04 	.word	0x08007c04
 8005b28:	08007c04 	.word	0x08007c04
 8005b2c:	08007c08 	.word	0x08007c08

08005b30 <__retarget_lock_init_recursive>:
 8005b30:	4770      	bx	lr

08005b32 <__retarget_lock_acquire_recursive>:
 8005b32:	4770      	bx	lr

08005b34 <__retarget_lock_release_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <memcpy>:
 8005b36:	440a      	add	r2, r1
 8005b38:	4291      	cmp	r1, r2
 8005b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b3e:	d100      	bne.n	8005b42 <memcpy+0xc>
 8005b40:	4770      	bx	lr
 8005b42:	b510      	push	{r4, lr}
 8005b44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b4c:	4291      	cmp	r1, r2
 8005b4e:	d1f9      	bne.n	8005b44 <memcpy+0xe>
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <quorem>:
 8005b52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b56:	6903      	ldr	r3, [r0, #16]
 8005b58:	690c      	ldr	r4, [r1, #16]
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	db7e      	blt.n	8005c5e <quorem+0x10c>
 8005b60:	3c01      	subs	r4, #1
 8005b62:	f101 0814 	add.w	r8, r1, #20
 8005b66:	00a3      	lsls	r3, r4, #2
 8005b68:	f100 0514 	add.w	r5, r0, #20
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b88:	d32e      	bcc.n	8005be8 <quorem+0x96>
 8005b8a:	f04f 0a00 	mov.w	sl, #0
 8005b8e:	46c4      	mov	ip, r8
 8005b90:	46ae      	mov	lr, r5
 8005b92:	46d3      	mov	fp, sl
 8005b94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b98:	b298      	uxth	r0, r3
 8005b9a:	fb06 a000 	mla	r0, r6, r0, sl
 8005b9e:	0c02      	lsrs	r2, r0, #16
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	fb06 2303 	mla	r3, r6, r3, r2
 8005ba6:	f8de 2000 	ldr.w	r2, [lr]
 8005baa:	b280      	uxth	r0, r0
 8005bac:	b292      	uxth	r2, r2
 8005bae:	1a12      	subs	r2, r2, r0
 8005bb0:	445a      	add	r2, fp
 8005bb2:	f8de 0000 	ldr.w	r0, [lr]
 8005bb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005bc0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005bc4:	b292      	uxth	r2, r2
 8005bc6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bca:	45e1      	cmp	r9, ip
 8005bcc:	f84e 2b04 	str.w	r2, [lr], #4
 8005bd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bd4:	d2de      	bcs.n	8005b94 <quorem+0x42>
 8005bd6:	9b00      	ldr	r3, [sp, #0]
 8005bd8:	58eb      	ldr	r3, [r5, r3]
 8005bda:	b92b      	cbnz	r3, 8005be8 <quorem+0x96>
 8005bdc:	9b01      	ldr	r3, [sp, #4]
 8005bde:	3b04      	subs	r3, #4
 8005be0:	429d      	cmp	r5, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	d32f      	bcc.n	8005c46 <quorem+0xf4>
 8005be6:	613c      	str	r4, [r7, #16]
 8005be8:	4638      	mov	r0, r7
 8005bea:	f001 f97f 	bl	8006eec <__mcmp>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	db25      	blt.n	8005c3e <quorem+0xec>
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bfa:	f8d1 c000 	ldr.w	ip, [r1]
 8005bfe:	fa1f fe82 	uxth.w	lr, r2
 8005c02:	fa1f f38c 	uxth.w	r3, ip
 8005c06:	eba3 030e 	sub.w	r3, r3, lr
 8005c0a:	4403      	add	r3, r0
 8005c0c:	0c12      	lsrs	r2, r2, #16
 8005c0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c1c:	45c1      	cmp	r9, r8
 8005c1e:	f841 3b04 	str.w	r3, [r1], #4
 8005c22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c26:	d2e6      	bcs.n	8005bf6 <quorem+0xa4>
 8005c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c30:	b922      	cbnz	r2, 8005c3c <quorem+0xea>
 8005c32:	3b04      	subs	r3, #4
 8005c34:	429d      	cmp	r5, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	d30b      	bcc.n	8005c52 <quorem+0x100>
 8005c3a:	613c      	str	r4, [r7, #16]
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	4630      	mov	r0, r6
 8005c40:	b003      	add	sp, #12
 8005c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	3b04      	subs	r3, #4
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	d1cb      	bne.n	8005be6 <quorem+0x94>
 8005c4e:	3c01      	subs	r4, #1
 8005c50:	e7c6      	b.n	8005be0 <quorem+0x8e>
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	3b04      	subs	r3, #4
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	d1ef      	bne.n	8005c3a <quorem+0xe8>
 8005c5a:	3c01      	subs	r4, #1
 8005c5c:	e7ea      	b.n	8005c34 <quorem+0xe2>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e7ee      	b.n	8005c40 <quorem+0xee>
 8005c62:	0000      	movs	r0, r0
 8005c64:	0000      	movs	r0, r0
	...

08005c68 <_dtoa_r>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	69c7      	ldr	r7, [r0, #28]
 8005c6e:	b097      	sub	sp, #92	@ 0x5c
 8005c70:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c74:	ec55 4b10 	vmov	r4, r5, d0
 8005c78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005c7a:	9107      	str	r1, [sp, #28]
 8005c7c:	4681      	mov	r9, r0
 8005c7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005c80:	9311      	str	r3, [sp, #68]	@ 0x44
 8005c82:	b97f      	cbnz	r7, 8005ca4 <_dtoa_r+0x3c>
 8005c84:	2010      	movs	r0, #16
 8005c86:	f000 fe09 	bl	800689c <malloc>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005c90:	b920      	cbnz	r0, 8005c9c <_dtoa_r+0x34>
 8005c92:	4ba9      	ldr	r3, [pc, #676]	@ (8005f38 <_dtoa_r+0x2d0>)
 8005c94:	21ef      	movs	r1, #239	@ 0xef
 8005c96:	48a9      	ldr	r0, [pc, #676]	@ (8005f3c <_dtoa_r+0x2d4>)
 8005c98:	f001 fcb2 	bl	8007600 <__assert_func>
 8005c9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ca0:	6007      	str	r7, [r0, #0]
 8005ca2:	60c7      	str	r7, [r0, #12]
 8005ca4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	b159      	cbz	r1, 8005cc4 <_dtoa_r+0x5c>
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	604a      	str	r2, [r1, #4]
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4093      	lsls	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
 8005cb6:	4648      	mov	r0, r9
 8005cb8:	f000 fee6 	bl	8006a88 <_Bfree>
 8005cbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	1e2b      	subs	r3, r5, #0
 8005cc6:	bfb9      	ittee	lt
 8005cc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ccc:	9305      	strlt	r3, [sp, #20]
 8005cce:	2300      	movge	r3, #0
 8005cd0:	6033      	strge	r3, [r6, #0]
 8005cd2:	9f05      	ldr	r7, [sp, #20]
 8005cd4:	4b9a      	ldr	r3, [pc, #616]	@ (8005f40 <_dtoa_r+0x2d8>)
 8005cd6:	bfbc      	itt	lt
 8005cd8:	2201      	movlt	r2, #1
 8005cda:	6032      	strlt	r2, [r6, #0]
 8005cdc:	43bb      	bics	r3, r7
 8005cde:	d112      	bne.n	8005d06 <_dtoa_r+0x9e>
 8005ce0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ce2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cec:	4323      	orrs	r3, r4
 8005cee:	f000 855a 	beq.w	80067a6 <_dtoa_r+0xb3e>
 8005cf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cf4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005f54 <_dtoa_r+0x2ec>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 855c 	beq.w	80067b6 <_dtoa_r+0xb4e>
 8005cfe:	f10a 0303 	add.w	r3, sl, #3
 8005d02:	f000 bd56 	b.w	80067b2 <_dtoa_r+0xb4a>
 8005d06:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	ec51 0b17 	vmov	r0, r1, d7
 8005d10:	2300      	movs	r3, #0
 8005d12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005d16:	f7fa fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d1a:	4680      	mov	r8, r0
 8005d1c:	b158      	cbz	r0, 8005d36 <_dtoa_r+0xce>
 8005d1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005d20:	2301      	movs	r3, #1
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d26:	b113      	cbz	r3, 8005d2e <_dtoa_r+0xc6>
 8005d28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005d2a:	4b86      	ldr	r3, [pc, #536]	@ (8005f44 <_dtoa_r+0x2dc>)
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005f58 <_dtoa_r+0x2f0>
 8005d32:	f000 bd40 	b.w	80067b6 <_dtoa_r+0xb4e>
 8005d36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005d3a:	aa14      	add	r2, sp, #80	@ 0x50
 8005d3c:	a915      	add	r1, sp, #84	@ 0x54
 8005d3e:	4648      	mov	r0, r9
 8005d40:	f001 f984 	bl	800704c <__d2b>
 8005d44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d48:	9002      	str	r0, [sp, #8]
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	d078      	beq.n	8005e40 <_dtoa_r+0x1d8>
 8005d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d68:	4619      	mov	r1, r3
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4b76      	ldr	r3, [pc, #472]	@ (8005f48 <_dtoa_r+0x2e0>)
 8005d6e:	f7fa fa93 	bl	8000298 <__aeabi_dsub>
 8005d72:	a36b      	add	r3, pc, #428	@ (adr r3, 8005f20 <_dtoa_r+0x2b8>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fc46 	bl	8000608 <__aeabi_dmul>
 8005d7c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005f28 <_dtoa_r+0x2c0>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	f7fa fa8b 	bl	800029c <__adddf3>
 8005d86:	4604      	mov	r4, r0
 8005d88:	4630      	mov	r0, r6
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	f7fa fbd2 	bl	8000534 <__aeabi_i2d>
 8005d90:	a367      	add	r3, pc, #412	@ (adr r3, 8005f30 <_dtoa_r+0x2c8>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f7fa fc37 	bl	8000608 <__aeabi_dmul>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4620      	mov	r0, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	f7fa fa7b 	bl	800029c <__adddf3>
 8005da6:	4604      	mov	r4, r0
 8005da8:	460d      	mov	r5, r1
 8005daa:	f7fa fedd 	bl	8000b68 <__aeabi_d2iz>
 8005dae:	2200      	movs	r2, #0
 8005db0:	4607      	mov	r7, r0
 8005db2:	2300      	movs	r3, #0
 8005db4:	4620      	mov	r0, r4
 8005db6:	4629      	mov	r1, r5
 8005db8:	f7fa fe98 	bl	8000aec <__aeabi_dcmplt>
 8005dbc:	b140      	cbz	r0, 8005dd0 <_dtoa_r+0x168>
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f7fa fbb8 	bl	8000534 <__aeabi_i2d>
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	f7fa fe86 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dcc:	b900      	cbnz	r0, 8005dd0 <_dtoa_r+0x168>
 8005dce:	3f01      	subs	r7, #1
 8005dd0:	2f16      	cmp	r7, #22
 8005dd2:	d852      	bhi.n	8005e7a <_dtoa_r+0x212>
 8005dd4:	4b5d      	ldr	r3, [pc, #372]	@ (8005f4c <_dtoa_r+0x2e4>)
 8005dd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005de2:	f7fa fe83 	bl	8000aec <__aeabi_dcmplt>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d049      	beq.n	8005e7e <_dtoa_r+0x216>
 8005dea:	3f01      	subs	r7, #1
 8005dec:	2300      	movs	r3, #0
 8005dee:	9310      	str	r3, [sp, #64]	@ 0x40
 8005df0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005df2:	1b9b      	subs	r3, r3, r6
 8005df4:	1e5a      	subs	r2, r3, #1
 8005df6:	bf45      	ittet	mi
 8005df8:	f1c3 0301 	rsbmi	r3, r3, #1
 8005dfc:	9300      	strmi	r3, [sp, #0]
 8005dfe:	2300      	movpl	r3, #0
 8005e00:	2300      	movmi	r3, #0
 8005e02:	9206      	str	r2, [sp, #24]
 8005e04:	bf54      	ite	pl
 8005e06:	9300      	strpl	r3, [sp, #0]
 8005e08:	9306      	strmi	r3, [sp, #24]
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	db39      	blt.n	8005e82 <_dtoa_r+0x21a>
 8005e0e:	9b06      	ldr	r3, [sp, #24]
 8005e10:	970d      	str	r7, [sp, #52]	@ 0x34
 8005e12:	443b      	add	r3, r7
 8005e14:	9306      	str	r3, [sp, #24]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9308      	str	r3, [sp, #32]
 8005e1a:	9b07      	ldr	r3, [sp, #28]
 8005e1c:	2b09      	cmp	r3, #9
 8005e1e:	d863      	bhi.n	8005ee8 <_dtoa_r+0x280>
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	bfc4      	itt	gt
 8005e24:	3b04      	subgt	r3, #4
 8005e26:	9307      	strgt	r3, [sp, #28]
 8005e28:	9b07      	ldr	r3, [sp, #28]
 8005e2a:	f1a3 0302 	sub.w	r3, r3, #2
 8005e2e:	bfcc      	ite	gt
 8005e30:	2400      	movgt	r4, #0
 8005e32:	2401      	movle	r4, #1
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d863      	bhi.n	8005f00 <_dtoa_r+0x298>
 8005e38:	e8df f003 	tbb	[pc, r3]
 8005e3c:	2b375452 	.word	0x2b375452
 8005e40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e44:	441e      	add	r6, r3
 8005e46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	bfc1      	itttt	gt
 8005e4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e52:	409f      	lslgt	r7, r3
 8005e54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e58:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e5c:	bfd6      	itet	le
 8005e5e:	f1c3 0320 	rsble	r3, r3, #32
 8005e62:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e66:	fa04 f003 	lslle.w	r0, r4, r3
 8005e6a:	f7fa fb53 	bl	8000514 <__aeabi_ui2d>
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e74:	3e01      	subs	r6, #1
 8005e76:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e78:	e776      	b.n	8005d68 <_dtoa_r+0x100>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e7b7      	b.n	8005dee <_dtoa_r+0x186>
 8005e7e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005e80:	e7b6      	b.n	8005df0 <_dtoa_r+0x188>
 8005e82:	9b00      	ldr	r3, [sp, #0]
 8005e84:	1bdb      	subs	r3, r3, r7
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	427b      	negs	r3, r7
 8005e8a:	9308      	str	r3, [sp, #32]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e90:	e7c3      	b.n	8005e1a <_dtoa_r+0x1b2>
 8005e92:	2301      	movs	r3, #1
 8005e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e98:	eb07 0b03 	add.w	fp, r7, r3
 8005e9c:	f10b 0301 	add.w	r3, fp, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	9303      	str	r3, [sp, #12]
 8005ea4:	bfb8      	it	lt
 8005ea6:	2301      	movlt	r3, #1
 8005ea8:	e006      	b.n	8005eb8 <_dtoa_r+0x250>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	dd28      	ble.n	8005f06 <_dtoa_r+0x29e>
 8005eb4:	469b      	mov	fp, r3
 8005eb6:	9303      	str	r3, [sp, #12]
 8005eb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	f102 0514 	add.w	r5, r2, #20
 8005ec4:	429d      	cmp	r5, r3
 8005ec6:	d926      	bls.n	8005f16 <_dtoa_r+0x2ae>
 8005ec8:	6041      	str	r1, [r0, #4]
 8005eca:	4648      	mov	r0, r9
 8005ecc:	f000 fd9c 	bl	8006a08 <_Balloc>
 8005ed0:	4682      	mov	sl, r0
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d142      	bne.n	8005f5c <_dtoa_r+0x2f4>
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f50 <_dtoa_r+0x2e8>)
 8005ed8:	4602      	mov	r2, r0
 8005eda:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ede:	e6da      	b.n	8005c96 <_dtoa_r+0x2e>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e7e3      	b.n	8005eac <_dtoa_r+0x244>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e7d5      	b.n	8005e94 <_dtoa_r+0x22c>
 8005ee8:	2401      	movs	r4, #1
 8005eea:	2300      	movs	r3, #0
 8005eec:	9307      	str	r3, [sp, #28]
 8005eee:	9409      	str	r4, [sp, #36]	@ 0x24
 8005ef0:	f04f 3bff 	mov.w	fp, #4294967295
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8cd b00c 	str.w	fp, [sp, #12]
 8005efa:	2312      	movs	r3, #18
 8005efc:	920c      	str	r2, [sp, #48]	@ 0x30
 8005efe:	e7db      	b.n	8005eb8 <_dtoa_r+0x250>
 8005f00:	2301      	movs	r3, #1
 8005f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f04:	e7f4      	b.n	8005ef0 <_dtoa_r+0x288>
 8005f06:	f04f 0b01 	mov.w	fp, #1
 8005f0a:	f8cd b00c 	str.w	fp, [sp, #12]
 8005f0e:	465b      	mov	r3, fp
 8005f10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005f14:	e7d0      	b.n	8005eb8 <_dtoa_r+0x250>
 8005f16:	3101      	adds	r1, #1
 8005f18:	0052      	lsls	r2, r2, #1
 8005f1a:	e7d1      	b.n	8005ec0 <_dtoa_r+0x258>
 8005f1c:	f3af 8000 	nop.w
 8005f20:	636f4361 	.word	0x636f4361
 8005f24:	3fd287a7 	.word	0x3fd287a7
 8005f28:	8b60c8b3 	.word	0x8b60c8b3
 8005f2c:	3fc68a28 	.word	0x3fc68a28
 8005f30:	509f79fb 	.word	0x509f79fb
 8005f34:	3fd34413 	.word	0x3fd34413
 8005f38:	080078c6 	.word	0x080078c6
 8005f3c:	080078dd 	.word	0x080078dd
 8005f40:	7ff00000 	.word	0x7ff00000
 8005f44:	08007896 	.word	0x08007896
 8005f48:	3ff80000 	.word	0x3ff80000
 8005f4c:	08007a30 	.word	0x08007a30
 8005f50:	08007935 	.word	0x08007935
 8005f54:	080078c2 	.word	0x080078c2
 8005f58:	08007895 	.word	0x08007895
 8005f5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f60:	6018      	str	r0, [r3, #0]
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	2b0e      	cmp	r3, #14
 8005f66:	f200 80a1 	bhi.w	80060ac <_dtoa_r+0x444>
 8005f6a:	2c00      	cmp	r4, #0
 8005f6c:	f000 809e 	beq.w	80060ac <_dtoa_r+0x444>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	dd33      	ble.n	8005fdc <_dtoa_r+0x374>
 8005f74:	4b9c      	ldr	r3, [pc, #624]	@ (80061e8 <_dtoa_r+0x580>)
 8005f76:	f007 020f 	and.w	r2, r7, #15
 8005f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f7e:	ed93 7b00 	vldr	d7, [r3]
 8005f82:	05f8      	lsls	r0, r7, #23
 8005f84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005f88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f8c:	d516      	bpl.n	8005fbc <_dtoa_r+0x354>
 8005f8e:	4b97      	ldr	r3, [pc, #604]	@ (80061ec <_dtoa_r+0x584>)
 8005f90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f98:	f7fa fc60 	bl	800085c <__aeabi_ddiv>
 8005f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fa0:	f004 040f 	and.w	r4, r4, #15
 8005fa4:	2603      	movs	r6, #3
 8005fa6:	4d91      	ldr	r5, [pc, #580]	@ (80061ec <_dtoa_r+0x584>)
 8005fa8:	b954      	cbnz	r4, 8005fc0 <_dtoa_r+0x358>
 8005faa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fb2:	f7fa fc53 	bl	800085c <__aeabi_ddiv>
 8005fb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fba:	e028      	b.n	800600e <_dtoa_r+0x3a6>
 8005fbc:	2602      	movs	r6, #2
 8005fbe:	e7f2      	b.n	8005fa6 <_dtoa_r+0x33e>
 8005fc0:	07e1      	lsls	r1, r4, #31
 8005fc2:	d508      	bpl.n	8005fd6 <_dtoa_r+0x36e>
 8005fc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005fc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fcc:	f7fa fb1c 	bl	8000608 <__aeabi_dmul>
 8005fd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	1064      	asrs	r4, r4, #1
 8005fd8:	3508      	adds	r5, #8
 8005fda:	e7e5      	b.n	8005fa8 <_dtoa_r+0x340>
 8005fdc:	f000 80af 	beq.w	800613e <_dtoa_r+0x4d6>
 8005fe0:	427c      	negs	r4, r7
 8005fe2:	4b81      	ldr	r3, [pc, #516]	@ (80061e8 <_dtoa_r+0x580>)
 8005fe4:	4d81      	ldr	r5, [pc, #516]	@ (80061ec <_dtoa_r+0x584>)
 8005fe6:	f004 020f 	and.w	r2, r4, #15
 8005fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ff6:	f7fa fb07 	bl	8000608 <__aeabi_dmul>
 8005ffa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ffe:	1124      	asrs	r4, r4, #4
 8006000:	2300      	movs	r3, #0
 8006002:	2602      	movs	r6, #2
 8006004:	2c00      	cmp	r4, #0
 8006006:	f040 808f 	bne.w	8006128 <_dtoa_r+0x4c0>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1d3      	bne.n	8005fb6 <_dtoa_r+0x34e>
 800600e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006010:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8094 	beq.w	8006142 <_dtoa_r+0x4da>
 800601a:	4b75      	ldr	r3, [pc, #468]	@ (80061f0 <_dtoa_r+0x588>)
 800601c:	2200      	movs	r2, #0
 800601e:	4620      	mov	r0, r4
 8006020:	4629      	mov	r1, r5
 8006022:	f7fa fd63 	bl	8000aec <__aeabi_dcmplt>
 8006026:	2800      	cmp	r0, #0
 8006028:	f000 808b 	beq.w	8006142 <_dtoa_r+0x4da>
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8087 	beq.w	8006142 <_dtoa_r+0x4da>
 8006034:	f1bb 0f00 	cmp.w	fp, #0
 8006038:	dd34      	ble.n	80060a4 <_dtoa_r+0x43c>
 800603a:	4620      	mov	r0, r4
 800603c:	4b6d      	ldr	r3, [pc, #436]	@ (80061f4 <_dtoa_r+0x58c>)
 800603e:	2200      	movs	r2, #0
 8006040:	4629      	mov	r1, r5
 8006042:	f7fa fae1 	bl	8000608 <__aeabi_dmul>
 8006046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800604a:	f107 38ff 	add.w	r8, r7, #4294967295
 800604e:	3601      	adds	r6, #1
 8006050:	465c      	mov	r4, fp
 8006052:	4630      	mov	r0, r6
 8006054:	f7fa fa6e 	bl	8000534 <__aeabi_i2d>
 8006058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800605c:	f7fa fad4 	bl	8000608 <__aeabi_dmul>
 8006060:	4b65      	ldr	r3, [pc, #404]	@ (80061f8 <_dtoa_r+0x590>)
 8006062:	2200      	movs	r2, #0
 8006064:	f7fa f91a 	bl	800029c <__adddf3>
 8006068:	4605      	mov	r5, r0
 800606a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800606e:	2c00      	cmp	r4, #0
 8006070:	d16a      	bne.n	8006148 <_dtoa_r+0x4e0>
 8006072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006076:	4b61      	ldr	r3, [pc, #388]	@ (80061fc <_dtoa_r+0x594>)
 8006078:	2200      	movs	r2, #0
 800607a:	f7fa f90d 	bl	8000298 <__aeabi_dsub>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006086:	462a      	mov	r2, r5
 8006088:	4633      	mov	r3, r6
 800608a:	f7fa fd4d 	bl	8000b28 <__aeabi_dcmpgt>
 800608e:	2800      	cmp	r0, #0
 8006090:	f040 8298 	bne.w	80065c4 <_dtoa_r+0x95c>
 8006094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006098:	462a      	mov	r2, r5
 800609a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800609e:	f7fa fd25 	bl	8000aec <__aeabi_dcmplt>
 80060a2:	bb38      	cbnz	r0, 80060f4 <_dtoa_r+0x48c>
 80060a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80060a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f2c0 8157 	blt.w	8006362 <_dtoa_r+0x6fa>
 80060b4:	2f0e      	cmp	r7, #14
 80060b6:	f300 8154 	bgt.w	8006362 <_dtoa_r+0x6fa>
 80060ba:	4b4b      	ldr	r3, [pc, #300]	@ (80061e8 <_dtoa_r+0x580>)
 80060bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060c0:	ed93 7b00 	vldr	d7, [r3]
 80060c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	ed8d 7b00 	vstr	d7, [sp]
 80060cc:	f280 80e5 	bge.w	800629a <_dtoa_r+0x632>
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f300 80e1 	bgt.w	800629a <_dtoa_r+0x632>
 80060d8:	d10c      	bne.n	80060f4 <_dtoa_r+0x48c>
 80060da:	4b48      	ldr	r3, [pc, #288]	@ (80061fc <_dtoa_r+0x594>)
 80060dc:	2200      	movs	r2, #0
 80060de:	ec51 0b17 	vmov	r0, r1, d7
 80060e2:	f7fa fa91 	bl	8000608 <__aeabi_dmul>
 80060e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ea:	f7fa fd13 	bl	8000b14 <__aeabi_dcmpge>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f000 8266 	beq.w	80065c0 <_dtoa_r+0x958>
 80060f4:	2400      	movs	r4, #0
 80060f6:	4625      	mov	r5, r4
 80060f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060fa:	4656      	mov	r6, sl
 80060fc:	ea6f 0803 	mvn.w	r8, r3
 8006100:	2700      	movs	r7, #0
 8006102:	4621      	mov	r1, r4
 8006104:	4648      	mov	r0, r9
 8006106:	f000 fcbf 	bl	8006a88 <_Bfree>
 800610a:	2d00      	cmp	r5, #0
 800610c:	f000 80bd 	beq.w	800628a <_dtoa_r+0x622>
 8006110:	b12f      	cbz	r7, 800611e <_dtoa_r+0x4b6>
 8006112:	42af      	cmp	r7, r5
 8006114:	d003      	beq.n	800611e <_dtoa_r+0x4b6>
 8006116:	4639      	mov	r1, r7
 8006118:	4648      	mov	r0, r9
 800611a:	f000 fcb5 	bl	8006a88 <_Bfree>
 800611e:	4629      	mov	r1, r5
 8006120:	4648      	mov	r0, r9
 8006122:	f000 fcb1 	bl	8006a88 <_Bfree>
 8006126:	e0b0      	b.n	800628a <_dtoa_r+0x622>
 8006128:	07e2      	lsls	r2, r4, #31
 800612a:	d505      	bpl.n	8006138 <_dtoa_r+0x4d0>
 800612c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006130:	f7fa fa6a 	bl	8000608 <__aeabi_dmul>
 8006134:	3601      	adds	r6, #1
 8006136:	2301      	movs	r3, #1
 8006138:	1064      	asrs	r4, r4, #1
 800613a:	3508      	adds	r5, #8
 800613c:	e762      	b.n	8006004 <_dtoa_r+0x39c>
 800613e:	2602      	movs	r6, #2
 8006140:	e765      	b.n	800600e <_dtoa_r+0x3a6>
 8006142:	9c03      	ldr	r4, [sp, #12]
 8006144:	46b8      	mov	r8, r7
 8006146:	e784      	b.n	8006052 <_dtoa_r+0x3ea>
 8006148:	4b27      	ldr	r3, [pc, #156]	@ (80061e8 <_dtoa_r+0x580>)
 800614a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800614c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006150:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006154:	4454      	add	r4, sl
 8006156:	2900      	cmp	r1, #0
 8006158:	d054      	beq.n	8006204 <_dtoa_r+0x59c>
 800615a:	4929      	ldr	r1, [pc, #164]	@ (8006200 <_dtoa_r+0x598>)
 800615c:	2000      	movs	r0, #0
 800615e:	f7fa fb7d 	bl	800085c <__aeabi_ddiv>
 8006162:	4633      	mov	r3, r6
 8006164:	462a      	mov	r2, r5
 8006166:	f7fa f897 	bl	8000298 <__aeabi_dsub>
 800616a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800616e:	4656      	mov	r6, sl
 8006170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006174:	f7fa fcf8 	bl	8000b68 <__aeabi_d2iz>
 8006178:	4605      	mov	r5, r0
 800617a:	f7fa f9db 	bl	8000534 <__aeabi_i2d>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006186:	f7fa f887 	bl	8000298 <__aeabi_dsub>
 800618a:	3530      	adds	r5, #48	@ 0x30
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006194:	f806 5b01 	strb.w	r5, [r6], #1
 8006198:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800619c:	f7fa fca6 	bl	8000aec <__aeabi_dcmplt>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d172      	bne.n	800628a <_dtoa_r+0x622>
 80061a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a8:	4911      	ldr	r1, [pc, #68]	@ (80061f0 <_dtoa_r+0x588>)
 80061aa:	2000      	movs	r0, #0
 80061ac:	f7fa f874 	bl	8000298 <__aeabi_dsub>
 80061b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80061b4:	f7fa fc9a 	bl	8000aec <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f040 80b4 	bne.w	8006326 <_dtoa_r+0x6be>
 80061be:	42a6      	cmp	r6, r4
 80061c0:	f43f af70 	beq.w	80060a4 <_dtoa_r+0x43c>
 80061c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80061c8:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <_dtoa_r+0x58c>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	f7fa fa1c 	bl	8000608 <__aeabi_dmul>
 80061d0:	4b08      	ldr	r3, [pc, #32]	@ (80061f4 <_dtoa_r+0x58c>)
 80061d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061d6:	2200      	movs	r2, #0
 80061d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061dc:	f7fa fa14 	bl	8000608 <__aeabi_dmul>
 80061e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061e4:	e7c4      	b.n	8006170 <_dtoa_r+0x508>
 80061e6:	bf00      	nop
 80061e8:	08007a30 	.word	0x08007a30
 80061ec:	08007a08 	.word	0x08007a08
 80061f0:	3ff00000 	.word	0x3ff00000
 80061f4:	40240000 	.word	0x40240000
 80061f8:	401c0000 	.word	0x401c0000
 80061fc:	40140000 	.word	0x40140000
 8006200:	3fe00000 	.word	0x3fe00000
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	f7fa f9fe 	bl	8000608 <__aeabi_dmul>
 800620c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006210:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006212:	4656      	mov	r6, sl
 8006214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006218:	f7fa fca6 	bl	8000b68 <__aeabi_d2iz>
 800621c:	4605      	mov	r5, r0
 800621e:	f7fa f989 	bl	8000534 <__aeabi_i2d>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800622a:	f7fa f835 	bl	8000298 <__aeabi_dsub>
 800622e:	3530      	adds	r5, #48	@ 0x30
 8006230:	f806 5b01 	strb.w	r5, [r6], #1
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	42a6      	cmp	r6, r4
 800623a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	d124      	bne.n	800628e <_dtoa_r+0x626>
 8006244:	4baf      	ldr	r3, [pc, #700]	@ (8006504 <_dtoa_r+0x89c>)
 8006246:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800624a:	f7fa f827 	bl	800029c <__adddf3>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006256:	f7fa fc67 	bl	8000b28 <__aeabi_dcmpgt>
 800625a:	2800      	cmp	r0, #0
 800625c:	d163      	bne.n	8006326 <_dtoa_r+0x6be>
 800625e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006262:	49a8      	ldr	r1, [pc, #672]	@ (8006504 <_dtoa_r+0x89c>)
 8006264:	2000      	movs	r0, #0
 8006266:	f7fa f817 	bl	8000298 <__aeabi_dsub>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006272:	f7fa fc3b 	bl	8000aec <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	f43f af14 	beq.w	80060a4 <_dtoa_r+0x43c>
 800627c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800627e:	1e73      	subs	r3, r6, #1
 8006280:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006282:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006286:	2b30      	cmp	r3, #48	@ 0x30
 8006288:	d0f8      	beq.n	800627c <_dtoa_r+0x614>
 800628a:	4647      	mov	r7, r8
 800628c:	e03b      	b.n	8006306 <_dtoa_r+0x69e>
 800628e:	4b9e      	ldr	r3, [pc, #632]	@ (8006508 <_dtoa_r+0x8a0>)
 8006290:	f7fa f9ba 	bl	8000608 <__aeabi_dmul>
 8006294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006298:	e7bc      	b.n	8006214 <_dtoa_r+0x5ac>
 800629a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800629e:	4656      	mov	r6, sl
 80062a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062a4:	4620      	mov	r0, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	f7fa fad8 	bl	800085c <__aeabi_ddiv>
 80062ac:	f7fa fc5c 	bl	8000b68 <__aeabi_d2iz>
 80062b0:	4680      	mov	r8, r0
 80062b2:	f7fa f93f 	bl	8000534 <__aeabi_i2d>
 80062b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ba:	f7fa f9a5 	bl	8000608 <__aeabi_dmul>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4620      	mov	r0, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062ca:	f7f9 ffe5 	bl	8000298 <__aeabi_dsub>
 80062ce:	f806 4b01 	strb.w	r4, [r6], #1
 80062d2:	9d03      	ldr	r5, [sp, #12]
 80062d4:	eba6 040a 	sub.w	r4, r6, sl
 80062d8:	42a5      	cmp	r5, r4
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	d133      	bne.n	8006348 <_dtoa_r+0x6e0>
 80062e0:	f7f9 ffdc 	bl	800029c <__adddf3>
 80062e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062e8:	4604      	mov	r4, r0
 80062ea:	460d      	mov	r5, r1
 80062ec:	f7fa fc1c 	bl	8000b28 <__aeabi_dcmpgt>
 80062f0:	b9c0      	cbnz	r0, 8006324 <_dtoa_r+0x6bc>
 80062f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7fa fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 80062fe:	b110      	cbz	r0, 8006306 <_dtoa_r+0x69e>
 8006300:	f018 0f01 	tst.w	r8, #1
 8006304:	d10e      	bne.n	8006324 <_dtoa_r+0x6bc>
 8006306:	9902      	ldr	r1, [sp, #8]
 8006308:	4648      	mov	r0, r9
 800630a:	f000 fbbd 	bl	8006a88 <_Bfree>
 800630e:	2300      	movs	r3, #0
 8006310:	7033      	strb	r3, [r6, #0]
 8006312:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006314:	3701      	adds	r7, #1
 8006316:	601f      	str	r7, [r3, #0]
 8006318:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 824b 	beq.w	80067b6 <_dtoa_r+0xb4e>
 8006320:	601e      	str	r6, [r3, #0]
 8006322:	e248      	b.n	80067b6 <_dtoa_r+0xb4e>
 8006324:	46b8      	mov	r8, r7
 8006326:	4633      	mov	r3, r6
 8006328:	461e      	mov	r6, r3
 800632a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800632e:	2a39      	cmp	r2, #57	@ 0x39
 8006330:	d106      	bne.n	8006340 <_dtoa_r+0x6d8>
 8006332:	459a      	cmp	sl, r3
 8006334:	d1f8      	bne.n	8006328 <_dtoa_r+0x6c0>
 8006336:	2230      	movs	r2, #48	@ 0x30
 8006338:	f108 0801 	add.w	r8, r8, #1
 800633c:	f88a 2000 	strb.w	r2, [sl]
 8006340:	781a      	ldrb	r2, [r3, #0]
 8006342:	3201      	adds	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e7a0      	b.n	800628a <_dtoa_r+0x622>
 8006348:	4b6f      	ldr	r3, [pc, #444]	@ (8006508 <_dtoa_r+0x8a0>)
 800634a:	2200      	movs	r2, #0
 800634c:	f7fa f95c 	bl	8000608 <__aeabi_dmul>
 8006350:	2200      	movs	r2, #0
 8006352:	2300      	movs	r3, #0
 8006354:	4604      	mov	r4, r0
 8006356:	460d      	mov	r5, r1
 8006358:	f7fa fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800635c:	2800      	cmp	r0, #0
 800635e:	d09f      	beq.n	80062a0 <_dtoa_r+0x638>
 8006360:	e7d1      	b.n	8006306 <_dtoa_r+0x69e>
 8006362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006364:	2a00      	cmp	r2, #0
 8006366:	f000 80ea 	beq.w	800653e <_dtoa_r+0x8d6>
 800636a:	9a07      	ldr	r2, [sp, #28]
 800636c:	2a01      	cmp	r2, #1
 800636e:	f300 80cd 	bgt.w	800650c <_dtoa_r+0x8a4>
 8006372:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006374:	2a00      	cmp	r2, #0
 8006376:	f000 80c1 	beq.w	80064fc <_dtoa_r+0x894>
 800637a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800637e:	9c08      	ldr	r4, [sp, #32]
 8006380:	9e00      	ldr	r6, [sp, #0]
 8006382:	9a00      	ldr	r2, [sp, #0]
 8006384:	441a      	add	r2, r3
 8006386:	9200      	str	r2, [sp, #0]
 8006388:	9a06      	ldr	r2, [sp, #24]
 800638a:	2101      	movs	r1, #1
 800638c:	441a      	add	r2, r3
 800638e:	4648      	mov	r0, r9
 8006390:	9206      	str	r2, [sp, #24]
 8006392:	f000 fc2d 	bl	8006bf0 <__i2b>
 8006396:	4605      	mov	r5, r0
 8006398:	b166      	cbz	r6, 80063b4 <_dtoa_r+0x74c>
 800639a:	9b06      	ldr	r3, [sp, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	dd09      	ble.n	80063b4 <_dtoa_r+0x74c>
 80063a0:	42b3      	cmp	r3, r6
 80063a2:	9a00      	ldr	r2, [sp, #0]
 80063a4:	bfa8      	it	ge
 80063a6:	4633      	movge	r3, r6
 80063a8:	1ad2      	subs	r2, r2, r3
 80063aa:	9200      	str	r2, [sp, #0]
 80063ac:	9a06      	ldr	r2, [sp, #24]
 80063ae:	1af6      	subs	r6, r6, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	9306      	str	r3, [sp, #24]
 80063b4:	9b08      	ldr	r3, [sp, #32]
 80063b6:	b30b      	cbz	r3, 80063fc <_dtoa_r+0x794>
 80063b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80c6 	beq.w	800654c <_dtoa_r+0x8e4>
 80063c0:	2c00      	cmp	r4, #0
 80063c2:	f000 80c0 	beq.w	8006546 <_dtoa_r+0x8de>
 80063c6:	4629      	mov	r1, r5
 80063c8:	4622      	mov	r2, r4
 80063ca:	4648      	mov	r0, r9
 80063cc:	f000 fcc8 	bl	8006d60 <__pow5mult>
 80063d0:	9a02      	ldr	r2, [sp, #8]
 80063d2:	4601      	mov	r1, r0
 80063d4:	4605      	mov	r5, r0
 80063d6:	4648      	mov	r0, r9
 80063d8:	f000 fc20 	bl	8006c1c <__multiply>
 80063dc:	9902      	ldr	r1, [sp, #8]
 80063de:	4680      	mov	r8, r0
 80063e0:	4648      	mov	r0, r9
 80063e2:	f000 fb51 	bl	8006a88 <_Bfree>
 80063e6:	9b08      	ldr	r3, [sp, #32]
 80063e8:	1b1b      	subs	r3, r3, r4
 80063ea:	9308      	str	r3, [sp, #32]
 80063ec:	f000 80b1 	beq.w	8006552 <_dtoa_r+0x8ea>
 80063f0:	9a08      	ldr	r2, [sp, #32]
 80063f2:	4641      	mov	r1, r8
 80063f4:	4648      	mov	r0, r9
 80063f6:	f000 fcb3 	bl	8006d60 <__pow5mult>
 80063fa:	9002      	str	r0, [sp, #8]
 80063fc:	2101      	movs	r1, #1
 80063fe:	4648      	mov	r0, r9
 8006400:	f000 fbf6 	bl	8006bf0 <__i2b>
 8006404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006406:	4604      	mov	r4, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 81d8 	beq.w	80067be <_dtoa_r+0xb56>
 800640e:	461a      	mov	r2, r3
 8006410:	4601      	mov	r1, r0
 8006412:	4648      	mov	r0, r9
 8006414:	f000 fca4 	bl	8006d60 <__pow5mult>
 8006418:	9b07      	ldr	r3, [sp, #28]
 800641a:	2b01      	cmp	r3, #1
 800641c:	4604      	mov	r4, r0
 800641e:	f300 809f 	bgt.w	8006560 <_dtoa_r+0x8f8>
 8006422:	9b04      	ldr	r3, [sp, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 8097 	bne.w	8006558 <_dtoa_r+0x8f0>
 800642a:	9b05      	ldr	r3, [sp, #20]
 800642c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006430:	2b00      	cmp	r3, #0
 8006432:	f040 8093 	bne.w	800655c <_dtoa_r+0x8f4>
 8006436:	9b05      	ldr	r3, [sp, #20]
 8006438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800643c:	0d1b      	lsrs	r3, r3, #20
 800643e:	051b      	lsls	r3, r3, #20
 8006440:	b133      	cbz	r3, 8006450 <_dtoa_r+0x7e8>
 8006442:	9b00      	ldr	r3, [sp, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	9b06      	ldr	r3, [sp, #24]
 800644a:	3301      	adds	r3, #1
 800644c:	9306      	str	r3, [sp, #24]
 800644e:	2301      	movs	r3, #1
 8006450:	9308      	str	r3, [sp, #32]
 8006452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 81b8 	beq.w	80067ca <_dtoa_r+0xb62>
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006460:	6918      	ldr	r0, [r3, #16]
 8006462:	f000 fb79 	bl	8006b58 <__hi0bits>
 8006466:	f1c0 0020 	rsb	r0, r0, #32
 800646a:	9b06      	ldr	r3, [sp, #24]
 800646c:	4418      	add	r0, r3
 800646e:	f010 001f 	ands.w	r0, r0, #31
 8006472:	f000 8082 	beq.w	800657a <_dtoa_r+0x912>
 8006476:	f1c0 0320 	rsb	r3, r0, #32
 800647a:	2b04      	cmp	r3, #4
 800647c:	dd73      	ble.n	8006566 <_dtoa_r+0x8fe>
 800647e:	9b00      	ldr	r3, [sp, #0]
 8006480:	f1c0 001c 	rsb	r0, r0, #28
 8006484:	4403      	add	r3, r0
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	9b06      	ldr	r3, [sp, #24]
 800648a:	4403      	add	r3, r0
 800648c:	4406      	add	r6, r0
 800648e:	9306      	str	r3, [sp, #24]
 8006490:	9b00      	ldr	r3, [sp, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	dd05      	ble.n	80064a2 <_dtoa_r+0x83a>
 8006496:	9902      	ldr	r1, [sp, #8]
 8006498:	461a      	mov	r2, r3
 800649a:	4648      	mov	r0, r9
 800649c:	f000 fcba 	bl	8006e14 <__lshift>
 80064a0:	9002      	str	r0, [sp, #8]
 80064a2:	9b06      	ldr	r3, [sp, #24]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dd05      	ble.n	80064b4 <_dtoa_r+0x84c>
 80064a8:	4621      	mov	r1, r4
 80064aa:	461a      	mov	r2, r3
 80064ac:	4648      	mov	r0, r9
 80064ae:	f000 fcb1 	bl	8006e14 <__lshift>
 80064b2:	4604      	mov	r4, r0
 80064b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d061      	beq.n	800657e <_dtoa_r+0x916>
 80064ba:	9802      	ldr	r0, [sp, #8]
 80064bc:	4621      	mov	r1, r4
 80064be:	f000 fd15 	bl	8006eec <__mcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	da5b      	bge.n	800657e <_dtoa_r+0x916>
 80064c6:	2300      	movs	r3, #0
 80064c8:	9902      	ldr	r1, [sp, #8]
 80064ca:	220a      	movs	r2, #10
 80064cc:	4648      	mov	r0, r9
 80064ce:	f000 fafd 	bl	8006acc <__multadd>
 80064d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d4:	9002      	str	r0, [sp, #8]
 80064d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8177 	beq.w	80067ce <_dtoa_r+0xb66>
 80064e0:	4629      	mov	r1, r5
 80064e2:	2300      	movs	r3, #0
 80064e4:	220a      	movs	r2, #10
 80064e6:	4648      	mov	r0, r9
 80064e8:	f000 faf0 	bl	8006acc <__multadd>
 80064ec:	f1bb 0f00 	cmp.w	fp, #0
 80064f0:	4605      	mov	r5, r0
 80064f2:	dc6f      	bgt.n	80065d4 <_dtoa_r+0x96c>
 80064f4:	9b07      	ldr	r3, [sp, #28]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	dc49      	bgt.n	800658e <_dtoa_r+0x926>
 80064fa:	e06b      	b.n	80065d4 <_dtoa_r+0x96c>
 80064fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006502:	e73c      	b.n	800637e <_dtoa_r+0x716>
 8006504:	3fe00000 	.word	0x3fe00000
 8006508:	40240000 	.word	0x40240000
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	1e5c      	subs	r4, r3, #1
 8006510:	9b08      	ldr	r3, [sp, #32]
 8006512:	42a3      	cmp	r3, r4
 8006514:	db09      	blt.n	800652a <_dtoa_r+0x8c2>
 8006516:	1b1c      	subs	r4, r3, r4
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f6bf af30 	bge.w	8006380 <_dtoa_r+0x718>
 8006520:	9b00      	ldr	r3, [sp, #0]
 8006522:	9a03      	ldr	r2, [sp, #12]
 8006524:	1a9e      	subs	r6, r3, r2
 8006526:	2300      	movs	r3, #0
 8006528:	e72b      	b.n	8006382 <_dtoa_r+0x71a>
 800652a:	9b08      	ldr	r3, [sp, #32]
 800652c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800652e:	9408      	str	r4, [sp, #32]
 8006530:	1ae3      	subs	r3, r4, r3
 8006532:	441a      	add	r2, r3
 8006534:	9e00      	ldr	r6, [sp, #0]
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	920d      	str	r2, [sp, #52]	@ 0x34
 800653a:	2400      	movs	r4, #0
 800653c:	e721      	b.n	8006382 <_dtoa_r+0x71a>
 800653e:	9c08      	ldr	r4, [sp, #32]
 8006540:	9e00      	ldr	r6, [sp, #0]
 8006542:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006544:	e728      	b.n	8006398 <_dtoa_r+0x730>
 8006546:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800654a:	e751      	b.n	80063f0 <_dtoa_r+0x788>
 800654c:	9a08      	ldr	r2, [sp, #32]
 800654e:	9902      	ldr	r1, [sp, #8]
 8006550:	e750      	b.n	80063f4 <_dtoa_r+0x78c>
 8006552:	f8cd 8008 	str.w	r8, [sp, #8]
 8006556:	e751      	b.n	80063fc <_dtoa_r+0x794>
 8006558:	2300      	movs	r3, #0
 800655a:	e779      	b.n	8006450 <_dtoa_r+0x7e8>
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	e777      	b.n	8006450 <_dtoa_r+0x7e8>
 8006560:	2300      	movs	r3, #0
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	e779      	b.n	800645a <_dtoa_r+0x7f2>
 8006566:	d093      	beq.n	8006490 <_dtoa_r+0x828>
 8006568:	9a00      	ldr	r2, [sp, #0]
 800656a:	331c      	adds	r3, #28
 800656c:	441a      	add	r2, r3
 800656e:	9200      	str	r2, [sp, #0]
 8006570:	9a06      	ldr	r2, [sp, #24]
 8006572:	441a      	add	r2, r3
 8006574:	441e      	add	r6, r3
 8006576:	9206      	str	r2, [sp, #24]
 8006578:	e78a      	b.n	8006490 <_dtoa_r+0x828>
 800657a:	4603      	mov	r3, r0
 800657c:	e7f4      	b.n	8006568 <_dtoa_r+0x900>
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	46b8      	mov	r8, r7
 8006584:	dc20      	bgt.n	80065c8 <_dtoa_r+0x960>
 8006586:	469b      	mov	fp, r3
 8006588:	9b07      	ldr	r3, [sp, #28]
 800658a:	2b02      	cmp	r3, #2
 800658c:	dd1e      	ble.n	80065cc <_dtoa_r+0x964>
 800658e:	f1bb 0f00 	cmp.w	fp, #0
 8006592:	f47f adb1 	bne.w	80060f8 <_dtoa_r+0x490>
 8006596:	4621      	mov	r1, r4
 8006598:	465b      	mov	r3, fp
 800659a:	2205      	movs	r2, #5
 800659c:	4648      	mov	r0, r9
 800659e:	f000 fa95 	bl	8006acc <__multadd>
 80065a2:	4601      	mov	r1, r0
 80065a4:	4604      	mov	r4, r0
 80065a6:	9802      	ldr	r0, [sp, #8]
 80065a8:	f000 fca0 	bl	8006eec <__mcmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f77f ada3 	ble.w	80060f8 <_dtoa_r+0x490>
 80065b2:	4656      	mov	r6, sl
 80065b4:	2331      	movs	r3, #49	@ 0x31
 80065b6:	f806 3b01 	strb.w	r3, [r6], #1
 80065ba:	f108 0801 	add.w	r8, r8, #1
 80065be:	e59f      	b.n	8006100 <_dtoa_r+0x498>
 80065c0:	9c03      	ldr	r4, [sp, #12]
 80065c2:	46b8      	mov	r8, r7
 80065c4:	4625      	mov	r5, r4
 80065c6:	e7f4      	b.n	80065b2 <_dtoa_r+0x94a>
 80065c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80065cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8101 	beq.w	80067d6 <_dtoa_r+0xb6e>
 80065d4:	2e00      	cmp	r6, #0
 80065d6:	dd05      	ble.n	80065e4 <_dtoa_r+0x97c>
 80065d8:	4629      	mov	r1, r5
 80065da:	4632      	mov	r2, r6
 80065dc:	4648      	mov	r0, r9
 80065de:	f000 fc19 	bl	8006e14 <__lshift>
 80065e2:	4605      	mov	r5, r0
 80065e4:	9b08      	ldr	r3, [sp, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d05c      	beq.n	80066a4 <_dtoa_r+0xa3c>
 80065ea:	6869      	ldr	r1, [r5, #4]
 80065ec:	4648      	mov	r0, r9
 80065ee:	f000 fa0b 	bl	8006a08 <_Balloc>
 80065f2:	4606      	mov	r6, r0
 80065f4:	b928      	cbnz	r0, 8006602 <_dtoa_r+0x99a>
 80065f6:	4b82      	ldr	r3, [pc, #520]	@ (8006800 <_dtoa_r+0xb98>)
 80065f8:	4602      	mov	r2, r0
 80065fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065fe:	f7ff bb4a 	b.w	8005c96 <_dtoa_r+0x2e>
 8006602:	692a      	ldr	r2, [r5, #16]
 8006604:	3202      	adds	r2, #2
 8006606:	0092      	lsls	r2, r2, #2
 8006608:	f105 010c 	add.w	r1, r5, #12
 800660c:	300c      	adds	r0, #12
 800660e:	f7ff fa92 	bl	8005b36 <memcpy>
 8006612:	2201      	movs	r2, #1
 8006614:	4631      	mov	r1, r6
 8006616:	4648      	mov	r0, r9
 8006618:	f000 fbfc 	bl	8006e14 <__lshift>
 800661c:	f10a 0301 	add.w	r3, sl, #1
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	eb0a 030b 	add.w	r3, sl, fp
 8006626:	9308      	str	r3, [sp, #32]
 8006628:	9b04      	ldr	r3, [sp, #16]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	462f      	mov	r7, r5
 8006630:	9306      	str	r3, [sp, #24]
 8006632:	4605      	mov	r5, r0
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	9802      	ldr	r0, [sp, #8]
 8006638:	4621      	mov	r1, r4
 800663a:	f103 3bff 	add.w	fp, r3, #4294967295
 800663e:	f7ff fa88 	bl	8005b52 <quorem>
 8006642:	4603      	mov	r3, r0
 8006644:	3330      	adds	r3, #48	@ 0x30
 8006646:	9003      	str	r0, [sp, #12]
 8006648:	4639      	mov	r1, r7
 800664a:	9802      	ldr	r0, [sp, #8]
 800664c:	9309      	str	r3, [sp, #36]	@ 0x24
 800664e:	f000 fc4d 	bl	8006eec <__mcmp>
 8006652:	462a      	mov	r2, r5
 8006654:	9004      	str	r0, [sp, #16]
 8006656:	4621      	mov	r1, r4
 8006658:	4648      	mov	r0, r9
 800665a:	f000 fc63 	bl	8006f24 <__mdiff>
 800665e:	68c2      	ldr	r2, [r0, #12]
 8006660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006662:	4606      	mov	r6, r0
 8006664:	bb02      	cbnz	r2, 80066a8 <_dtoa_r+0xa40>
 8006666:	4601      	mov	r1, r0
 8006668:	9802      	ldr	r0, [sp, #8]
 800666a:	f000 fc3f 	bl	8006eec <__mcmp>
 800666e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006670:	4602      	mov	r2, r0
 8006672:	4631      	mov	r1, r6
 8006674:	4648      	mov	r0, r9
 8006676:	920c      	str	r2, [sp, #48]	@ 0x30
 8006678:	9309      	str	r3, [sp, #36]	@ 0x24
 800667a:	f000 fa05 	bl	8006a88 <_Bfree>
 800667e:	9b07      	ldr	r3, [sp, #28]
 8006680:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006682:	9e00      	ldr	r6, [sp, #0]
 8006684:	ea42 0103 	orr.w	r1, r2, r3
 8006688:	9b06      	ldr	r3, [sp, #24]
 800668a:	4319      	orrs	r1, r3
 800668c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800668e:	d10d      	bne.n	80066ac <_dtoa_r+0xa44>
 8006690:	2b39      	cmp	r3, #57	@ 0x39
 8006692:	d027      	beq.n	80066e4 <_dtoa_r+0xa7c>
 8006694:	9a04      	ldr	r2, [sp, #16]
 8006696:	2a00      	cmp	r2, #0
 8006698:	dd01      	ble.n	800669e <_dtoa_r+0xa36>
 800669a:	9b03      	ldr	r3, [sp, #12]
 800669c:	3331      	adds	r3, #49	@ 0x31
 800669e:	f88b 3000 	strb.w	r3, [fp]
 80066a2:	e52e      	b.n	8006102 <_dtoa_r+0x49a>
 80066a4:	4628      	mov	r0, r5
 80066a6:	e7b9      	b.n	800661c <_dtoa_r+0x9b4>
 80066a8:	2201      	movs	r2, #1
 80066aa:	e7e2      	b.n	8006672 <_dtoa_r+0xa0a>
 80066ac:	9904      	ldr	r1, [sp, #16]
 80066ae:	2900      	cmp	r1, #0
 80066b0:	db04      	blt.n	80066bc <_dtoa_r+0xa54>
 80066b2:	9807      	ldr	r0, [sp, #28]
 80066b4:	4301      	orrs	r1, r0
 80066b6:	9806      	ldr	r0, [sp, #24]
 80066b8:	4301      	orrs	r1, r0
 80066ba:	d120      	bne.n	80066fe <_dtoa_r+0xa96>
 80066bc:	2a00      	cmp	r2, #0
 80066be:	ddee      	ble.n	800669e <_dtoa_r+0xa36>
 80066c0:	9902      	ldr	r1, [sp, #8]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	2201      	movs	r2, #1
 80066c6:	4648      	mov	r0, r9
 80066c8:	f000 fba4 	bl	8006e14 <__lshift>
 80066cc:	4621      	mov	r1, r4
 80066ce:	9002      	str	r0, [sp, #8]
 80066d0:	f000 fc0c 	bl	8006eec <__mcmp>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	9b00      	ldr	r3, [sp, #0]
 80066d8:	dc02      	bgt.n	80066e0 <_dtoa_r+0xa78>
 80066da:	d1e0      	bne.n	800669e <_dtoa_r+0xa36>
 80066dc:	07da      	lsls	r2, r3, #31
 80066de:	d5de      	bpl.n	800669e <_dtoa_r+0xa36>
 80066e0:	2b39      	cmp	r3, #57	@ 0x39
 80066e2:	d1da      	bne.n	800669a <_dtoa_r+0xa32>
 80066e4:	2339      	movs	r3, #57	@ 0x39
 80066e6:	f88b 3000 	strb.w	r3, [fp]
 80066ea:	4633      	mov	r3, r6
 80066ec:	461e      	mov	r6, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066f4:	2a39      	cmp	r2, #57	@ 0x39
 80066f6:	d04e      	beq.n	8006796 <_dtoa_r+0xb2e>
 80066f8:	3201      	adds	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	e501      	b.n	8006102 <_dtoa_r+0x49a>
 80066fe:	2a00      	cmp	r2, #0
 8006700:	dd03      	ble.n	800670a <_dtoa_r+0xaa2>
 8006702:	2b39      	cmp	r3, #57	@ 0x39
 8006704:	d0ee      	beq.n	80066e4 <_dtoa_r+0xa7c>
 8006706:	3301      	adds	r3, #1
 8006708:	e7c9      	b.n	800669e <_dtoa_r+0xa36>
 800670a:	9a00      	ldr	r2, [sp, #0]
 800670c:	9908      	ldr	r1, [sp, #32]
 800670e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006712:	428a      	cmp	r2, r1
 8006714:	d028      	beq.n	8006768 <_dtoa_r+0xb00>
 8006716:	9902      	ldr	r1, [sp, #8]
 8006718:	2300      	movs	r3, #0
 800671a:	220a      	movs	r2, #10
 800671c:	4648      	mov	r0, r9
 800671e:	f000 f9d5 	bl	8006acc <__multadd>
 8006722:	42af      	cmp	r7, r5
 8006724:	9002      	str	r0, [sp, #8]
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	f04f 020a 	mov.w	r2, #10
 800672e:	4639      	mov	r1, r7
 8006730:	4648      	mov	r0, r9
 8006732:	d107      	bne.n	8006744 <_dtoa_r+0xadc>
 8006734:	f000 f9ca 	bl	8006acc <__multadd>
 8006738:	4607      	mov	r7, r0
 800673a:	4605      	mov	r5, r0
 800673c:	9b00      	ldr	r3, [sp, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	e777      	b.n	8006634 <_dtoa_r+0x9cc>
 8006744:	f000 f9c2 	bl	8006acc <__multadd>
 8006748:	4629      	mov	r1, r5
 800674a:	4607      	mov	r7, r0
 800674c:	2300      	movs	r3, #0
 800674e:	220a      	movs	r2, #10
 8006750:	4648      	mov	r0, r9
 8006752:	f000 f9bb 	bl	8006acc <__multadd>
 8006756:	4605      	mov	r5, r0
 8006758:	e7f0      	b.n	800673c <_dtoa_r+0xad4>
 800675a:	f1bb 0f00 	cmp.w	fp, #0
 800675e:	bfcc      	ite	gt
 8006760:	465e      	movgt	r6, fp
 8006762:	2601      	movle	r6, #1
 8006764:	4456      	add	r6, sl
 8006766:	2700      	movs	r7, #0
 8006768:	9902      	ldr	r1, [sp, #8]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2201      	movs	r2, #1
 800676e:	4648      	mov	r0, r9
 8006770:	f000 fb50 	bl	8006e14 <__lshift>
 8006774:	4621      	mov	r1, r4
 8006776:	9002      	str	r0, [sp, #8]
 8006778:	f000 fbb8 	bl	8006eec <__mcmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	dcb4      	bgt.n	80066ea <_dtoa_r+0xa82>
 8006780:	d102      	bne.n	8006788 <_dtoa_r+0xb20>
 8006782:	9b00      	ldr	r3, [sp, #0]
 8006784:	07db      	lsls	r3, r3, #31
 8006786:	d4b0      	bmi.n	80066ea <_dtoa_r+0xa82>
 8006788:	4633      	mov	r3, r6
 800678a:	461e      	mov	r6, r3
 800678c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006790:	2a30      	cmp	r2, #48	@ 0x30
 8006792:	d0fa      	beq.n	800678a <_dtoa_r+0xb22>
 8006794:	e4b5      	b.n	8006102 <_dtoa_r+0x49a>
 8006796:	459a      	cmp	sl, r3
 8006798:	d1a8      	bne.n	80066ec <_dtoa_r+0xa84>
 800679a:	2331      	movs	r3, #49	@ 0x31
 800679c:	f108 0801 	add.w	r8, r8, #1
 80067a0:	f88a 3000 	strb.w	r3, [sl]
 80067a4:	e4ad      	b.n	8006102 <_dtoa_r+0x49a>
 80067a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006804 <_dtoa_r+0xb9c>
 80067ac:	b11b      	cbz	r3, 80067b6 <_dtoa_r+0xb4e>
 80067ae:	f10a 0308 	add.w	r3, sl, #8
 80067b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4650      	mov	r0, sl
 80067b8:	b017      	add	sp, #92	@ 0x5c
 80067ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067be:	9b07      	ldr	r3, [sp, #28]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	f77f ae2e 	ble.w	8006422 <_dtoa_r+0x7ba>
 80067c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067c8:	9308      	str	r3, [sp, #32]
 80067ca:	2001      	movs	r0, #1
 80067cc:	e64d      	b.n	800646a <_dtoa_r+0x802>
 80067ce:	f1bb 0f00 	cmp.w	fp, #0
 80067d2:	f77f aed9 	ble.w	8006588 <_dtoa_r+0x920>
 80067d6:	4656      	mov	r6, sl
 80067d8:	9802      	ldr	r0, [sp, #8]
 80067da:	4621      	mov	r1, r4
 80067dc:	f7ff f9b9 	bl	8005b52 <quorem>
 80067e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80067e4:	f806 3b01 	strb.w	r3, [r6], #1
 80067e8:	eba6 020a 	sub.w	r2, r6, sl
 80067ec:	4593      	cmp	fp, r2
 80067ee:	ddb4      	ble.n	800675a <_dtoa_r+0xaf2>
 80067f0:	9902      	ldr	r1, [sp, #8]
 80067f2:	2300      	movs	r3, #0
 80067f4:	220a      	movs	r2, #10
 80067f6:	4648      	mov	r0, r9
 80067f8:	f000 f968 	bl	8006acc <__multadd>
 80067fc:	9002      	str	r0, [sp, #8]
 80067fe:	e7eb      	b.n	80067d8 <_dtoa_r+0xb70>
 8006800:	08007935 	.word	0x08007935
 8006804:	080078b9 	.word	0x080078b9

08006808 <_free_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4605      	mov	r5, r0
 800680c:	2900      	cmp	r1, #0
 800680e:	d041      	beq.n	8006894 <_free_r+0x8c>
 8006810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006814:	1f0c      	subs	r4, r1, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfb8      	it	lt
 800681a:	18e4      	addlt	r4, r4, r3
 800681c:	f000 f8e8 	bl	80069f0 <__malloc_lock>
 8006820:	4a1d      	ldr	r2, [pc, #116]	@ (8006898 <_free_r+0x90>)
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	b933      	cbnz	r3, 8006834 <_free_r+0x2c>
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	6014      	str	r4, [r2, #0]
 800682a:	4628      	mov	r0, r5
 800682c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006830:	f000 b8e4 	b.w	80069fc <__malloc_unlock>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d908      	bls.n	800684a <_free_r+0x42>
 8006838:	6820      	ldr	r0, [r4, #0]
 800683a:	1821      	adds	r1, r4, r0
 800683c:	428b      	cmp	r3, r1
 800683e:	bf01      	itttt	eq
 8006840:	6819      	ldreq	r1, [r3, #0]
 8006842:	685b      	ldreq	r3, [r3, #4]
 8006844:	1809      	addeq	r1, r1, r0
 8006846:	6021      	streq	r1, [r4, #0]
 8006848:	e7ed      	b.n	8006826 <_free_r+0x1e>
 800684a:	461a      	mov	r2, r3
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	b10b      	cbz	r3, 8006854 <_free_r+0x4c>
 8006850:	42a3      	cmp	r3, r4
 8006852:	d9fa      	bls.n	800684a <_free_r+0x42>
 8006854:	6811      	ldr	r1, [r2, #0]
 8006856:	1850      	adds	r0, r2, r1
 8006858:	42a0      	cmp	r0, r4
 800685a:	d10b      	bne.n	8006874 <_free_r+0x6c>
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	4401      	add	r1, r0
 8006860:	1850      	adds	r0, r2, r1
 8006862:	4283      	cmp	r3, r0
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	d1e0      	bne.n	800682a <_free_r+0x22>
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	6053      	str	r3, [r2, #4]
 800686e:	4408      	add	r0, r1
 8006870:	6010      	str	r0, [r2, #0]
 8006872:	e7da      	b.n	800682a <_free_r+0x22>
 8006874:	d902      	bls.n	800687c <_free_r+0x74>
 8006876:	230c      	movs	r3, #12
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	e7d6      	b.n	800682a <_free_r+0x22>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	1821      	adds	r1, r4, r0
 8006880:	428b      	cmp	r3, r1
 8006882:	bf04      	itt	eq
 8006884:	6819      	ldreq	r1, [r3, #0]
 8006886:	685b      	ldreq	r3, [r3, #4]
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	bf04      	itt	eq
 800688c:	1809      	addeq	r1, r1, r0
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	6054      	str	r4, [r2, #4]
 8006892:	e7ca      	b.n	800682a <_free_r+0x22>
 8006894:	bd38      	pop	{r3, r4, r5, pc}
 8006896:	bf00      	nop
 8006898:	20004cb8 	.word	0x20004cb8

0800689c <malloc>:
 800689c:	4b02      	ldr	r3, [pc, #8]	@ (80068a8 <malloc+0xc>)
 800689e:	4601      	mov	r1, r0
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	f000 b825 	b.w	80068f0 <_malloc_r>
 80068a6:	bf00      	nop
 80068a8:	20000020 	.word	0x20000020

080068ac <sbrk_aligned>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	4e0f      	ldr	r6, [pc, #60]	@ (80068ec <sbrk_aligned+0x40>)
 80068b0:	460c      	mov	r4, r1
 80068b2:	6831      	ldr	r1, [r6, #0]
 80068b4:	4605      	mov	r5, r0
 80068b6:	b911      	cbnz	r1, 80068be <sbrk_aligned+0x12>
 80068b8:	f000 fe92 	bl	80075e0 <_sbrk_r>
 80068bc:	6030      	str	r0, [r6, #0]
 80068be:	4621      	mov	r1, r4
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 fe8d 	bl	80075e0 <_sbrk_r>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d103      	bne.n	80068d2 <sbrk_aligned+0x26>
 80068ca:	f04f 34ff 	mov.w	r4, #4294967295
 80068ce:	4620      	mov	r0, r4
 80068d0:	bd70      	pop	{r4, r5, r6, pc}
 80068d2:	1cc4      	adds	r4, r0, #3
 80068d4:	f024 0403 	bic.w	r4, r4, #3
 80068d8:	42a0      	cmp	r0, r4
 80068da:	d0f8      	beq.n	80068ce <sbrk_aligned+0x22>
 80068dc:	1a21      	subs	r1, r4, r0
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 fe7e 	bl	80075e0 <_sbrk_r>
 80068e4:	3001      	adds	r0, #1
 80068e6:	d1f2      	bne.n	80068ce <sbrk_aligned+0x22>
 80068e8:	e7ef      	b.n	80068ca <sbrk_aligned+0x1e>
 80068ea:	bf00      	nop
 80068ec:	20004cb4 	.word	0x20004cb4

080068f0 <_malloc_r>:
 80068f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f4:	1ccd      	adds	r5, r1, #3
 80068f6:	f025 0503 	bic.w	r5, r5, #3
 80068fa:	3508      	adds	r5, #8
 80068fc:	2d0c      	cmp	r5, #12
 80068fe:	bf38      	it	cc
 8006900:	250c      	movcc	r5, #12
 8006902:	2d00      	cmp	r5, #0
 8006904:	4606      	mov	r6, r0
 8006906:	db01      	blt.n	800690c <_malloc_r+0x1c>
 8006908:	42a9      	cmp	r1, r5
 800690a:	d904      	bls.n	8006916 <_malloc_r+0x26>
 800690c:	230c      	movs	r3, #12
 800690e:	6033      	str	r3, [r6, #0]
 8006910:	2000      	movs	r0, #0
 8006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069ec <_malloc_r+0xfc>
 800691a:	f000 f869 	bl	80069f0 <__malloc_lock>
 800691e:	f8d8 3000 	ldr.w	r3, [r8]
 8006922:	461c      	mov	r4, r3
 8006924:	bb44      	cbnz	r4, 8006978 <_malloc_r+0x88>
 8006926:	4629      	mov	r1, r5
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff ffbf 	bl	80068ac <sbrk_aligned>
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	4604      	mov	r4, r0
 8006932:	d158      	bne.n	80069e6 <_malloc_r+0xf6>
 8006934:	f8d8 4000 	ldr.w	r4, [r8]
 8006938:	4627      	mov	r7, r4
 800693a:	2f00      	cmp	r7, #0
 800693c:	d143      	bne.n	80069c6 <_malloc_r+0xd6>
 800693e:	2c00      	cmp	r4, #0
 8006940:	d04b      	beq.n	80069da <_malloc_r+0xea>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	4639      	mov	r1, r7
 8006946:	4630      	mov	r0, r6
 8006948:	eb04 0903 	add.w	r9, r4, r3
 800694c:	f000 fe48 	bl	80075e0 <_sbrk_r>
 8006950:	4581      	cmp	r9, r0
 8006952:	d142      	bne.n	80069da <_malloc_r+0xea>
 8006954:	6821      	ldr	r1, [r4, #0]
 8006956:	1a6d      	subs	r5, r5, r1
 8006958:	4629      	mov	r1, r5
 800695a:	4630      	mov	r0, r6
 800695c:	f7ff ffa6 	bl	80068ac <sbrk_aligned>
 8006960:	3001      	adds	r0, #1
 8006962:	d03a      	beq.n	80069da <_malloc_r+0xea>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	442b      	add	r3, r5
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	f8d8 3000 	ldr.w	r3, [r8]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	bb62      	cbnz	r2, 80069cc <_malloc_r+0xdc>
 8006972:	f8c8 7000 	str.w	r7, [r8]
 8006976:	e00f      	b.n	8006998 <_malloc_r+0xa8>
 8006978:	6822      	ldr	r2, [r4, #0]
 800697a:	1b52      	subs	r2, r2, r5
 800697c:	d420      	bmi.n	80069c0 <_malloc_r+0xd0>
 800697e:	2a0b      	cmp	r2, #11
 8006980:	d917      	bls.n	80069b2 <_malloc_r+0xc2>
 8006982:	1961      	adds	r1, r4, r5
 8006984:	42a3      	cmp	r3, r4
 8006986:	6025      	str	r5, [r4, #0]
 8006988:	bf18      	it	ne
 800698a:	6059      	strne	r1, [r3, #4]
 800698c:	6863      	ldr	r3, [r4, #4]
 800698e:	bf08      	it	eq
 8006990:	f8c8 1000 	streq.w	r1, [r8]
 8006994:	5162      	str	r2, [r4, r5]
 8006996:	604b      	str	r3, [r1, #4]
 8006998:	4630      	mov	r0, r6
 800699a:	f000 f82f 	bl	80069fc <__malloc_unlock>
 800699e:	f104 000b 	add.w	r0, r4, #11
 80069a2:	1d23      	adds	r3, r4, #4
 80069a4:	f020 0007 	bic.w	r0, r0, #7
 80069a8:	1ac2      	subs	r2, r0, r3
 80069aa:	bf1c      	itt	ne
 80069ac:	1a1b      	subne	r3, r3, r0
 80069ae:	50a3      	strne	r3, [r4, r2]
 80069b0:	e7af      	b.n	8006912 <_malloc_r+0x22>
 80069b2:	6862      	ldr	r2, [r4, #4]
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	bf0c      	ite	eq
 80069b8:	f8c8 2000 	streq.w	r2, [r8]
 80069bc:	605a      	strne	r2, [r3, #4]
 80069be:	e7eb      	b.n	8006998 <_malloc_r+0xa8>
 80069c0:	4623      	mov	r3, r4
 80069c2:	6864      	ldr	r4, [r4, #4]
 80069c4:	e7ae      	b.n	8006924 <_malloc_r+0x34>
 80069c6:	463c      	mov	r4, r7
 80069c8:	687f      	ldr	r7, [r7, #4]
 80069ca:	e7b6      	b.n	800693a <_malloc_r+0x4a>
 80069cc:	461a      	mov	r2, r3
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	d1fb      	bne.n	80069cc <_malloc_r+0xdc>
 80069d4:	2300      	movs	r3, #0
 80069d6:	6053      	str	r3, [r2, #4]
 80069d8:	e7de      	b.n	8006998 <_malloc_r+0xa8>
 80069da:	230c      	movs	r3, #12
 80069dc:	6033      	str	r3, [r6, #0]
 80069de:	4630      	mov	r0, r6
 80069e0:	f000 f80c 	bl	80069fc <__malloc_unlock>
 80069e4:	e794      	b.n	8006910 <_malloc_r+0x20>
 80069e6:	6005      	str	r5, [r0, #0]
 80069e8:	e7d6      	b.n	8006998 <_malloc_r+0xa8>
 80069ea:	bf00      	nop
 80069ec:	20004cb8 	.word	0x20004cb8

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	@ (80069f8 <__malloc_lock+0x8>)
 80069f2:	f7ff b89e 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20004cb0 	.word	0x20004cb0

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	@ (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f7ff b899 	b.w	8005b34 <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20004cb0 	.word	0x20004cb0

08006a08 <_Balloc>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	69c6      	ldr	r6, [r0, #28]
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	460d      	mov	r5, r1
 8006a10:	b976      	cbnz	r6, 8006a30 <_Balloc+0x28>
 8006a12:	2010      	movs	r0, #16
 8006a14:	f7ff ff42 	bl	800689c <malloc>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	61e0      	str	r0, [r4, #28]
 8006a1c:	b920      	cbnz	r0, 8006a28 <_Balloc+0x20>
 8006a1e:	4b18      	ldr	r3, [pc, #96]	@ (8006a80 <_Balloc+0x78>)
 8006a20:	4818      	ldr	r0, [pc, #96]	@ (8006a84 <_Balloc+0x7c>)
 8006a22:	216b      	movs	r1, #107	@ 0x6b
 8006a24:	f000 fdec 	bl	8007600 <__assert_func>
 8006a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a2c:	6006      	str	r6, [r0, #0]
 8006a2e:	60c6      	str	r6, [r0, #12]
 8006a30:	69e6      	ldr	r6, [r4, #28]
 8006a32:	68f3      	ldr	r3, [r6, #12]
 8006a34:	b183      	cbz	r3, 8006a58 <_Balloc+0x50>
 8006a36:	69e3      	ldr	r3, [r4, #28]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a3e:	b9b8      	cbnz	r0, 8006a70 <_Balloc+0x68>
 8006a40:	2101      	movs	r1, #1
 8006a42:	fa01 f605 	lsl.w	r6, r1, r5
 8006a46:	1d72      	adds	r2, r6, #5
 8006a48:	0092      	lsls	r2, r2, #2
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fdf6 	bl	800763c <_calloc_r>
 8006a50:	b160      	cbz	r0, 8006a6c <_Balloc+0x64>
 8006a52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a56:	e00e      	b.n	8006a76 <_Balloc+0x6e>
 8006a58:	2221      	movs	r2, #33	@ 0x21
 8006a5a:	2104      	movs	r1, #4
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fded 	bl	800763c <_calloc_r>
 8006a62:	69e3      	ldr	r3, [r4, #28]
 8006a64:	60f0      	str	r0, [r6, #12]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e4      	bne.n	8006a36 <_Balloc+0x2e>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	6802      	ldr	r2, [r0, #0]
 8006a72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a76:	2300      	movs	r3, #0
 8006a78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a7c:	e7f7      	b.n	8006a6e <_Balloc+0x66>
 8006a7e:	bf00      	nop
 8006a80:	080078c6 	.word	0x080078c6
 8006a84:	08007946 	.word	0x08007946

08006a88 <_Bfree>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	69c6      	ldr	r6, [r0, #28]
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	b976      	cbnz	r6, 8006ab0 <_Bfree+0x28>
 8006a92:	2010      	movs	r0, #16
 8006a94:	f7ff ff02 	bl	800689c <malloc>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	61e8      	str	r0, [r5, #28]
 8006a9c:	b920      	cbnz	r0, 8006aa8 <_Bfree+0x20>
 8006a9e:	4b09      	ldr	r3, [pc, #36]	@ (8006ac4 <_Bfree+0x3c>)
 8006aa0:	4809      	ldr	r0, [pc, #36]	@ (8006ac8 <_Bfree+0x40>)
 8006aa2:	218f      	movs	r1, #143	@ 0x8f
 8006aa4:	f000 fdac 	bl	8007600 <__assert_func>
 8006aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006aac:	6006      	str	r6, [r0, #0]
 8006aae:	60c6      	str	r6, [r0, #12]
 8006ab0:	b13c      	cbz	r4, 8006ac2 <_Bfree+0x3a>
 8006ab2:	69eb      	ldr	r3, [r5, #28]
 8006ab4:	6862      	ldr	r2, [r4, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006abc:	6021      	str	r1, [r4, #0]
 8006abe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	080078c6 	.word	0x080078c6
 8006ac8:	08007946 	.word	0x08007946

08006acc <__multadd>:
 8006acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad0:	690d      	ldr	r5, [r1, #16]
 8006ad2:	4607      	mov	r7, r0
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	461e      	mov	r6, r3
 8006ad8:	f101 0c14 	add.w	ip, r1, #20
 8006adc:	2000      	movs	r0, #0
 8006ade:	f8dc 3000 	ldr.w	r3, [ip]
 8006ae2:	b299      	uxth	r1, r3
 8006ae4:	fb02 6101 	mla	r1, r2, r1, r6
 8006ae8:	0c1e      	lsrs	r6, r3, #16
 8006aea:	0c0b      	lsrs	r3, r1, #16
 8006aec:	fb02 3306 	mla	r3, r2, r6, r3
 8006af0:	b289      	uxth	r1, r1
 8006af2:	3001      	adds	r0, #1
 8006af4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006af8:	4285      	cmp	r5, r0
 8006afa:	f84c 1b04 	str.w	r1, [ip], #4
 8006afe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b02:	dcec      	bgt.n	8006ade <__multadd+0x12>
 8006b04:	b30e      	cbz	r6, 8006b4a <__multadd+0x7e>
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	42ab      	cmp	r3, r5
 8006b0a:	dc19      	bgt.n	8006b40 <__multadd+0x74>
 8006b0c:	6861      	ldr	r1, [r4, #4]
 8006b0e:	4638      	mov	r0, r7
 8006b10:	3101      	adds	r1, #1
 8006b12:	f7ff ff79 	bl	8006a08 <_Balloc>
 8006b16:	4680      	mov	r8, r0
 8006b18:	b928      	cbnz	r0, 8006b26 <__multadd+0x5a>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <__multadd+0x84>)
 8006b1e:	480d      	ldr	r0, [pc, #52]	@ (8006b54 <__multadd+0x88>)
 8006b20:	21ba      	movs	r1, #186	@ 0xba
 8006b22:	f000 fd6d 	bl	8007600 <__assert_func>
 8006b26:	6922      	ldr	r2, [r4, #16]
 8006b28:	3202      	adds	r2, #2
 8006b2a:	f104 010c 	add.w	r1, r4, #12
 8006b2e:	0092      	lsls	r2, r2, #2
 8006b30:	300c      	adds	r0, #12
 8006b32:	f7ff f800 	bl	8005b36 <memcpy>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4638      	mov	r0, r7
 8006b3a:	f7ff ffa5 	bl	8006a88 <_Bfree>
 8006b3e:	4644      	mov	r4, r8
 8006b40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b44:	3501      	adds	r5, #1
 8006b46:	615e      	str	r6, [r3, #20]
 8006b48:	6125      	str	r5, [r4, #16]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b50:	08007935 	.word	0x08007935
 8006b54:	08007946 	.word	0x08007946

08006b58 <__hi0bits>:
 8006b58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	bf36      	itet	cc
 8006b60:	0403      	lslcc	r3, r0, #16
 8006b62:	2000      	movcs	r0, #0
 8006b64:	2010      	movcc	r0, #16
 8006b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b6a:	bf3c      	itt	cc
 8006b6c:	021b      	lslcc	r3, r3, #8
 8006b6e:	3008      	addcc	r0, #8
 8006b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b74:	bf3c      	itt	cc
 8006b76:	011b      	lslcc	r3, r3, #4
 8006b78:	3004      	addcc	r0, #4
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b7e:	bf3c      	itt	cc
 8006b80:	009b      	lslcc	r3, r3, #2
 8006b82:	3002      	addcc	r0, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	db05      	blt.n	8006b94 <__hi0bits+0x3c>
 8006b88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b8c:	f100 0001 	add.w	r0, r0, #1
 8006b90:	bf08      	it	eq
 8006b92:	2020      	moveq	r0, #32
 8006b94:	4770      	bx	lr

08006b96 <__lo0bits>:
 8006b96:	6803      	ldr	r3, [r0, #0]
 8006b98:	4602      	mov	r2, r0
 8006b9a:	f013 0007 	ands.w	r0, r3, #7
 8006b9e:	d00b      	beq.n	8006bb8 <__lo0bits+0x22>
 8006ba0:	07d9      	lsls	r1, r3, #31
 8006ba2:	d421      	bmi.n	8006be8 <__lo0bits+0x52>
 8006ba4:	0798      	lsls	r0, r3, #30
 8006ba6:	bf49      	itett	mi
 8006ba8:	085b      	lsrmi	r3, r3, #1
 8006baa:	089b      	lsrpl	r3, r3, #2
 8006bac:	2001      	movmi	r0, #1
 8006bae:	6013      	strmi	r3, [r2, #0]
 8006bb0:	bf5c      	itt	pl
 8006bb2:	6013      	strpl	r3, [r2, #0]
 8006bb4:	2002      	movpl	r0, #2
 8006bb6:	4770      	bx	lr
 8006bb8:	b299      	uxth	r1, r3
 8006bba:	b909      	cbnz	r1, 8006bc0 <__lo0bits+0x2a>
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	2010      	movs	r0, #16
 8006bc0:	b2d9      	uxtb	r1, r3
 8006bc2:	b909      	cbnz	r1, 8006bc8 <__lo0bits+0x32>
 8006bc4:	3008      	adds	r0, #8
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	0719      	lsls	r1, r3, #28
 8006bca:	bf04      	itt	eq
 8006bcc:	091b      	lsreq	r3, r3, #4
 8006bce:	3004      	addeq	r0, #4
 8006bd0:	0799      	lsls	r1, r3, #30
 8006bd2:	bf04      	itt	eq
 8006bd4:	089b      	lsreq	r3, r3, #2
 8006bd6:	3002      	addeq	r0, #2
 8006bd8:	07d9      	lsls	r1, r3, #31
 8006bda:	d403      	bmi.n	8006be4 <__lo0bits+0x4e>
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	f100 0001 	add.w	r0, r0, #1
 8006be2:	d003      	beq.n	8006bec <__lo0bits+0x56>
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	4770      	bx	lr
 8006be8:	2000      	movs	r0, #0
 8006bea:	4770      	bx	lr
 8006bec:	2020      	movs	r0, #32
 8006bee:	4770      	bx	lr

08006bf0 <__i2b>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	f7ff ff07 	bl	8006a08 <_Balloc>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	b928      	cbnz	r0, 8006c0a <__i2b+0x1a>
 8006bfe:	4b05      	ldr	r3, [pc, #20]	@ (8006c14 <__i2b+0x24>)
 8006c00:	4805      	ldr	r0, [pc, #20]	@ (8006c18 <__i2b+0x28>)
 8006c02:	f240 1145 	movw	r1, #325	@ 0x145
 8006c06:	f000 fcfb 	bl	8007600 <__assert_func>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	6144      	str	r4, [r0, #20]
 8006c0e:	6103      	str	r3, [r0, #16]
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	bf00      	nop
 8006c14:	08007935 	.word	0x08007935
 8006c18:	08007946 	.word	0x08007946

08006c1c <__multiply>:
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	4617      	mov	r7, r2
 8006c22:	690a      	ldr	r2, [r1, #16]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	bfa8      	it	ge
 8006c2a:	463b      	movge	r3, r7
 8006c2c:	4689      	mov	r9, r1
 8006c2e:	bfa4      	itt	ge
 8006c30:	460f      	movge	r7, r1
 8006c32:	4699      	movge	r9, r3
 8006c34:	693d      	ldr	r5, [r7, #16]
 8006c36:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	eb05 060a 	add.w	r6, r5, sl
 8006c42:	42b3      	cmp	r3, r6
 8006c44:	b085      	sub	sp, #20
 8006c46:	bfb8      	it	lt
 8006c48:	3101      	addlt	r1, #1
 8006c4a:	f7ff fedd 	bl	8006a08 <_Balloc>
 8006c4e:	b930      	cbnz	r0, 8006c5e <__multiply+0x42>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b41      	ldr	r3, [pc, #260]	@ (8006d58 <__multiply+0x13c>)
 8006c54:	4841      	ldr	r0, [pc, #260]	@ (8006d5c <__multiply+0x140>)
 8006c56:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c5a:	f000 fcd1 	bl	8007600 <__assert_func>
 8006c5e:	f100 0414 	add.w	r4, r0, #20
 8006c62:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006c66:	4623      	mov	r3, r4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4573      	cmp	r3, lr
 8006c6c:	d320      	bcc.n	8006cb0 <__multiply+0x94>
 8006c6e:	f107 0814 	add.w	r8, r7, #20
 8006c72:	f109 0114 	add.w	r1, r9, #20
 8006c76:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006c7a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	1beb      	subs	r3, r5, r7
 8006c82:	3b15      	subs	r3, #21
 8006c84:	f023 0303 	bic.w	r3, r3, #3
 8006c88:	3304      	adds	r3, #4
 8006c8a:	3715      	adds	r7, #21
 8006c8c:	42bd      	cmp	r5, r7
 8006c8e:	bf38      	it	cc
 8006c90:	2304      	movcc	r3, #4
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	9103      	str	r1, [sp, #12]
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	d80c      	bhi.n	8006cb6 <__multiply+0x9a>
 8006c9c:	2e00      	cmp	r6, #0
 8006c9e:	dd03      	ble.n	8006ca8 <__multiply+0x8c>
 8006ca0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d055      	beq.n	8006d54 <__multiply+0x138>
 8006ca8:	6106      	str	r6, [r0, #16]
 8006caa:	b005      	add	sp, #20
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	f843 2b04 	str.w	r2, [r3], #4
 8006cb4:	e7d9      	b.n	8006c6a <__multiply+0x4e>
 8006cb6:	f8b1 a000 	ldrh.w	sl, [r1]
 8006cba:	f1ba 0f00 	cmp.w	sl, #0
 8006cbe:	d01f      	beq.n	8006d00 <__multiply+0xe4>
 8006cc0:	46c4      	mov	ip, r8
 8006cc2:	46a1      	mov	r9, r4
 8006cc4:	2700      	movs	r7, #0
 8006cc6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cca:	f8d9 3000 	ldr.w	r3, [r9]
 8006cce:	fa1f fb82 	uxth.w	fp, r2
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cd8:	443b      	add	r3, r7
 8006cda:	f8d9 7000 	ldr.w	r7, [r9]
 8006cde:	0c12      	lsrs	r2, r2, #16
 8006ce0:	0c3f      	lsrs	r7, r7, #16
 8006ce2:	fb0a 7202 	mla	r2, sl, r2, r7
 8006ce6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cf0:	4565      	cmp	r5, ip
 8006cf2:	f849 3b04 	str.w	r3, [r9], #4
 8006cf6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006cfa:	d8e4      	bhi.n	8006cc6 <__multiply+0xaa>
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	50e7      	str	r7, [r4, r3]
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d06:	3104      	adds	r1, #4
 8006d08:	f1b9 0f00 	cmp.w	r9, #0
 8006d0c:	d020      	beq.n	8006d50 <__multiply+0x134>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	4647      	mov	r7, r8
 8006d12:	46a4      	mov	ip, r4
 8006d14:	f04f 0a00 	mov.w	sl, #0
 8006d18:	f8b7 b000 	ldrh.w	fp, [r7]
 8006d1c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006d20:	fb09 220b 	mla	r2, r9, fp, r2
 8006d24:	4452      	add	r2, sl
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d2c:	f84c 3b04 	str.w	r3, [ip], #4
 8006d30:	f857 3b04 	ldr.w	r3, [r7], #4
 8006d34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d38:	f8bc 3000 	ldrh.w	r3, [ip]
 8006d3c:	fb09 330a 	mla	r3, r9, sl, r3
 8006d40:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006d44:	42bd      	cmp	r5, r7
 8006d46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d4a:	d8e5      	bhi.n	8006d18 <__multiply+0xfc>
 8006d4c:	9a01      	ldr	r2, [sp, #4]
 8006d4e:	50a3      	str	r3, [r4, r2]
 8006d50:	3404      	adds	r4, #4
 8006d52:	e79f      	b.n	8006c94 <__multiply+0x78>
 8006d54:	3e01      	subs	r6, #1
 8006d56:	e7a1      	b.n	8006c9c <__multiply+0x80>
 8006d58:	08007935 	.word	0x08007935
 8006d5c:	08007946 	.word	0x08007946

08006d60 <__pow5mult>:
 8006d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d64:	4615      	mov	r5, r2
 8006d66:	f012 0203 	ands.w	r2, r2, #3
 8006d6a:	4607      	mov	r7, r0
 8006d6c:	460e      	mov	r6, r1
 8006d6e:	d007      	beq.n	8006d80 <__pow5mult+0x20>
 8006d70:	4c25      	ldr	r4, [pc, #148]	@ (8006e08 <__pow5mult+0xa8>)
 8006d72:	3a01      	subs	r2, #1
 8006d74:	2300      	movs	r3, #0
 8006d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d7a:	f7ff fea7 	bl	8006acc <__multadd>
 8006d7e:	4606      	mov	r6, r0
 8006d80:	10ad      	asrs	r5, r5, #2
 8006d82:	d03d      	beq.n	8006e00 <__pow5mult+0xa0>
 8006d84:	69fc      	ldr	r4, [r7, #28]
 8006d86:	b97c      	cbnz	r4, 8006da8 <__pow5mult+0x48>
 8006d88:	2010      	movs	r0, #16
 8006d8a:	f7ff fd87 	bl	800689c <malloc>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	61f8      	str	r0, [r7, #28]
 8006d92:	b928      	cbnz	r0, 8006da0 <__pow5mult+0x40>
 8006d94:	4b1d      	ldr	r3, [pc, #116]	@ (8006e0c <__pow5mult+0xac>)
 8006d96:	481e      	ldr	r0, [pc, #120]	@ (8006e10 <__pow5mult+0xb0>)
 8006d98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d9c:	f000 fc30 	bl	8007600 <__assert_func>
 8006da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006da4:	6004      	str	r4, [r0, #0]
 8006da6:	60c4      	str	r4, [r0, #12]
 8006da8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006db0:	b94c      	cbnz	r4, 8006dc6 <__pow5mult+0x66>
 8006db2:	f240 2171 	movw	r1, #625	@ 0x271
 8006db6:	4638      	mov	r0, r7
 8006db8:	f7ff ff1a 	bl	8006bf0 <__i2b>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	6003      	str	r3, [r0, #0]
 8006dc6:	f04f 0900 	mov.w	r9, #0
 8006dca:	07eb      	lsls	r3, r5, #31
 8006dcc:	d50a      	bpl.n	8006de4 <__pow5mult+0x84>
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	f7ff ff22 	bl	8006c1c <__multiply>
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4680      	mov	r8, r0
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff fe53 	bl	8006a88 <_Bfree>
 8006de2:	4646      	mov	r6, r8
 8006de4:	106d      	asrs	r5, r5, #1
 8006de6:	d00b      	beq.n	8006e00 <__pow5mult+0xa0>
 8006de8:	6820      	ldr	r0, [r4, #0]
 8006dea:	b938      	cbnz	r0, 8006dfc <__pow5mult+0x9c>
 8006dec:	4622      	mov	r2, r4
 8006dee:	4621      	mov	r1, r4
 8006df0:	4638      	mov	r0, r7
 8006df2:	f7ff ff13 	bl	8006c1c <__multiply>
 8006df6:	6020      	str	r0, [r4, #0]
 8006df8:	f8c0 9000 	str.w	r9, [r0]
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	e7e4      	b.n	8006dca <__pow5mult+0x6a>
 8006e00:	4630      	mov	r0, r6
 8006e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e06:	bf00      	nop
 8006e08:	080079f8 	.word	0x080079f8
 8006e0c:	080078c6 	.word	0x080078c6
 8006e10:	08007946 	.word	0x08007946

08006e14 <__lshift>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6849      	ldr	r1, [r1, #4]
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e22:	68a3      	ldr	r3, [r4, #8]
 8006e24:	4607      	mov	r7, r0
 8006e26:	4691      	mov	r9, r2
 8006e28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e2c:	f108 0601 	add.w	r6, r8, #1
 8006e30:	42b3      	cmp	r3, r6
 8006e32:	db0b      	blt.n	8006e4c <__lshift+0x38>
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7ff fde7 	bl	8006a08 <_Balloc>
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	b948      	cbnz	r0, 8006e52 <__lshift+0x3e>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4b28      	ldr	r3, [pc, #160]	@ (8006ee4 <__lshift+0xd0>)
 8006e42:	4829      	ldr	r0, [pc, #164]	@ (8006ee8 <__lshift+0xd4>)
 8006e44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e48:	f000 fbda 	bl	8007600 <__assert_func>
 8006e4c:	3101      	adds	r1, #1
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	e7ee      	b.n	8006e30 <__lshift+0x1c>
 8006e52:	2300      	movs	r3, #0
 8006e54:	f100 0114 	add.w	r1, r0, #20
 8006e58:	f100 0210 	add.w	r2, r0, #16
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	4553      	cmp	r3, sl
 8006e60:	db33      	blt.n	8006eca <__lshift+0xb6>
 8006e62:	6920      	ldr	r0, [r4, #16]
 8006e64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e68:	f104 0314 	add.w	r3, r4, #20
 8006e6c:	f019 091f 	ands.w	r9, r9, #31
 8006e70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e78:	d02b      	beq.n	8006ed2 <__lshift+0xbe>
 8006e7a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e7e:	468a      	mov	sl, r1
 8006e80:	2200      	movs	r2, #0
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	fa00 f009 	lsl.w	r0, r0, r9
 8006e88:	4310      	orrs	r0, r2
 8006e8a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e92:	459c      	cmp	ip, r3
 8006e94:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e98:	d8f3      	bhi.n	8006e82 <__lshift+0x6e>
 8006e9a:	ebac 0304 	sub.w	r3, ip, r4
 8006e9e:	3b15      	subs	r3, #21
 8006ea0:	f023 0303 	bic.w	r3, r3, #3
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	f104 0015 	add.w	r0, r4, #21
 8006eaa:	4560      	cmp	r0, ip
 8006eac:	bf88      	it	hi
 8006eae:	2304      	movhi	r3, #4
 8006eb0:	50ca      	str	r2, [r1, r3]
 8006eb2:	b10a      	cbz	r2, 8006eb8 <__lshift+0xa4>
 8006eb4:	f108 0602 	add.w	r6, r8, #2
 8006eb8:	3e01      	subs	r6, #1
 8006eba:	4638      	mov	r0, r7
 8006ebc:	612e      	str	r6, [r5, #16]
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	f7ff fde2 	bl	8006a88 <_Bfree>
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ece:	3301      	adds	r3, #1
 8006ed0:	e7c5      	b.n	8006e5e <__lshift+0x4a>
 8006ed2:	3904      	subs	r1, #4
 8006ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006edc:	459c      	cmp	ip, r3
 8006ede:	d8f9      	bhi.n	8006ed4 <__lshift+0xc0>
 8006ee0:	e7ea      	b.n	8006eb8 <__lshift+0xa4>
 8006ee2:	bf00      	nop
 8006ee4:	08007935 	.word	0x08007935
 8006ee8:	08007946 	.word	0x08007946

08006eec <__mcmp>:
 8006eec:	690a      	ldr	r2, [r1, #16]
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6900      	ldr	r0, [r0, #16]
 8006ef2:	1a80      	subs	r0, r0, r2
 8006ef4:	b530      	push	{r4, r5, lr}
 8006ef6:	d10e      	bne.n	8006f16 <__mcmp+0x2a>
 8006ef8:	3314      	adds	r3, #20
 8006efa:	3114      	adds	r1, #20
 8006efc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f0c:	4295      	cmp	r5, r2
 8006f0e:	d003      	beq.n	8006f18 <__mcmp+0x2c>
 8006f10:	d205      	bcs.n	8006f1e <__mcmp+0x32>
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	bd30      	pop	{r4, r5, pc}
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d3f3      	bcc.n	8006f04 <__mcmp+0x18>
 8006f1c:	e7fb      	b.n	8006f16 <__mcmp+0x2a>
 8006f1e:	2001      	movs	r0, #1
 8006f20:	e7f9      	b.n	8006f16 <__mcmp+0x2a>
	...

08006f24 <__mdiff>:
 8006f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	4689      	mov	r9, r1
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	4648      	mov	r0, r9
 8006f30:	4614      	mov	r4, r2
 8006f32:	f7ff ffdb 	bl	8006eec <__mcmp>
 8006f36:	1e05      	subs	r5, r0, #0
 8006f38:	d112      	bne.n	8006f60 <__mdiff+0x3c>
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f7ff fd63 	bl	8006a08 <_Balloc>
 8006f42:	4602      	mov	r2, r0
 8006f44:	b928      	cbnz	r0, 8006f52 <__mdiff+0x2e>
 8006f46:	4b3f      	ldr	r3, [pc, #252]	@ (8007044 <__mdiff+0x120>)
 8006f48:	f240 2137 	movw	r1, #567	@ 0x237
 8006f4c:	483e      	ldr	r0, [pc, #248]	@ (8007048 <__mdiff+0x124>)
 8006f4e:	f000 fb57 	bl	8007600 <__assert_func>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f58:	4610      	mov	r0, r2
 8006f5a:	b003      	add	sp, #12
 8006f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f60:	bfbc      	itt	lt
 8006f62:	464b      	movlt	r3, r9
 8006f64:	46a1      	movlt	r9, r4
 8006f66:	4630      	mov	r0, r6
 8006f68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f6c:	bfba      	itte	lt
 8006f6e:	461c      	movlt	r4, r3
 8006f70:	2501      	movlt	r5, #1
 8006f72:	2500      	movge	r5, #0
 8006f74:	f7ff fd48 	bl	8006a08 <_Balloc>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	b918      	cbnz	r0, 8006f84 <__mdiff+0x60>
 8006f7c:	4b31      	ldr	r3, [pc, #196]	@ (8007044 <__mdiff+0x120>)
 8006f7e:	f240 2145 	movw	r1, #581	@ 0x245
 8006f82:	e7e3      	b.n	8006f4c <__mdiff+0x28>
 8006f84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f88:	6926      	ldr	r6, [r4, #16]
 8006f8a:	60c5      	str	r5, [r0, #12]
 8006f8c:	f109 0310 	add.w	r3, r9, #16
 8006f90:	f109 0514 	add.w	r5, r9, #20
 8006f94:	f104 0e14 	add.w	lr, r4, #20
 8006f98:	f100 0b14 	add.w	fp, r0, #20
 8006f9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006fa0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006fa4:	9301      	str	r3, [sp, #4]
 8006fa6:	46d9      	mov	r9, fp
 8006fa8:	f04f 0c00 	mov.w	ip, #0
 8006fac:	9b01      	ldr	r3, [sp, #4]
 8006fae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006fb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	fa1f f38a 	uxth.w	r3, sl
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	b283      	uxth	r3, r0
 8006fc0:	1acb      	subs	r3, r1, r3
 8006fc2:	0c00      	lsrs	r0, r0, #16
 8006fc4:	4463      	add	r3, ip
 8006fc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fd4:	4576      	cmp	r6, lr
 8006fd6:	f849 3b04 	str.w	r3, [r9], #4
 8006fda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fde:	d8e5      	bhi.n	8006fac <__mdiff+0x88>
 8006fe0:	1b33      	subs	r3, r6, r4
 8006fe2:	3b15      	subs	r3, #21
 8006fe4:	f023 0303 	bic.w	r3, r3, #3
 8006fe8:	3415      	adds	r4, #21
 8006fea:	3304      	adds	r3, #4
 8006fec:	42a6      	cmp	r6, r4
 8006fee:	bf38      	it	cc
 8006ff0:	2304      	movcc	r3, #4
 8006ff2:	441d      	add	r5, r3
 8006ff4:	445b      	add	r3, fp
 8006ff6:	461e      	mov	r6, r3
 8006ff8:	462c      	mov	r4, r5
 8006ffa:	4544      	cmp	r4, r8
 8006ffc:	d30e      	bcc.n	800701c <__mdiff+0xf8>
 8006ffe:	f108 0103 	add.w	r1, r8, #3
 8007002:	1b49      	subs	r1, r1, r5
 8007004:	f021 0103 	bic.w	r1, r1, #3
 8007008:	3d03      	subs	r5, #3
 800700a:	45a8      	cmp	r8, r5
 800700c:	bf38      	it	cc
 800700e:	2100      	movcc	r1, #0
 8007010:	440b      	add	r3, r1
 8007012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007016:	b191      	cbz	r1, 800703e <__mdiff+0x11a>
 8007018:	6117      	str	r7, [r2, #16]
 800701a:	e79d      	b.n	8006f58 <__mdiff+0x34>
 800701c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007020:	46e6      	mov	lr, ip
 8007022:	0c08      	lsrs	r0, r1, #16
 8007024:	fa1c fc81 	uxtah	ip, ip, r1
 8007028:	4471      	add	r1, lr
 800702a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800702e:	b289      	uxth	r1, r1
 8007030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007034:	f846 1b04 	str.w	r1, [r6], #4
 8007038:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800703c:	e7dd      	b.n	8006ffa <__mdiff+0xd6>
 800703e:	3f01      	subs	r7, #1
 8007040:	e7e7      	b.n	8007012 <__mdiff+0xee>
 8007042:	bf00      	nop
 8007044:	08007935 	.word	0x08007935
 8007048:	08007946 	.word	0x08007946

0800704c <__d2b>:
 800704c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007050:	460f      	mov	r7, r1
 8007052:	2101      	movs	r1, #1
 8007054:	ec59 8b10 	vmov	r8, r9, d0
 8007058:	4616      	mov	r6, r2
 800705a:	f7ff fcd5 	bl	8006a08 <_Balloc>
 800705e:	4604      	mov	r4, r0
 8007060:	b930      	cbnz	r0, 8007070 <__d2b+0x24>
 8007062:	4602      	mov	r2, r0
 8007064:	4b23      	ldr	r3, [pc, #140]	@ (80070f4 <__d2b+0xa8>)
 8007066:	4824      	ldr	r0, [pc, #144]	@ (80070f8 <__d2b+0xac>)
 8007068:	f240 310f 	movw	r1, #783	@ 0x30f
 800706c:	f000 fac8 	bl	8007600 <__assert_func>
 8007070:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007074:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007078:	b10d      	cbz	r5, 800707e <__d2b+0x32>
 800707a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	f1b8 0300 	subs.w	r3, r8, #0
 8007084:	d023      	beq.n	80070ce <__d2b+0x82>
 8007086:	4668      	mov	r0, sp
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	f7ff fd84 	bl	8006b96 <__lo0bits>
 800708e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007092:	b1d0      	cbz	r0, 80070ca <__d2b+0x7e>
 8007094:	f1c0 0320 	rsb	r3, r0, #32
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	430b      	orrs	r3, r1
 800709e:	40c2      	lsrs	r2, r0
 80070a0:	6163      	str	r3, [r4, #20]
 80070a2:	9201      	str	r2, [sp, #4]
 80070a4:	9b01      	ldr	r3, [sp, #4]
 80070a6:	61a3      	str	r3, [r4, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf0c      	ite	eq
 80070ac:	2201      	moveq	r2, #1
 80070ae:	2202      	movne	r2, #2
 80070b0:	6122      	str	r2, [r4, #16]
 80070b2:	b1a5      	cbz	r5, 80070de <__d2b+0x92>
 80070b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070b8:	4405      	add	r5, r0
 80070ba:	603d      	str	r5, [r7, #0]
 80070bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070c0:	6030      	str	r0, [r6, #0]
 80070c2:	4620      	mov	r0, r4
 80070c4:	b003      	add	sp, #12
 80070c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070ca:	6161      	str	r1, [r4, #20]
 80070cc:	e7ea      	b.n	80070a4 <__d2b+0x58>
 80070ce:	a801      	add	r0, sp, #4
 80070d0:	f7ff fd61 	bl	8006b96 <__lo0bits>
 80070d4:	9b01      	ldr	r3, [sp, #4]
 80070d6:	6163      	str	r3, [r4, #20]
 80070d8:	3020      	adds	r0, #32
 80070da:	2201      	movs	r2, #1
 80070dc:	e7e8      	b.n	80070b0 <__d2b+0x64>
 80070de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070e6:	6038      	str	r0, [r7, #0]
 80070e8:	6918      	ldr	r0, [r3, #16]
 80070ea:	f7ff fd35 	bl	8006b58 <__hi0bits>
 80070ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070f2:	e7e5      	b.n	80070c0 <__d2b+0x74>
 80070f4:	08007935 	.word	0x08007935
 80070f8:	08007946 	.word	0x08007946

080070fc <__sfputc_r>:
 80070fc:	6893      	ldr	r3, [r2, #8]
 80070fe:	3b01      	subs	r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	b410      	push	{r4}
 8007104:	6093      	str	r3, [r2, #8]
 8007106:	da08      	bge.n	800711a <__sfputc_r+0x1e>
 8007108:	6994      	ldr	r4, [r2, #24]
 800710a:	42a3      	cmp	r3, r4
 800710c:	db01      	blt.n	8007112 <__sfputc_r+0x16>
 800710e:	290a      	cmp	r1, #10
 8007110:	d103      	bne.n	800711a <__sfputc_r+0x1e>
 8007112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007116:	f7fe bbfa 	b.w	800590e <__swbuf_r>
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	1c58      	adds	r0, r3, #1
 800711e:	6010      	str	r0, [r2, #0]
 8007120:	7019      	strb	r1, [r3, #0]
 8007122:	4608      	mov	r0, r1
 8007124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007128:	4770      	bx	lr

0800712a <__sfputs_r>:
 800712a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	4614      	mov	r4, r2
 8007132:	18d5      	adds	r5, r2, r3
 8007134:	42ac      	cmp	r4, r5
 8007136:	d101      	bne.n	800713c <__sfputs_r+0x12>
 8007138:	2000      	movs	r0, #0
 800713a:	e007      	b.n	800714c <__sfputs_r+0x22>
 800713c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007140:	463a      	mov	r2, r7
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ffda 	bl	80070fc <__sfputc_r>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d1f3      	bne.n	8007134 <__sfputs_r+0xa>
 800714c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007150 <_vfiprintf_r>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	460d      	mov	r5, r1
 8007156:	b09d      	sub	sp, #116	@ 0x74
 8007158:	4614      	mov	r4, r2
 800715a:	4698      	mov	r8, r3
 800715c:	4606      	mov	r6, r0
 800715e:	b118      	cbz	r0, 8007168 <_vfiprintf_r+0x18>
 8007160:	6a03      	ldr	r3, [r0, #32]
 8007162:	b90b      	cbnz	r3, 8007168 <_vfiprintf_r+0x18>
 8007164:	f7fe faea 	bl	800573c <__sinit>
 8007168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800716a:	07d9      	lsls	r1, r3, #31
 800716c:	d405      	bmi.n	800717a <_vfiprintf_r+0x2a>
 800716e:	89ab      	ldrh	r3, [r5, #12]
 8007170:	059a      	lsls	r2, r3, #22
 8007172:	d402      	bmi.n	800717a <_vfiprintf_r+0x2a>
 8007174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007176:	f7fe fcdc 	bl	8005b32 <__retarget_lock_acquire_recursive>
 800717a:	89ab      	ldrh	r3, [r5, #12]
 800717c:	071b      	lsls	r3, r3, #28
 800717e:	d501      	bpl.n	8007184 <_vfiprintf_r+0x34>
 8007180:	692b      	ldr	r3, [r5, #16]
 8007182:	b99b      	cbnz	r3, 80071ac <_vfiprintf_r+0x5c>
 8007184:	4629      	mov	r1, r5
 8007186:	4630      	mov	r0, r6
 8007188:	f7fe fc00 	bl	800598c <__swsetup_r>
 800718c:	b170      	cbz	r0, 80071ac <_vfiprintf_r+0x5c>
 800718e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007190:	07dc      	lsls	r4, r3, #31
 8007192:	d504      	bpl.n	800719e <_vfiprintf_r+0x4e>
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	b01d      	add	sp, #116	@ 0x74
 800719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	0598      	lsls	r0, r3, #22
 80071a2:	d4f7      	bmi.n	8007194 <_vfiprintf_r+0x44>
 80071a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071a6:	f7fe fcc5 	bl	8005b34 <__retarget_lock_release_recursive>
 80071aa:	e7f3      	b.n	8007194 <_vfiprintf_r+0x44>
 80071ac:	2300      	movs	r3, #0
 80071ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80071b0:	2320      	movs	r3, #32
 80071b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80071ba:	2330      	movs	r3, #48	@ 0x30
 80071bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800736c <_vfiprintf_r+0x21c>
 80071c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071c4:	f04f 0901 	mov.w	r9, #1
 80071c8:	4623      	mov	r3, r4
 80071ca:	469a      	mov	sl, r3
 80071cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071d0:	b10a      	cbz	r2, 80071d6 <_vfiprintf_r+0x86>
 80071d2:	2a25      	cmp	r2, #37	@ 0x25
 80071d4:	d1f9      	bne.n	80071ca <_vfiprintf_r+0x7a>
 80071d6:	ebba 0b04 	subs.w	fp, sl, r4
 80071da:	d00b      	beq.n	80071f4 <_vfiprintf_r+0xa4>
 80071dc:	465b      	mov	r3, fp
 80071de:	4622      	mov	r2, r4
 80071e0:	4629      	mov	r1, r5
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7ff ffa1 	bl	800712a <__sfputs_r>
 80071e8:	3001      	adds	r0, #1
 80071ea:	f000 80a7 	beq.w	800733c <_vfiprintf_r+0x1ec>
 80071ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071f0:	445a      	add	r2, fp
 80071f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80071f4:	f89a 3000 	ldrb.w	r3, [sl]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 809f 	beq.w	800733c <_vfiprintf_r+0x1ec>
 80071fe:	2300      	movs	r3, #0
 8007200:	f04f 32ff 	mov.w	r2, #4294967295
 8007204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007208:	f10a 0a01 	add.w	sl, sl, #1
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	9307      	str	r3, [sp, #28]
 8007210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007214:	931a      	str	r3, [sp, #104]	@ 0x68
 8007216:	4654      	mov	r4, sl
 8007218:	2205      	movs	r2, #5
 800721a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721e:	4853      	ldr	r0, [pc, #332]	@ (800736c <_vfiprintf_r+0x21c>)
 8007220:	f7f8 ffde 	bl	80001e0 <memchr>
 8007224:	9a04      	ldr	r2, [sp, #16]
 8007226:	b9d8      	cbnz	r0, 8007260 <_vfiprintf_r+0x110>
 8007228:	06d1      	lsls	r1, r2, #27
 800722a:	bf44      	itt	mi
 800722c:	2320      	movmi	r3, #32
 800722e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007232:	0713      	lsls	r3, r2, #28
 8007234:	bf44      	itt	mi
 8007236:	232b      	movmi	r3, #43	@ 0x2b
 8007238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800723c:	f89a 3000 	ldrb.w	r3, [sl]
 8007240:	2b2a      	cmp	r3, #42	@ 0x2a
 8007242:	d015      	beq.n	8007270 <_vfiprintf_r+0x120>
 8007244:	9a07      	ldr	r2, [sp, #28]
 8007246:	4654      	mov	r4, sl
 8007248:	2000      	movs	r0, #0
 800724a:	f04f 0c0a 	mov.w	ip, #10
 800724e:	4621      	mov	r1, r4
 8007250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007254:	3b30      	subs	r3, #48	@ 0x30
 8007256:	2b09      	cmp	r3, #9
 8007258:	d94b      	bls.n	80072f2 <_vfiprintf_r+0x1a2>
 800725a:	b1b0      	cbz	r0, 800728a <_vfiprintf_r+0x13a>
 800725c:	9207      	str	r2, [sp, #28]
 800725e:	e014      	b.n	800728a <_vfiprintf_r+0x13a>
 8007260:	eba0 0308 	sub.w	r3, r0, r8
 8007264:	fa09 f303 	lsl.w	r3, r9, r3
 8007268:	4313      	orrs	r3, r2
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	46a2      	mov	sl, r4
 800726e:	e7d2      	b.n	8007216 <_vfiprintf_r+0xc6>
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	1d19      	adds	r1, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	9103      	str	r1, [sp, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	bfbb      	ittet	lt
 800727c:	425b      	neglt	r3, r3
 800727e:	f042 0202 	orrlt.w	r2, r2, #2
 8007282:	9307      	strge	r3, [sp, #28]
 8007284:	9307      	strlt	r3, [sp, #28]
 8007286:	bfb8      	it	lt
 8007288:	9204      	strlt	r2, [sp, #16]
 800728a:	7823      	ldrb	r3, [r4, #0]
 800728c:	2b2e      	cmp	r3, #46	@ 0x2e
 800728e:	d10a      	bne.n	80072a6 <_vfiprintf_r+0x156>
 8007290:	7863      	ldrb	r3, [r4, #1]
 8007292:	2b2a      	cmp	r3, #42	@ 0x2a
 8007294:	d132      	bne.n	80072fc <_vfiprintf_r+0x1ac>
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	1d1a      	adds	r2, r3, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	9203      	str	r2, [sp, #12]
 800729e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072a2:	3402      	adds	r4, #2
 80072a4:	9305      	str	r3, [sp, #20]
 80072a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800737c <_vfiprintf_r+0x22c>
 80072aa:	7821      	ldrb	r1, [r4, #0]
 80072ac:	2203      	movs	r2, #3
 80072ae:	4650      	mov	r0, sl
 80072b0:	f7f8 ff96 	bl	80001e0 <memchr>
 80072b4:	b138      	cbz	r0, 80072c6 <_vfiprintf_r+0x176>
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	eba0 000a 	sub.w	r0, r0, sl
 80072bc:	2240      	movs	r2, #64	@ 0x40
 80072be:	4082      	lsls	r2, r0
 80072c0:	4313      	orrs	r3, r2
 80072c2:	3401      	adds	r4, #1
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ca:	4829      	ldr	r0, [pc, #164]	@ (8007370 <_vfiprintf_r+0x220>)
 80072cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072d0:	2206      	movs	r2, #6
 80072d2:	f7f8 ff85 	bl	80001e0 <memchr>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d03f      	beq.n	800735a <_vfiprintf_r+0x20a>
 80072da:	4b26      	ldr	r3, [pc, #152]	@ (8007374 <_vfiprintf_r+0x224>)
 80072dc:	bb1b      	cbnz	r3, 8007326 <_vfiprintf_r+0x1d6>
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	3307      	adds	r3, #7
 80072e2:	f023 0307 	bic.w	r3, r3, #7
 80072e6:	3308      	adds	r3, #8
 80072e8:	9303      	str	r3, [sp, #12]
 80072ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ec:	443b      	add	r3, r7
 80072ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80072f0:	e76a      	b.n	80071c8 <_vfiprintf_r+0x78>
 80072f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80072f6:	460c      	mov	r4, r1
 80072f8:	2001      	movs	r0, #1
 80072fa:	e7a8      	b.n	800724e <_vfiprintf_r+0xfe>
 80072fc:	2300      	movs	r3, #0
 80072fe:	3401      	adds	r4, #1
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	4619      	mov	r1, r3
 8007304:	f04f 0c0a 	mov.w	ip, #10
 8007308:	4620      	mov	r0, r4
 800730a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800730e:	3a30      	subs	r2, #48	@ 0x30
 8007310:	2a09      	cmp	r2, #9
 8007312:	d903      	bls.n	800731c <_vfiprintf_r+0x1cc>
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0c6      	beq.n	80072a6 <_vfiprintf_r+0x156>
 8007318:	9105      	str	r1, [sp, #20]
 800731a:	e7c4      	b.n	80072a6 <_vfiprintf_r+0x156>
 800731c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007320:	4604      	mov	r4, r0
 8007322:	2301      	movs	r3, #1
 8007324:	e7f0      	b.n	8007308 <_vfiprintf_r+0x1b8>
 8007326:	ab03      	add	r3, sp, #12
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	462a      	mov	r2, r5
 800732c:	4b12      	ldr	r3, [pc, #72]	@ (8007378 <_vfiprintf_r+0x228>)
 800732e:	a904      	add	r1, sp, #16
 8007330:	4630      	mov	r0, r6
 8007332:	f7fd fdc1 	bl	8004eb8 <_printf_float>
 8007336:	4607      	mov	r7, r0
 8007338:	1c78      	adds	r0, r7, #1
 800733a:	d1d6      	bne.n	80072ea <_vfiprintf_r+0x19a>
 800733c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800733e:	07d9      	lsls	r1, r3, #31
 8007340:	d405      	bmi.n	800734e <_vfiprintf_r+0x1fe>
 8007342:	89ab      	ldrh	r3, [r5, #12]
 8007344:	059a      	lsls	r2, r3, #22
 8007346:	d402      	bmi.n	800734e <_vfiprintf_r+0x1fe>
 8007348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800734a:	f7fe fbf3 	bl	8005b34 <__retarget_lock_release_recursive>
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	065b      	lsls	r3, r3, #25
 8007352:	f53f af1f 	bmi.w	8007194 <_vfiprintf_r+0x44>
 8007356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007358:	e71e      	b.n	8007198 <_vfiprintf_r+0x48>
 800735a:	ab03      	add	r3, sp, #12
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	462a      	mov	r2, r5
 8007360:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <_vfiprintf_r+0x228>)
 8007362:	a904      	add	r1, sp, #16
 8007364:	4630      	mov	r0, r6
 8007366:	f7fe f83f 	bl	80053e8 <_printf_i>
 800736a:	e7e4      	b.n	8007336 <_vfiprintf_r+0x1e6>
 800736c:	0800799f 	.word	0x0800799f
 8007370:	080079a9 	.word	0x080079a9
 8007374:	08004eb9 	.word	0x08004eb9
 8007378:	0800712b 	.word	0x0800712b
 800737c:	080079a5 	.word	0x080079a5

08007380 <__sflush_r>:
 8007380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007388:	0716      	lsls	r6, r2, #28
 800738a:	4605      	mov	r5, r0
 800738c:	460c      	mov	r4, r1
 800738e:	d454      	bmi.n	800743a <__sflush_r+0xba>
 8007390:	684b      	ldr	r3, [r1, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	dc02      	bgt.n	800739c <__sflush_r+0x1c>
 8007396:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	dd48      	ble.n	800742e <__sflush_r+0xae>
 800739c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800739e:	2e00      	cmp	r6, #0
 80073a0:	d045      	beq.n	800742e <__sflush_r+0xae>
 80073a2:	2300      	movs	r3, #0
 80073a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073a8:	682f      	ldr	r7, [r5, #0]
 80073aa:	6a21      	ldr	r1, [r4, #32]
 80073ac:	602b      	str	r3, [r5, #0]
 80073ae:	d030      	beq.n	8007412 <__sflush_r+0x92>
 80073b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	0759      	lsls	r1, r3, #29
 80073b6:	d505      	bpl.n	80073c4 <__sflush_r+0x44>
 80073b8:	6863      	ldr	r3, [r4, #4]
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073be:	b10b      	cbz	r3, 80073c4 <__sflush_r+0x44>
 80073c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	2300      	movs	r3, #0
 80073c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073c8:	6a21      	ldr	r1, [r4, #32]
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b0      	blx	r6
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	d106      	bne.n	80073e2 <__sflush_r+0x62>
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	291d      	cmp	r1, #29
 80073d8:	d82b      	bhi.n	8007432 <__sflush_r+0xb2>
 80073da:	4a2a      	ldr	r2, [pc, #168]	@ (8007484 <__sflush_r+0x104>)
 80073dc:	40ca      	lsrs	r2, r1
 80073de:	07d6      	lsls	r6, r2, #31
 80073e0:	d527      	bpl.n	8007432 <__sflush_r+0xb2>
 80073e2:	2200      	movs	r2, #0
 80073e4:	6062      	str	r2, [r4, #4]
 80073e6:	04d9      	lsls	r1, r3, #19
 80073e8:	6922      	ldr	r2, [r4, #16]
 80073ea:	6022      	str	r2, [r4, #0]
 80073ec:	d504      	bpl.n	80073f8 <__sflush_r+0x78>
 80073ee:	1c42      	adds	r2, r0, #1
 80073f0:	d101      	bne.n	80073f6 <__sflush_r+0x76>
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	b903      	cbnz	r3, 80073f8 <__sflush_r+0x78>
 80073f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80073f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073fa:	602f      	str	r7, [r5, #0]
 80073fc:	b1b9      	cbz	r1, 800742e <__sflush_r+0xae>
 80073fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007402:	4299      	cmp	r1, r3
 8007404:	d002      	beq.n	800740c <__sflush_r+0x8c>
 8007406:	4628      	mov	r0, r5
 8007408:	f7ff f9fe 	bl	8006808 <_free_r>
 800740c:	2300      	movs	r3, #0
 800740e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007410:	e00d      	b.n	800742e <__sflush_r+0xae>
 8007412:	2301      	movs	r3, #1
 8007414:	4628      	mov	r0, r5
 8007416:	47b0      	blx	r6
 8007418:	4602      	mov	r2, r0
 800741a:	1c50      	adds	r0, r2, #1
 800741c:	d1c9      	bne.n	80073b2 <__sflush_r+0x32>
 800741e:	682b      	ldr	r3, [r5, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0c6      	beq.n	80073b2 <__sflush_r+0x32>
 8007424:	2b1d      	cmp	r3, #29
 8007426:	d001      	beq.n	800742c <__sflush_r+0xac>
 8007428:	2b16      	cmp	r3, #22
 800742a:	d11e      	bne.n	800746a <__sflush_r+0xea>
 800742c:	602f      	str	r7, [r5, #0]
 800742e:	2000      	movs	r0, #0
 8007430:	e022      	b.n	8007478 <__sflush_r+0xf8>
 8007432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007436:	b21b      	sxth	r3, r3
 8007438:	e01b      	b.n	8007472 <__sflush_r+0xf2>
 800743a:	690f      	ldr	r7, [r1, #16]
 800743c:	2f00      	cmp	r7, #0
 800743e:	d0f6      	beq.n	800742e <__sflush_r+0xae>
 8007440:	0793      	lsls	r3, r2, #30
 8007442:	680e      	ldr	r6, [r1, #0]
 8007444:	bf08      	it	eq
 8007446:	694b      	ldreq	r3, [r1, #20]
 8007448:	600f      	str	r7, [r1, #0]
 800744a:	bf18      	it	ne
 800744c:	2300      	movne	r3, #0
 800744e:	eba6 0807 	sub.w	r8, r6, r7
 8007452:	608b      	str	r3, [r1, #8]
 8007454:	f1b8 0f00 	cmp.w	r8, #0
 8007458:	dde9      	ble.n	800742e <__sflush_r+0xae>
 800745a:	6a21      	ldr	r1, [r4, #32]
 800745c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800745e:	4643      	mov	r3, r8
 8007460:	463a      	mov	r2, r7
 8007462:	4628      	mov	r0, r5
 8007464:	47b0      	blx	r6
 8007466:	2800      	cmp	r0, #0
 8007468:	dc08      	bgt.n	800747c <__sflush_r+0xfc>
 800746a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800747c:	4407      	add	r7, r0
 800747e:	eba8 0800 	sub.w	r8, r8, r0
 8007482:	e7e7      	b.n	8007454 <__sflush_r+0xd4>
 8007484:	20400001 	.word	0x20400001

08007488 <_fflush_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	690b      	ldr	r3, [r1, #16]
 800748c:	4605      	mov	r5, r0
 800748e:	460c      	mov	r4, r1
 8007490:	b913      	cbnz	r3, 8007498 <_fflush_r+0x10>
 8007492:	2500      	movs	r5, #0
 8007494:	4628      	mov	r0, r5
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	b118      	cbz	r0, 80074a2 <_fflush_r+0x1a>
 800749a:	6a03      	ldr	r3, [r0, #32]
 800749c:	b90b      	cbnz	r3, 80074a2 <_fflush_r+0x1a>
 800749e:	f7fe f94d 	bl	800573c <__sinit>
 80074a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0f3      	beq.n	8007492 <_fflush_r+0xa>
 80074aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074ac:	07d0      	lsls	r0, r2, #31
 80074ae:	d404      	bmi.n	80074ba <_fflush_r+0x32>
 80074b0:	0599      	lsls	r1, r3, #22
 80074b2:	d402      	bmi.n	80074ba <_fflush_r+0x32>
 80074b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074b6:	f7fe fb3c 	bl	8005b32 <__retarget_lock_acquire_recursive>
 80074ba:	4628      	mov	r0, r5
 80074bc:	4621      	mov	r1, r4
 80074be:	f7ff ff5f 	bl	8007380 <__sflush_r>
 80074c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074c4:	07da      	lsls	r2, r3, #31
 80074c6:	4605      	mov	r5, r0
 80074c8:	d4e4      	bmi.n	8007494 <_fflush_r+0xc>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	059b      	lsls	r3, r3, #22
 80074ce:	d4e1      	bmi.n	8007494 <_fflush_r+0xc>
 80074d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074d2:	f7fe fb2f 	bl	8005b34 <__retarget_lock_release_recursive>
 80074d6:	e7dd      	b.n	8007494 <_fflush_r+0xc>

080074d8 <__swhatbuf_r>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	460c      	mov	r4, r1
 80074dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e0:	2900      	cmp	r1, #0
 80074e2:	b096      	sub	sp, #88	@ 0x58
 80074e4:	4615      	mov	r5, r2
 80074e6:	461e      	mov	r6, r3
 80074e8:	da0d      	bge.n	8007506 <__swhatbuf_r+0x2e>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074f0:	f04f 0100 	mov.w	r1, #0
 80074f4:	bf14      	ite	ne
 80074f6:	2340      	movne	r3, #64	@ 0x40
 80074f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074fc:	2000      	movs	r0, #0
 80074fe:	6031      	str	r1, [r6, #0]
 8007500:	602b      	str	r3, [r5, #0]
 8007502:	b016      	add	sp, #88	@ 0x58
 8007504:	bd70      	pop	{r4, r5, r6, pc}
 8007506:	466a      	mov	r2, sp
 8007508:	f000 f848 	bl	800759c <_fstat_r>
 800750c:	2800      	cmp	r0, #0
 800750e:	dbec      	blt.n	80074ea <__swhatbuf_r+0x12>
 8007510:	9901      	ldr	r1, [sp, #4]
 8007512:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007516:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800751a:	4259      	negs	r1, r3
 800751c:	4159      	adcs	r1, r3
 800751e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007522:	e7eb      	b.n	80074fc <__swhatbuf_r+0x24>

08007524 <__smakebuf_r>:
 8007524:	898b      	ldrh	r3, [r1, #12]
 8007526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007528:	079d      	lsls	r5, r3, #30
 800752a:	4606      	mov	r6, r0
 800752c:	460c      	mov	r4, r1
 800752e:	d507      	bpl.n	8007540 <__smakebuf_r+0x1c>
 8007530:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	2301      	movs	r3, #1
 800753a:	6163      	str	r3, [r4, #20]
 800753c:	b003      	add	sp, #12
 800753e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007540:	ab01      	add	r3, sp, #4
 8007542:	466a      	mov	r2, sp
 8007544:	f7ff ffc8 	bl	80074d8 <__swhatbuf_r>
 8007548:	9f00      	ldr	r7, [sp, #0]
 800754a:	4605      	mov	r5, r0
 800754c:	4639      	mov	r1, r7
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff f9ce 	bl	80068f0 <_malloc_r>
 8007554:	b948      	cbnz	r0, 800756a <__smakebuf_r+0x46>
 8007556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755a:	059a      	lsls	r2, r3, #22
 800755c:	d4ee      	bmi.n	800753c <__smakebuf_r+0x18>
 800755e:	f023 0303 	bic.w	r3, r3, #3
 8007562:	f043 0302 	orr.w	r3, r3, #2
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	e7e2      	b.n	8007530 <__smakebuf_r+0xc>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	6020      	str	r0, [r4, #0]
 800756e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007572:	81a3      	strh	r3, [r4, #12]
 8007574:	9b01      	ldr	r3, [sp, #4]
 8007576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800757a:	b15b      	cbz	r3, 8007594 <__smakebuf_r+0x70>
 800757c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007580:	4630      	mov	r0, r6
 8007582:	f000 f81d 	bl	80075c0 <_isatty_r>
 8007586:	b128      	cbz	r0, 8007594 <__smakebuf_r+0x70>
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	81a3      	strh	r3, [r4, #12]
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	431d      	orrs	r5, r3
 8007598:	81a5      	strh	r5, [r4, #12]
 800759a:	e7cf      	b.n	800753c <__smakebuf_r+0x18>

0800759c <_fstat_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d07      	ldr	r5, [pc, #28]	@ (80075bc <_fstat_r+0x20>)
 80075a0:	2300      	movs	r3, #0
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	4611      	mov	r1, r2
 80075a8:	602b      	str	r3, [r5, #0]
 80075aa:	f7fa fa49 	bl	8001a40 <_fstat>
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d102      	bne.n	80075b8 <_fstat_r+0x1c>
 80075b2:	682b      	ldr	r3, [r5, #0]
 80075b4:	b103      	cbz	r3, 80075b8 <_fstat_r+0x1c>
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	bd38      	pop	{r3, r4, r5, pc}
 80075ba:	bf00      	nop
 80075bc:	20004cac 	.word	0x20004cac

080075c0 <_isatty_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d06      	ldr	r5, [pc, #24]	@ (80075dc <_isatty_r+0x1c>)
 80075c4:	2300      	movs	r3, #0
 80075c6:	4604      	mov	r4, r0
 80075c8:	4608      	mov	r0, r1
 80075ca:	602b      	str	r3, [r5, #0]
 80075cc:	f7fa fa48 	bl	8001a60 <_isatty>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_isatty_r+0x1a>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_isatty_r+0x1a>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	20004cac 	.word	0x20004cac

080075e0 <_sbrk_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d06      	ldr	r5, [pc, #24]	@ (80075fc <_sbrk_r+0x1c>)
 80075e4:	2300      	movs	r3, #0
 80075e6:	4604      	mov	r4, r0
 80075e8:	4608      	mov	r0, r1
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	f7fa fa50 	bl	8001a90 <_sbrk>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_sbrk_r+0x1a>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_sbrk_r+0x1a>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	20004cac 	.word	0x20004cac

08007600 <__assert_func>:
 8007600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007602:	4614      	mov	r4, r2
 8007604:	461a      	mov	r2, r3
 8007606:	4b09      	ldr	r3, [pc, #36]	@ (800762c <__assert_func+0x2c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4605      	mov	r5, r0
 800760c:	68d8      	ldr	r0, [r3, #12]
 800760e:	b14c      	cbz	r4, 8007624 <__assert_func+0x24>
 8007610:	4b07      	ldr	r3, [pc, #28]	@ (8007630 <__assert_func+0x30>)
 8007612:	9100      	str	r1, [sp, #0]
 8007614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007618:	4906      	ldr	r1, [pc, #24]	@ (8007634 <__assert_func+0x34>)
 800761a:	462b      	mov	r3, r5
 800761c:	f000 f842 	bl	80076a4 <fiprintf>
 8007620:	f000 f852 	bl	80076c8 <abort>
 8007624:	4b04      	ldr	r3, [pc, #16]	@ (8007638 <__assert_func+0x38>)
 8007626:	461c      	mov	r4, r3
 8007628:	e7f3      	b.n	8007612 <__assert_func+0x12>
 800762a:	bf00      	nop
 800762c:	20000020 	.word	0x20000020
 8007630:	080079ba 	.word	0x080079ba
 8007634:	080079c7 	.word	0x080079c7
 8007638:	080079f5 	.word	0x080079f5

0800763c <_calloc_r>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	fba1 5402 	umull	r5, r4, r1, r2
 8007642:	b934      	cbnz	r4, 8007652 <_calloc_r+0x16>
 8007644:	4629      	mov	r1, r5
 8007646:	f7ff f953 	bl	80068f0 <_malloc_r>
 800764a:	4606      	mov	r6, r0
 800764c:	b928      	cbnz	r0, 800765a <_calloc_r+0x1e>
 800764e:	4630      	mov	r0, r6
 8007650:	bd70      	pop	{r4, r5, r6, pc}
 8007652:	220c      	movs	r2, #12
 8007654:	6002      	str	r2, [r0, #0]
 8007656:	2600      	movs	r6, #0
 8007658:	e7f9      	b.n	800764e <_calloc_r+0x12>
 800765a:	462a      	mov	r2, r5
 800765c:	4621      	mov	r1, r4
 800765e:	f7fe f9eb 	bl	8005a38 <memset>
 8007662:	e7f4      	b.n	800764e <_calloc_r+0x12>

08007664 <__ascii_mbtowc>:
 8007664:	b082      	sub	sp, #8
 8007666:	b901      	cbnz	r1, 800766a <__ascii_mbtowc+0x6>
 8007668:	a901      	add	r1, sp, #4
 800766a:	b142      	cbz	r2, 800767e <__ascii_mbtowc+0x1a>
 800766c:	b14b      	cbz	r3, 8007682 <__ascii_mbtowc+0x1e>
 800766e:	7813      	ldrb	r3, [r2, #0]
 8007670:	600b      	str	r3, [r1, #0]
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	1e10      	subs	r0, r2, #0
 8007676:	bf18      	it	ne
 8007678:	2001      	movne	r0, #1
 800767a:	b002      	add	sp, #8
 800767c:	4770      	bx	lr
 800767e:	4610      	mov	r0, r2
 8007680:	e7fb      	b.n	800767a <__ascii_mbtowc+0x16>
 8007682:	f06f 0001 	mvn.w	r0, #1
 8007686:	e7f8      	b.n	800767a <__ascii_mbtowc+0x16>

08007688 <__ascii_wctomb>:
 8007688:	4603      	mov	r3, r0
 800768a:	4608      	mov	r0, r1
 800768c:	b141      	cbz	r1, 80076a0 <__ascii_wctomb+0x18>
 800768e:	2aff      	cmp	r2, #255	@ 0xff
 8007690:	d904      	bls.n	800769c <__ascii_wctomb+0x14>
 8007692:	228a      	movs	r2, #138	@ 0x8a
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	f04f 30ff 	mov.w	r0, #4294967295
 800769a:	4770      	bx	lr
 800769c:	700a      	strb	r2, [r1, #0]
 800769e:	2001      	movs	r0, #1
 80076a0:	4770      	bx	lr
	...

080076a4 <fiprintf>:
 80076a4:	b40e      	push	{r1, r2, r3}
 80076a6:	b503      	push	{r0, r1, lr}
 80076a8:	4601      	mov	r1, r0
 80076aa:	ab03      	add	r3, sp, #12
 80076ac:	4805      	ldr	r0, [pc, #20]	@ (80076c4 <fiprintf+0x20>)
 80076ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b2:	6800      	ldr	r0, [r0, #0]
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	f7ff fd4b 	bl	8007150 <_vfiprintf_r>
 80076ba:	b002      	add	sp, #8
 80076bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c0:	b003      	add	sp, #12
 80076c2:	4770      	bx	lr
 80076c4:	20000020 	.word	0x20000020

080076c8 <abort>:
 80076c8:	b508      	push	{r3, lr}
 80076ca:	2006      	movs	r0, #6
 80076cc:	f000 f82c 	bl	8007728 <raise>
 80076d0:	2001      	movs	r0, #1
 80076d2:	f7fa f965 	bl	80019a0 <_exit>

080076d6 <_raise_r>:
 80076d6:	291f      	cmp	r1, #31
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4605      	mov	r5, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	d904      	bls.n	80076ea <_raise_r+0x14>
 80076e0:	2316      	movs	r3, #22
 80076e2:	6003      	str	r3, [r0, #0]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076ec:	b112      	cbz	r2, 80076f4 <_raise_r+0x1e>
 80076ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076f2:	b94b      	cbnz	r3, 8007708 <_raise_r+0x32>
 80076f4:	4628      	mov	r0, r5
 80076f6:	f000 f831 	bl	800775c <_getpid_r>
 80076fa:	4622      	mov	r2, r4
 80076fc:	4601      	mov	r1, r0
 80076fe:	4628      	mov	r0, r5
 8007700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007704:	f000 b818 	b.w	8007738 <_kill_r>
 8007708:	2b01      	cmp	r3, #1
 800770a:	d00a      	beq.n	8007722 <_raise_r+0x4c>
 800770c:	1c59      	adds	r1, r3, #1
 800770e:	d103      	bne.n	8007718 <_raise_r+0x42>
 8007710:	2316      	movs	r3, #22
 8007712:	6003      	str	r3, [r0, #0]
 8007714:	2001      	movs	r0, #1
 8007716:	e7e7      	b.n	80076e8 <_raise_r+0x12>
 8007718:	2100      	movs	r1, #0
 800771a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800771e:	4620      	mov	r0, r4
 8007720:	4798      	blx	r3
 8007722:	2000      	movs	r0, #0
 8007724:	e7e0      	b.n	80076e8 <_raise_r+0x12>
	...

08007728 <raise>:
 8007728:	4b02      	ldr	r3, [pc, #8]	@ (8007734 <raise+0xc>)
 800772a:	4601      	mov	r1, r0
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	f7ff bfd2 	b.w	80076d6 <_raise_r>
 8007732:	bf00      	nop
 8007734:	20000020 	.word	0x20000020

08007738 <_kill_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d07      	ldr	r5, [pc, #28]	@ (8007758 <_kill_r+0x20>)
 800773c:	2300      	movs	r3, #0
 800773e:	4604      	mov	r4, r0
 8007740:	4608      	mov	r0, r1
 8007742:	4611      	mov	r1, r2
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	f7fa f91b 	bl	8001980 <_kill>
 800774a:	1c43      	adds	r3, r0, #1
 800774c:	d102      	bne.n	8007754 <_kill_r+0x1c>
 800774e:	682b      	ldr	r3, [r5, #0]
 8007750:	b103      	cbz	r3, 8007754 <_kill_r+0x1c>
 8007752:	6023      	str	r3, [r4, #0]
 8007754:	bd38      	pop	{r3, r4, r5, pc}
 8007756:	bf00      	nop
 8007758:	20004cac 	.word	0x20004cac

0800775c <_getpid_r>:
 800775c:	f7fa b908 	b.w	8001970 <_getpid>

08007760 <_init>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr

0800776c <_fini>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	bf00      	nop
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr
